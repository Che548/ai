{"version":3,"file":"index.es.js","sources":["../../src/api-endpoints.ts","../../src/request.ts","../../src/headers-helpers.ts","../../src/data-service.ts","../../src/keys.ts","../../src/react-query/react-query-service.ts","../../src/react-query/assistants.ts"],"sourcesContent":["export const user = () => '/api/user';\n\nexport const balance = () => '/api/balance';\n\nexport const userPlugins = () => '/api/user/plugins';\n\nexport const messages = (conversationId: string, messageId?: string) =>\n  `/api/messages/${conversationId}${messageId ? `/${messageId}` : ''}`;\n\nconst keysEndpoint = '/api/keys';\n\nexport const keys = () => keysEndpoint;\n\nexport const userKeyQuery = (name: string) => `${keysEndpoint}?name=${name}`;\n\nexport const revokeUserKey = (name: string) => `${keysEndpoint}/${name}`;\n\nexport const revokeAllUserKeys = () => `${keysEndpoint}?all=true`;\n\nexport const abortRequest = (endpoint: string) => `/api/ask/${endpoint}/abort`;\n\nexport const conversations = (pageNumber: string) => `/api/convos?pageNumber=${pageNumber}`;\n\nexport const conversationById = (id: string) => `/api/convos/${id}`;\n\nexport const genTitle = () => '/api/convos/gen_title';\n\nexport const updateConversation = () => '/api/convos/update';\n\nexport const deleteConversation = () => '/api/convos/clear';\n\nexport const search = (q: string, pageNumber: string) =>\n  `/api/search?q=${q}&pageNumber=${pageNumber}`;\n\nexport const searchEnabled = () => '/api/search/enable';\n\nexport const presets = () => '/api/presets';\n\nexport const deletePreset = () => '/api/presets/delete';\n\nexport const aiEndpoints = () => '/api/endpoints';\n\nexport const endpointsConfigOverride = () => '/api/endpoints/config/override';\n\nexport const models = () => '/api/models';\n\nexport const tokenizer = () => '/api/tokenizer';\n\nexport const login = () => '/api/auth/login';\n\nexport const logout = () => '/api/auth/logout';\n\nexport const register = () => '/api/auth/register';\n\nexport const loginFacebook = () => '/api/auth/facebook';\n\nexport const loginGoogle = () => '/api/auth/google';\n\nexport const refreshToken = (retry?: boolean) => `/api/auth/refresh${retry ? '?retry=true' : ''}`;\n\nexport const requestPasswordReset = () => '/api/auth/requestPasswordReset';\n\nexport const resetPassword = () => '/api/auth/resetPassword';\n\nexport const plugins = () => '/api/plugins';\n\nexport const config = () => '/api/config';\n\nexport const assistants = (id?: string) => `/api/assistants${id ? `/${id}` : ''}`;\n\nexport const files = () => '/api/files';\n\nexport const images = () => `${files()}/images`;\n\nexport const avatar = () => `${images()}/avatar`;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport axios, { AxiosRequestConfig, AxiosError } from 'axios';\nimport { setTokenHeader } from './headers-helpers';\nimport * as endpoints from './api-endpoints';\n\nasync function _get<T>(url: string, options?: AxiosRequestConfig): Promise<T> {\n  const response = await axios.get(url, { ...options });\n  return response.data;\n}\n\nasync function _post(url: string, data?: any) {\n  const response = await axios.post(url, JSON.stringify(data), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n  return response.data;\n}\n\nasync function _postMultiPart(url: string, formData: FormData, options?: AxiosRequestConfig) {\n  const response = await axios.post(url, formData, {\n    ...options,\n    headers: { 'Content-Type': 'multipart/form-data' },\n  });\n  return response.data;\n}\n\nasync function _put(url: string, data?: any) {\n  const response = await axios.put(url, JSON.stringify(data), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n  return response.data;\n}\n\nasync function _delete<T>(url: string): Promise<T> {\n  const response = await axios.delete(url);\n  return response.data;\n}\n\nasync function _deleteWithOptions<T>(url: string, options?: AxiosRequestConfig): Promise<T> {\n  const response = await axios.delete(url, { ...options });\n  return response.data;\n}\n\nasync function _patch(url: string, data?: any) {\n  const response = await axios.patch(url, JSON.stringify(data), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n  return response.data;\n}\n\nlet isRefreshing = false;\nlet failedQueue: { resolve: (value?: any) => void; reject: (reason?: any) => void }[] = [];\n\nconst refreshToken = (retry?: boolean) => _post(endpoints.refreshToken(retry));\n\nconst processQueue = (error: AxiosError | null, token: string | null = null) => {\n  failedQueue.forEach((prom) => {\n    if (error) {\n      prom.reject(error);\n    } else {\n      prom.resolve(token);\n    }\n  });\n  failedQueue = [];\n};\n\naxios.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    if (error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      if (isRefreshing) {\n        try {\n          const token = await new Promise((resolve, reject) => {\n            failedQueue.push({ resolve, reject });\n          });\n          originalRequest.headers['Authorization'] = 'Bearer ' + token;\n          return await axios(originalRequest);\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      }\n\n      isRefreshing = true;\n\n      try {\n        const { token } = await refreshToken(\n          // Handle edge case where we get a blank screen if the initial 401 error is from a refresh token request\n          originalRequest.url?.includes('api/auth/refresh') ? true : false,\n        );\n\n        if (token) {\n          originalRequest.headers['Authorization'] = 'Bearer ' + token;\n          setTokenHeader(token);\n          window.dispatchEvent(new CustomEvent('tokenUpdated', { detail: token }));\n          processQueue(null, token);\n          return await axios(originalRequest);\n        } else {\n          window.location.href = '/login';\n        }\n      } catch (err) {\n        processQueue(err as AxiosError, null);\n        return Promise.reject(err);\n      } finally {\n        isRefreshing = false;\n      }\n    }\n\n    return Promise.reject(error);\n  },\n);\n\nexport default {\n  get: _get,\n  post: _post,\n  postMultiPart: _postMultiPart,\n  put: _put,\n  delete: _delete,\n  deleteWithOptions: _deleteWithOptions,\n  patch: _patch,\n  refreshToken,\n};\n","import axios from 'axios';\n\nexport function setAcceptLanguageHeader(value: string): void {\n  axios.defaults.headers.common['Accept-Language'] = value;\n}\n\nexport function setTokenHeader(token: string) {\n  axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\n}\n","import * as f from './types/files';\nimport * as q from './types/queries';\nimport * as m from './types/mutations';\nimport * as a from './types/assistants';\nimport * as t from './types';\nimport * as s from './schemas';\nimport request from './request';\nimport * as endpoints from './api-endpoints';\n\nexport function getConversations(pageNumber: string): Promise<t.TGetConversationsResponse> {\n  return request.get(endpoints.conversations(pageNumber));\n}\n\nexport function abortRequestWithMessage(\n  endpoint: string,\n  abortKey: string,\n  message: string,\n): Promise<void> {\n  return request.post(endpoints.abortRequest(endpoint), { arg: { abortKey, message } });\n}\n\nexport function deleteConversation(payload: t.TDeleteConversationRequest) {\n  //todo: this should be a DELETE request\n  return request.post(endpoints.deleteConversation(), { arg: payload });\n}\n\nexport function clearAllConversations(): Promise<unknown> {\n  return request.post(endpoints.deleteConversation(), { arg: {} });\n}\n\nexport function revokeUserKey(name: string): Promise<unknown> {\n  return request.delete(endpoints.revokeUserKey(name));\n}\n\nexport function revokeAllUserKeys(): Promise<unknown> {\n  return request.delete(endpoints.revokeAllUserKeys());\n}\n\nexport function getMessagesByConvoId(conversationId: string): Promise<s.TMessage[]> {\n  if (conversationId === 'new') {\n    return Promise.resolve([]);\n  }\n  return request.get(endpoints.messages(conversationId));\n}\n\nexport function getConversationById(id: string): Promise<s.TConversation> {\n  return request.get(endpoints.conversationById(id));\n}\n\nexport function updateConversation(\n  payload: t.TUpdateConversationRequest,\n): Promise<t.TUpdateConversationResponse> {\n  return request.post(endpoints.updateConversation(), { arg: payload });\n}\n\nexport function genTitle(payload: m.TGenTitleRequest): Promise<m.TGenTitleResponse> {\n  return request.post(endpoints.genTitle(), payload);\n}\n\nexport function updateMessage(payload: t.TUpdateMessageRequest): Promise<unknown> {\n  const { conversationId, messageId, text } = payload;\n  if (!conversationId) {\n    throw new Error('conversationId is required');\n  }\n\n  return request.put(endpoints.messages(conversationId, messageId), { text });\n}\n\nexport function updateUserKey(payload: t.TUpdateUserKeyRequest) {\n  const { value } = payload;\n  if (!value) {\n    throw new Error('value is required');\n  }\n\n  return request.put(endpoints.keys(), payload);\n}\n\nexport function getPresets(): Promise<s.TPreset[]> {\n  return request.get(endpoints.presets());\n}\n\nexport function createPreset(payload: s.TPreset): Promise<s.TPreset> {\n  return request.post(endpoints.presets(), payload);\n}\n\nexport function updatePreset(payload: s.TPreset): Promise<s.TPreset> {\n  return request.post(endpoints.presets(), payload);\n}\n\nexport function deletePreset(arg: s.TPreset | undefined): Promise<m.PresetDeleteResponse> {\n  return request.post(endpoints.deletePreset(), arg);\n}\n\nexport function getSearchEnabled(): Promise<boolean> {\n  return request.get(endpoints.searchEnabled());\n}\n\nexport function getUser(): Promise<t.TUser> {\n  return request.get(endpoints.user());\n}\n\nexport function getUserBalance(): Promise<string> {\n  return request.get(endpoints.balance());\n}\n\nexport const searchConversations = async (\n  q: string,\n  pageNumber: string,\n): Promise<t.TSearchResults> => {\n  return request.get(endpoints.search(q, pageNumber));\n};\n\nexport const updateTokenCount = (text: string) => {\n  return request.post(endpoints.tokenizer(), { arg: text });\n};\n\nexport const login = (payload: t.TLoginUser) => {\n  return request.post(endpoints.login(), payload);\n};\n\nexport const logout = () => {\n  return request.post(endpoints.logout());\n};\n\nexport const register = (payload: t.TRegisterUser) => {\n  return request.post(endpoints.register(), payload);\n};\n\nexport const userKeyQuery = (name: string): Promise<t.TCheckUserKeyResponse> =>\n  request.get(endpoints.userKeyQuery(name));\n\nexport const getLoginGoogle = () => {\n  return request.get(endpoints.loginGoogle());\n};\n\nexport const requestPasswordReset = (\n  payload: t.TRequestPasswordReset,\n): Promise<t.TRequestPasswordResetResponse> => {\n  return request.post(endpoints.requestPasswordReset(), payload);\n};\n\nexport const resetPassword = (payload: t.TResetPassword) => {\n  return request.post(endpoints.resetPassword(), payload);\n};\n\nexport const getAvailablePlugins = (): Promise<s.TPlugin[]> => {\n  return request.get(endpoints.plugins());\n};\n\nexport const updateUserPlugins = (payload: t.TUpdateUserPlugins) => {\n  return request.post(endpoints.userPlugins(), payload);\n};\n\n/* Config */\n\nexport const getStartupConfig = (): Promise<t.TStartupConfig> => {\n  return request.get(endpoints.config());\n};\n\nexport const getAIEndpoints = (): Promise<t.TEndpointsConfig> => {\n  return request.get(endpoints.aiEndpoints());\n};\n\nexport const getModels = async (): Promise<t.TModelsConfig> => {\n  return request.get(endpoints.models());\n};\n\nexport const getEndpointsConfigOverride = (): Promise<unknown | boolean> => {\n  return request.get(endpoints.endpointsConfigOverride());\n};\n\n/* Assistants */\n\nexport const createAssistant = (data: a.AssistantCreateParams): Promise<a.Assistant> => {\n  return request.post(endpoints.assistants(), data);\n};\n\nexport const getAssistantById = (assistant_id: string): Promise<a.Assistant> => {\n  return request.get(endpoints.assistants(assistant_id));\n};\n\nexport const updateAssistant = (\n  assistant_id: string,\n  data: a.AssistantUpdateParams,\n): Promise<a.Assistant> => {\n  return request.patch(endpoints.assistants(assistant_id), data);\n};\n\nexport const deleteAssistant = (assistant_id: string): Promise<void> => {\n  return request.delete(endpoints.assistants(assistant_id));\n};\n\nexport const listAssistants = (\n  params?: a.AssistantListParams,\n): Promise<a.AssistantListResponse> => {\n  return request.get(endpoints.assistants(), { params });\n};\n\n/* Files */\n\nexport const getFiles = (): Promise<f.TFile[]> => {\n  return request.get(endpoints.files());\n};\n\nexport const uploadImage = (data: FormData): Promise<f.TFileUpload> => {\n  return request.postMultiPart(endpoints.images(), data);\n};\n\nexport const uploadAvatar = (data: FormData): Promise<f.AvatarUploadResponse> => {\n  return request.postMultiPart(endpoints.avatar(), data);\n};\n\nexport const deleteFiles = async (files: f.BatchFile[]): Promise<f.DeleteFilesResponse> =>\n  request.deleteWithOptions(endpoints.files(), {\n    data: { files },\n  });\n\n/* conversations */\n\nexport const listConversations = (\n  params?: q.ConversationListParams,\n): Promise<q.ConversationListResponse> => {\n  // Assuming params has a pageNumber property\n  const pageNumber = params?.pageNumber || '1'; // Default to page 1 if not provided\n  return request.get(endpoints.conversations(pageNumber));\n};\n\nexport const listConversationsByQuery = (\n  params?: q.ConversationListParams & { searchQuery?: string },\n): Promise<q.ConversationListResponse> => {\n  const pageNumber = params?.pageNumber || '1'; // Default to page 1 if not provided\n  const searchQuery = params?.searchQuery || ''; // If no search query is provided, default to an empty string\n  // Update the endpoint to handle a search query\n  if (searchQuery !== '') {\n    return request.get(endpoints.search(searchQuery, pageNumber));\n  } else {\n    return request.get(endpoints.conversations(pageNumber));\n  }\n};\n","export enum QueryKeys {\n  messages = 'messages',\n  allConversations = 'allConversations',\n  searchConversations = 'searchConversations',\n  conversation = 'conversation',\n  searchEnabled = 'searchEnabled',\n  user = 'user',\n  name = 'name', // user key name\n  models = 'models',\n  balance = 'balance',\n  endpoints = 'endpoints',\n  presets = 'presets',\n  searchResults = 'searchResults',\n  tokenCount = 'tokenCount',\n  availablePlugins = 'availablePlugins',\n  startupConfig = 'startupConfig',\n  assistants = 'assistants',\n  assistant = 'assistant',\n  endpointsConfigOverride = 'endpointsConfigOverride',\n  files = 'files',\n}\n\nexport enum MutationKeys {\n  imageUpload = 'imageUpload',\n  fileDelete = 'fileDelete',\n  updatePreset = 'updatePreset',\n  deletePreset = 'deletePreset',\n  logoutUser = 'logoutUser',\n  avatarUpload = 'avatarUpload',\n}\n","import {\n  UseQueryOptions,\n  useQuery,\n  useMutation,\n  useQueryClient,\n  UseMutationResult,\n  QueryObserverResult,\n} from '@tanstack/react-query';\nimport * as t from '../types';\nimport * as s from '../schemas';\nimport * as m from '../types/mutations';\nimport * as dataService from '../data-service';\nimport request from '../request';\nimport { QueryKeys } from '../keys';\n\nexport const useAbortRequestWithMessage = (): UseMutationResult<\n  void,\n  Error,\n  { endpoint: string; abortKey: string; message: string }\n> => {\n  const queryClient = useQueryClient();\n  return useMutation(\n    ({ endpoint, abortKey, message }) =>\n      dataService.abortRequestWithMessage(endpoint, abortKey, message),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries([QueryKeys.balance]);\n      },\n    },\n  );\n};\n\nexport const useGetUserQuery = (\n  config?: UseQueryOptions<t.TUser>,\n): QueryObserverResult<t.TUser> => {\n  return useQuery<t.TUser>([QueryKeys.user], () => dataService.getUser(), {\n    refetchOnWindowFocus: false,\n    refetchOnReconnect: false,\n    refetchOnMount: false,\n    retry: false,\n    ...config,\n  });\n};\n\nexport const useGetMessagesByConvoId = <TData = s.TMessage[]>(\n  id: string,\n  config?: UseQueryOptions<s.TMessage[], unknown, TData>,\n): QueryObserverResult<TData> => {\n  return useQuery<s.TMessage[], unknown, TData>(\n    [QueryKeys.messages, id],\n    () => dataService.getMessagesByConvoId(id),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      ...config,\n    },\n  );\n};\n\nexport const useGetUserBalance = (\n  config?: UseQueryOptions<string>,\n): QueryObserverResult<string> => {\n  return useQuery<string>([QueryKeys.balance], () => dataService.getUserBalance(), {\n    refetchOnWindowFocus: true,\n    refetchOnReconnect: true,\n    refetchOnMount: true,\n    ...config,\n  });\n};\n\nexport const useGetConversationByIdQuery = (\n  id: string,\n  config?: UseQueryOptions<s.TConversation>,\n): QueryObserverResult<s.TConversation> => {\n  return useQuery<s.TConversation>(\n    [QueryKeys.conversation, id],\n    () => dataService.getConversationById(id),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      ...config,\n    },\n  );\n};\n\n//This isn't ideal because its just a query and we're using mutation, but it was the only way\n//to make it work with how the Chat component is structured\nexport const useGetConversationByIdMutation = (id: string): UseMutationResult<s.TConversation> => {\n  const queryClient = useQueryClient();\n  return useMutation(() => dataService.getConversationById(id), {\n    // onSuccess: (res: s.TConversation) => {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.conversation, id]);\n    },\n  });\n};\n\nexport const useUpdateMessageMutation = (\n  id: string,\n): UseMutationResult<unknown, unknown, t.TUpdateMessageRequest, unknown> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: t.TUpdateMessageRequest) => dataService.updateMessage(payload), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.messages, id]);\n    },\n  });\n};\n\nexport const useUpdateUserKeysMutation = (): UseMutationResult<\n  t.TUser,\n  unknown,\n  t.TUpdateUserKeyRequest,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: t.TUpdateUserKeyRequest) => dataService.updateUserKey(payload), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.name]);\n    },\n  });\n};\n\nexport const useClearConversationsMutation = (): UseMutationResult<unknown> => {\n  const queryClient = useQueryClient();\n  return useMutation(() => dataService.clearAllConversations(), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.allConversations]);\n    },\n  });\n};\n\nexport const useRevokeUserKeyMutation = (name: string): UseMutationResult<unknown> => {\n  const queryClient = useQueryClient();\n  return useMutation(() => dataService.revokeUserKey(name), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.name]);\n    },\n  });\n};\n\nexport const useRevokeAllUserKeysMutation = (): UseMutationResult<unknown> => {\n  const queryClient = useQueryClient();\n  return useMutation(() => dataService.revokeAllUserKeys(), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.name]);\n    },\n  });\n};\n\nexport const useGetConversationsQuery = (\n  pageNumber: string,\n  config?: UseQueryOptions<t.TGetConversationsResponse>,\n): QueryObserverResult<t.TGetConversationsResponse> => {\n  return useQuery<t.TGetConversationsResponse>(\n    [QueryKeys.allConversations],\n    () => dataService.getConversations(pageNumber),\n    {\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      retry: 1,\n      ...config,\n    },\n  );\n};\n\nexport const useGetSearchEnabledQuery = (\n  config?: UseQueryOptions<boolean>,\n): QueryObserverResult<boolean> => {\n  return useQuery<boolean>([QueryKeys.searchEnabled], () => dataService.getSearchEnabled(), {\n    refetchOnWindowFocus: false,\n    refetchOnReconnect: false,\n    refetchOnMount: false,\n    ...config,\n  });\n};\n\nexport const useGetEndpointsQuery = <TData = t.TEndpointsConfig>(\n  config?: UseQueryOptions<t.TEndpointsConfig, unknown, TData>,\n): QueryObserverResult<TData> => {\n  return useQuery<t.TEndpointsConfig, unknown, TData>(\n    [QueryKeys.endpoints],\n    () => dataService.getAIEndpoints(),\n    {\n      staleTime: Infinity,\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      ...config,\n    },\n  );\n};\n\nexport const useGetModelsQuery = (\n  config?: UseQueryOptions<t.TModelsConfig>,\n): QueryObserverResult<t.TModelsConfig> => {\n  return useQuery<t.TModelsConfig>([QueryKeys.models], () => dataService.getModels(), {\n    staleTime: Infinity,\n    refetchOnWindowFocus: false,\n    refetchOnReconnect: false,\n    refetchOnMount: false,\n    ...config,\n  });\n};\n\nexport const useCreatePresetMutation = (): UseMutationResult<\n  s.TPreset,\n  unknown,\n  s.TPreset,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: s.TPreset) => dataService.createPreset(payload), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.presets]);\n    },\n  });\n};\n\nexport const useDeletePresetMutation = (): UseMutationResult<\n  m.PresetDeleteResponse,\n  unknown,\n  s.TPreset | undefined,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: s.TPreset | undefined) => dataService.deletePreset(payload), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.presets]);\n    },\n  });\n};\n\nexport const useSearchQuery = (\n  searchQuery: string,\n  pageNumber: string,\n  config?: UseQueryOptions<t.TSearchResults>,\n): QueryObserverResult<t.TSearchResults> => {\n  return useQuery<t.TSearchResults>(\n    [QueryKeys.searchResults, pageNumber, searchQuery],\n    () => dataService.searchConversations(searchQuery, pageNumber),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      ...config,\n    },\n  );\n};\n\nexport const useUpdateTokenCountMutation = (): UseMutationResult<\n  t.TUpdateTokenCountResponse,\n  unknown,\n  { text: string },\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation(({ text }: { text: string }) => dataService.updateTokenCount(text), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.tokenCount]);\n    },\n  });\n};\n\nexport const useLoginUserMutation = (): UseMutationResult<\n  t.TLoginResponse,\n  unknown,\n  t.TLoginUser,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: t.TLoginUser) => dataService.login(payload), {\n    onMutate: () => {\n      queryClient.removeQueries();\n      localStorage.removeItem('lastConversationSetup');\n      localStorage.removeItem('lastSelectedModel');\n      localStorage.removeItem('lastSelectedTools');\n      localStorage.removeItem('filesToDelete');\n      localStorage.removeItem('lastAssistant');\n    },\n  });\n};\n\nexport const useRegisterUserMutation = (): UseMutationResult<\n  unknown,\n  unknown,\n  t.TRegisterUser,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: t.TRegisterUser) => dataService.register(payload), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.user]);\n    },\n  });\n};\n\nexport const useRefreshTokenMutation = (): UseMutationResult<\n  t.TRefreshTokenResponse,\n  unknown,\n  unknown,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation(() => request.refreshToken(), {\n    onMutate: () => {\n      queryClient.removeQueries();\n    },\n  });\n};\n\nexport const useUserKeyQuery = (\n  name: string,\n  config?: UseQueryOptions<t.TCheckUserKeyResponse>,\n): QueryObserverResult<t.TCheckUserKeyResponse> => {\n  return useQuery<t.TCheckUserKeyResponse>(\n    [QueryKeys.name, name],\n    () => {\n      if (!name) {\n        return Promise.resolve({ expiresAt: '' });\n      }\n      return dataService.userKeyQuery(name);\n    },\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      retry: false,\n      ...config,\n    },\n  );\n};\n\nexport const useRequestPasswordResetMutation = (): UseMutationResult<\n  t.TRequestPasswordResetResponse,\n  unknown,\n  t.TRequestPasswordReset,\n  unknown\n> => {\n  return useMutation((payload: t.TRequestPasswordReset) =>\n    dataService.requestPasswordReset(payload),\n  );\n};\n\nexport const useResetPasswordMutation = (): UseMutationResult<\n  unknown,\n  unknown,\n  t.TResetPassword,\n  unknown\n> => {\n  return useMutation((payload: t.TResetPassword) => dataService.resetPassword(payload));\n};\n\nexport const useAvailablePluginsQuery = (): QueryObserverResult<s.TPlugin[]> => {\n  return useQuery<s.TPlugin[]>(\n    [QueryKeys.availablePlugins],\n    () => dataService.getAvailablePlugins(),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n    },\n  );\n};\n\nexport const useUpdateUserPluginsMutation = (): UseMutationResult<\n  t.TUser,\n  unknown,\n  t.TUpdateUserPlugins,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: t.TUpdateUserPlugins) => dataService.updateUserPlugins(payload), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.user]);\n    },\n  });\n};\n\nexport const useGetStartupConfig = (): QueryObserverResult<t.TStartupConfig> => {\n  return useQuery<t.TStartupConfig>(\n    [QueryKeys.startupConfig],\n    () => dataService.getStartupConfig(),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n    },\n  );\n};\n","import { useQuery, useMutation, useQueryClient, useInfiniteQuery } from '@tanstack/react-query';\nimport type {\n  UseQueryOptions,\n  UseMutationResult,\n  QueryObserverResult,\n  UseInfiniteQueryOptions,\n} from '@tanstack/react-query';\nimport * as t from '../types/assistants';\nimport * as dataService from '../data-service';\nimport { QueryKeys } from '../keys';\n\n/**\n * Hook for listing all assistants, with optional parameters provided for pagination and sorting\n */\nexport const useListAssistantsQuery = <TData = t.AssistantListResponse>(\n  params?: t.AssistantListParams,\n  config?: UseQueryOptions<t.AssistantListResponse, unknown, TData>,\n): QueryObserverResult<TData> => {\n  return useQuery<t.AssistantListResponse, unknown, TData>(\n    [QueryKeys.assistants, params],\n    () => dataService.listAssistants(params),\n    {\n      // Example selector to sort them by created_at\n      // select: (res) => {\n      //   return res.data.sort((a, b) => a.created_at - b.created_at);\n      // },\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      retry: false,\n      ...config,\n    },\n  );\n};\n\nexport const useListAssistantsInfiniteQuery = (\n  params?: t.AssistantListParams,\n  config?: UseInfiniteQueryOptions<t.AssistantListResponse, Error>,\n) => {\n  return useInfiniteQuery<t.AssistantListResponse, Error>(\n    ['assistantsList', params],\n    ({ pageParam = '' }) => dataService.listAssistants({ ...params, after: pageParam }),\n    {\n      getNextPageParam: (lastPage) => {\n        // lastPage is of type AssistantListResponse, you can use the has_more and last_id from it directly\n        if (lastPage.has_more) {\n          return lastPage.last_id;\n        }\n        return undefined;\n      },\n      ...config,\n    },\n  );\n};\n\n/**\n * Hook for creating a new assistant\n */\nexport const useCreateAssistantMutation = (): UseMutationResult<\n  t.Assistant,\n  Error,\n  t.AssistantCreateParams\n> => {\n  const queryClient = useQueryClient();\n  return useMutation(\n    (newAssistantData: t.AssistantCreateParams) => dataService.createAssistant(newAssistantData),\n    {\n      onSuccess: () => {\n        // Invalidate and refetch assistants query to update list\n        queryClient.invalidateQueries([QueryKeys.assistants]);\n      },\n    },\n  );\n};\n\n/**\n * Hook for retrieving details about a single assistant\n */\nexport const useGetAssistantByIdQuery = (\n  assistant_id: string,\n  config?: UseQueryOptions<t.Assistant>,\n): QueryObserverResult<t.Assistant> => {\n  return useQuery<t.Assistant>(\n    [QueryKeys.assistant, assistant_id],\n    () => dataService.getAssistantById(assistant_id),\n    {\n      enabled: !!assistant_id, // Query will not execute until the assistant_id exists\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      retry: false,\n      ...config,\n    },\n  );\n};\n\n/**\n * Hook for updating an assistant\n */\nexport const useUpdateAssistantMutation = (): UseMutationResult<\n  t.Assistant,\n  Error,\n  { assistant_id: string; data: t.AssistantUpdateParams }\n> => {\n  const queryClient = useQueryClient();\n  return useMutation(\n    ({ assistant_id, data }: { assistant_id: string; data: t.AssistantUpdateParams }) =>\n      dataService.updateAssistant(assistant_id, data),\n    {\n      onSuccess: (_, { assistant_id }) => {\n        // Invalidate and refetch assistant details query\n        queryClient.invalidateQueries([QueryKeys.assistant, assistant_id]);\n        // Optionally invalidate and refetch list of assistants\n        queryClient.invalidateQueries([QueryKeys.assistants]);\n      },\n    },\n  );\n};\n\n/**\n * Hook for deleting an assistant\n */\nexport const useDeleteAssistantMutation = (): UseMutationResult<\n  void,\n  Error,\n  { assistant_id: string }\n> => {\n  const queryClient = useQueryClient();\n  return useMutation(\n    ({ assistant_id }: { assistant_id: string }) => dataService.deleteAssistant(assistant_id),\n    {\n      onSuccess: () => {\n        // Invalidate and refetch assistant list query\n        queryClient.invalidateQueries([QueryKeys.assistants]);\n      },\n    },\n  );\n};\n"],"names":["messages","conversationId","messageId","concat","keysEndpoint","search","q","pageNumber","assistants","id","_post","url","data","axios","post","JSON","stringify","headers","_a","sent","isRefreshing","failedQueue","refreshToken","retry","endpoints.refreshToken","processQueue","error","token","forEach","prom","reject","resolve","interceptors","response","use","__awaiter","originalRequest","config","status","_retry","Promise","push","_b","err_1","includes","defaults","common","setTokenHeader","window","dispatchEvent","CustomEvent","detail","location","href","err_2","request","get","options","__assign","postMultiPart","formData","put","delete","deleteWithOptions","patch","revokeUserKey","name","endpoints.revokeUserKey","revokeAllUserKeys","getConversationById","endpoints.conversationById","updateUserKey","payload","value","Error","QueryKeys","MutationKeys","userKeyQuery","endpoints.userKeyQuery","listAssistants","params","endpoints.assistants","useAbortRequestWithMessage","queryClient","useQueryClient","useMutation","endpoint","abortKey","message","endpoints.abortRequest","arg","dataService.abortRequestWithMessage","onSuccess","invalidateQueries","balance","useGetUserQuery","useQuery","user","refetchOnWindowFocus","refetchOnReconnect","refetchOnMount","useGetMessagesByConvoId","endpoints.messages","useGetUserBalance","useGetConversationByIdQuery","conversation","dataService.getConversationById","useGetConversationByIdMutation","useUpdateMessageMutation","text","dataService.updateMessage","useUpdateUserKeysMutation","dataService.updateUserKey","useClearConversationsMutation","allConversations","useRevokeUserKeyMutation","dataService.revokeUserKey","useRevokeAllUserKeysMutation","dataService.revokeAllUserKeys","useGetConversationsQuery","endpoints.conversations","dataService.getConversations","useGetSearchEnabledQuery","searchEnabled","useGetEndpointsQuery","endpoints","staleTime","Infinity","useGetModelsQuery","models","useCreatePresetMutation","dataService.createPreset","presets","useDeletePresetMutation","useSearchQuery","searchQuery","searchResults","endpoints.search","dataService.searchConversations","useUpdateTokenCountMutation","dataService.updateTokenCount","tokenCount","useLoginUserMutation","dataService.login","onMutate","removeQueries","localStorage","removeItem","useRegisterUserMutation","dataService.register","useRefreshTokenMutation","useUserKeyQuery","dataService.userKeyQuery","expiresAt","useRequestPasswordResetMutation","dataService.requestPasswordReset","useResetPasswordMutation","dataService.resetPassword","useAvailablePluginsQuery","availablePlugins","useUpdateUserPluginsMutation","dataService.updateUserPlugins","useGetStartupConfig","startupConfig","useListAssistantsQuery","dataService.listAssistants","useListAssistantsInfiniteQuery","useInfiniteQuery","pageParam","after","getNextPageParam","lastPage","has_more","last_id","useCreateAssistantMutation","newAssistantData","useGetAssistantByIdQuery","assistant_id","assistant","dataService.getAssistantById","enabled","useUpdateAssistantMutation","dataService.updateAssistant","_","useDeleteAssistantMutation","dataService.deleteAssistant"],"mappings":"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"}