"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js
  var require_base64_js = __commonJS({
    "node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js"(exports) {
      "use strict";
      init_dist();
      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      for (i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }
      var i;
      var len;
      revLookup["-".charCodeAt(0)] = 62;
      revLookup["_".charCodeAt(0)] = 63;
      function getLens(b64) {
        var len2 = b64.length;
        if (len2 % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }
        var validLen = b64.indexOf("=");
        if (validLen === -1)
          validLen = len2;
        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
        return [validLen, placeHoldersLen];
      }
      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function _byteLength(b64, validLen, placeHoldersLen) {
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
        var curByte = 0;
        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
        var i2;
        for (i2 = 0; i2 < len2; i2 += 4) {
          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
          arr[curByte++] = tmp >> 16 & 255;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 2) {
          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 1) {
          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        return arr;
      }
      function tripletToBase64(num) {
        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
      }
      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];
        for (var i2 = start; i2 < end; i2 += 3) {
          tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
          output.push(tripletToBase64(tmp));
        }
        return output.join("");
      }
      function fromByteArray(uint8) {
        var tmp;
        var len2 = uint8.length;
        var extraBytes = len2 % 3;
        var parts = [];
        var maxChunkLength = 16383;
        for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
          parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
        }
        if (extraBytes === 1) {
          tmp = uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
          );
        } else if (extraBytes === 2) {
          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
          );
        }
        return parts.join("");
      }
    }
  });

  // node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js
  var require_ieee754 = __commonJS({
    "node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js"(exports) {
      init_dist();
      exports.read = function(buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s2 = buffer[offset + i];
        i += d;
        e = s2 & (1 << -nBits) - 1;
        s2 >>= -nBits;
        nBits += eLen;
        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;
        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s2 ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }
        return (s2 ? -1 : 1) * m * Math.pow(2, e - mLen);
      };
      exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);
        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }
          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }
          if (value * c >= 2) {
            e++;
            c /= 2;
          }
          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }
        for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
        }
        e = e << mLen | m;
        eLen += mLen;
        for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
        }
        buffer[offset + i - d] |= s2 * 128;
      };
    }
  });

  // node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js
  var require_buffer = __commonJS({
    "node_modules/.pnpm/buffer@6.0.3_patch_hash=zkkuxompt5d553skpnegwi5wuy/node_modules/buffer/index.js"(exports) {
      "use strict";
      init_dist();
      var base64 = require_base64_js();
      var ieee754 = require_ieee754();
      var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
      exports.Buffer = Buffer2;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      var K_MAX_LENGTH = 2147483647;
      exports.kMaxLength = K_MAX_LENGTH;
      var { Uint8Array: GlobalUint8Array, ArrayBuffer: GlobalArrayBuffer, SharedArrayBuffer: GlobalSharedArrayBuffer } = globalThis;
      Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
      if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
        console.error(
          "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
        );
      }
      function typedArraySupport() {
        try {
          const arr = new GlobalUint8Array(1);
          const proto = { foo: function() {
            return 42;
          } };
          Object.setPrototypeOf(proto, GlobalUint8Array.prototype);
          Object.setPrototypeOf(arr, proto);
          return arr.foo() === 42;
        } catch (e) {
          return false;
        }
      }
      Object.defineProperty(Buffer2.prototype, "parent", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.buffer;
        }
      });
      Object.defineProperty(Buffer2.prototype, "offset", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.byteOffset;
        }
      });
      function createBuffer(length) {
        if (length > K_MAX_LENGTH) {
          throw new RangeError('The value "' + length + '" is invalid for option "size"');
        }
        const buf = new GlobalUint8Array(length);
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function Buffer2(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          if (typeof encodingOrOffset === "string") {
            throw new TypeError(
              'The "string" argument must be of type string. Received type number'
            );
          }
          return allocUnsafe(arg);
        }
        return from(arg, encodingOrOffset, length);
      }
      Buffer2.poolSize = 8192;
      function from(value, encodingOrOffset, length) {
        if (typeof value === "string") {
          return fromString(value, encodingOrOffset);
        }
        if (GlobalArrayBuffer.isView(value)) {
          return fromArrayView(value);
        }
        if (value == null) {
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
          );
        }
        if (isInstance(value, GlobalArrayBuffer) || value && isInstance(value.buffer, GlobalArrayBuffer)) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof GlobalSharedArrayBuffer !== "undefined" && (isInstance(value, GlobalSharedArrayBuffer) || value && isInstance(value.buffer, GlobalSharedArrayBuffer))) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof value === "number") {
          throw new TypeError(
            'The "value" argument must not be of type number. Received type number'
          );
        }
        const valueOf = value.valueOf && value.valueOf();
        if (valueOf != null && valueOf !== value) {
          return Buffer2.from(valueOf, encodingOrOffset, length);
        }
        const b = fromObject(value);
        if (b)
          return b;
        if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
          return Buffer2.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
        }
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      Buffer2.from = function(value, encodingOrOffset, length) {
        return from(value, encodingOrOffset, length);
      };
      Object.setPrototypeOf(Buffer2.prototype, GlobalUint8Array.prototype);
      Object.setPrototypeOf(Buffer2, GlobalUint8Array);
      function assertSize(size) {
        if (typeof size !== "number") {
          throw new TypeError('"size" argument must be of type number');
        } else if (size < 0) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"');
        }
      }
      function alloc(size, fill, encoding) {
        assertSize(size);
        if (size <= 0) {
          return createBuffer(size);
        }
        if (fill !== void 0) {
          return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
        }
        return createBuffer(size);
      }
      Buffer2.alloc = function(size, fill, encoding) {
        return alloc(size, fill, encoding);
      };
      function allocUnsafe(size) {
        assertSize(size);
        return createBuffer(size < 0 ? 0 : checked(size) | 0);
      }
      Buffer2.allocUnsafe = function(size) {
        return allocUnsafe(size);
      };
      Buffer2.allocUnsafeSlow = function(size) {
        return allocUnsafe(size);
      };
      function fromString(string, encoding) {
        if (typeof encoding !== "string" || encoding === "") {
          encoding = "utf8";
        }
        if (!Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        const length = byteLength(string, encoding) | 0;
        let buf = createBuffer(length);
        const actual = buf.write(string, encoding);
        if (actual !== length) {
          buf = buf.slice(0, actual);
        }
        return buf;
      }
      function fromArrayLike(array) {
        const length = array.length < 0 ? 0 : checked(array.length) | 0;
        const buf = createBuffer(length);
        for (let i = 0; i < length; i += 1) {
          buf[i] = array[i] & 255;
        }
        return buf;
      }
      function fromArrayView(arrayView) {
        if (isInstance(arrayView, GlobalUint8Array)) {
          const copy = new GlobalUint8Array(arrayView);
          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
        }
        return fromArrayLike(arrayView);
      }
      function fromArrayBuffer(array, byteOffset, length) {
        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError('"offset" is outside of buffer bounds');
        }
        if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('"length" is outside of buffer bounds');
        }
        let buf;
        if (byteOffset === void 0 && length === void 0) {
          buf = new GlobalUint8Array(array);
        } else if (length === void 0) {
          buf = new GlobalUint8Array(array, byteOffset);
        } else {
          buf = new GlobalUint8Array(array, byteOffset, length);
        }
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function fromObject(obj) {
        if (Buffer2.isBuffer(obj)) {
          const len = checked(obj.length) | 0;
          const buf = createBuffer(len);
          if (buf.length === 0) {
            return buf;
          }
          obj.copy(buf, 0, 0, len);
          return buf;
        }
        if (obj.length !== void 0) {
          if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
            return createBuffer(0);
          }
          return fromArrayLike(obj);
        }
        if (obj.type === "Buffer" && Array.isArray(obj.data)) {
          return fromArrayLike(obj.data);
        }
      }
      function checked(length) {
        if (length >= K_MAX_LENGTH) {
          throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
        }
        return length | 0;
      }
      function SlowBuffer(length) {
        if (+length != length) {
          length = 0;
        }
        return Buffer2.alloc(+length);
      }
      Buffer2.isBuffer = function isBuffer(b) {
        return b != null && b._isBuffer === true && b !== Buffer2.prototype;
      };
      Buffer2.compare = function compare(a, b) {
        if (isInstance(a, GlobalUint8Array))
          a = Buffer2.from(a, a.offset, a.byteLength);
        if (isInstance(b, GlobalUint8Array))
          b = Buffer2.from(b, b.offset, b.byteLength);
        if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
          throw new TypeError(
            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
          );
        }
        if (a === b)
          return 0;
        let x = a.length;
        let y = b.length;
        for (let i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      Buffer2.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      };
      Buffer2.concat = function concat(list, length) {
        if (!Array.isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
          return Buffer2.alloc(0);
        }
        let i;
        if (length === void 0) {
          length = 0;
          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }
        const buffer = Buffer2.allocUnsafe(length);
        let pos = 0;
        for (i = 0; i < list.length; ++i) {
          let buf = list[i];
          if (isInstance(buf, GlobalUint8Array)) {
            if (pos + buf.length > buffer.length) {
              if (!Buffer2.isBuffer(buf))
                buf = Buffer2.from(buf);
              buf.copy(buffer, pos);
            } else {
              GlobalUint8Array.prototype.set.call(
                buffer,
                buf,
                pos
              );
            }
          } else if (!Buffer2.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          } else {
            buf.copy(buffer, pos);
          }
          pos += buf.length;
        }
        return buffer;
      };
      function byteLength(string, encoding) {
        if (Buffer2.isBuffer(string)) {
          return string.length;
        }
        if (GlobalArrayBuffer.isView(string) || isInstance(string, GlobalArrayBuffer)) {
          return string.byteLength;
        }
        if (typeof string !== "string") {
          throw new TypeError(
            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
          );
        }
        const len = string.length;
        const mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len === 0)
          return 0;
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "ascii":
            case "latin1":
            case "binary":
              return len;
            case "utf8":
            case "utf-8":
              return utf8ToBytes(string).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return len * 2;
            case "hex":
              return len >>> 1;
            case "base64":
              return base64ToBytes(string).length;
            default:
              if (loweredCase) {
                return mustMatch ? -1 : utf8ToBytes(string).length;
              }
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.byteLength = byteLength;
      function slowToString(encoding, start, end) {
        let loweredCase = false;
        if (start === void 0 || start < 0) {
          start = 0;
        }
        if (start > this.length) {
          return "";
        }
        if (end === void 0 || end > this.length) {
          end = this.length;
        }
        if (end <= 0) {
          return "";
        }
        end >>>= 0;
        start >>>= 0;
        if (end <= start) {
          return "";
        }
        if (!encoding)
          encoding = "utf8";
        while (true) {
          switch (encoding) {
            case "hex":
              return hexSlice(this, start, end);
            case "utf8":
            case "utf-8":
              return utf8Slice(this, start, end);
            case "ascii":
              return asciiSlice(this, start, end);
            case "latin1":
            case "binary":
              return latin1Slice(this, start, end);
            case "base64":
              return base64Slice(this, start, end);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return utf16leSlice(this, start, end);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = (encoding + "").toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.prototype._isBuffer = true;
      function swap(b, n, m) {
        const i = b[n];
        b[n] = b[m];
        b[m] = i;
      }
      Buffer2.prototype.swap16 = function swap16() {
        const len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        }
        for (let i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }
        return this;
      };
      Buffer2.prototype.swap32 = function swap32() {
        const len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        }
        for (let i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      };
      Buffer2.prototype.swap64 = function swap64() {
        const len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        }
        for (let i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      };
      Buffer2.prototype.toString = function toString() {
        const length = this.length;
        if (length === 0)
          return "";
        if (arguments.length === 0)
          return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
      Buffer2.prototype.equals = function equals(b) {
        if (!Buffer2.isBuffer(b))
          throw new TypeError("Argument must be a Buffer");
        if (this === b)
          return true;
        return Buffer2.compare(this, b) === 0;
      };
      Buffer2.prototype.inspect = function inspect() {
        let str = "";
        const max = exports.INSPECT_MAX_BYTES;
        str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
        if (this.length > max)
          str += " ... ";
        return "<Buffer " + str + ">";
      };
      if (customInspectSymbol) {
        Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
      }
      Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (isInstance(target, GlobalUint8Array)) {
          target = Buffer2.from(target, target.offset, target.byteLength);
        }
        if (!Buffer2.isBuffer(target)) {
          throw new TypeError(
            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
          );
        }
        if (start === void 0) {
          start = 0;
        }
        if (end === void 0) {
          end = target ? target.length : 0;
        }
        if (thisStart === void 0) {
          thisStart = 0;
        }
        if (thisEnd === void 0) {
          thisEnd = this.length;
        }
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError("out of range index");
        }
        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target)
          return 0;
        let x = thisEnd - thisStart;
        let y = end - start;
        const len = Math.min(x, y);
        const thisCopy = this.slice(thisStart, thisEnd);
        const targetCopy = target.slice(start, end);
        for (let i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        if (buffer.length === 0)
          return -1;
        if (typeof byteOffset === "string") {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 2147483647) {
          byteOffset = 2147483647;
        } else if (byteOffset < -2147483648) {
          byteOffset = -2147483648;
        }
        byteOffset = +byteOffset;
        if (numberIsNaN(byteOffset)) {
          byteOffset = dir ? 0 : buffer.length - 1;
        }
        if (byteOffset < 0)
          byteOffset = buffer.length + byteOffset;
        if (byteOffset >= buffer.length) {
          if (dir)
            return -1;
          else
            byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (dir)
            byteOffset = 0;
          else
            return -1;
        }
        if (typeof val === "string") {
          val = Buffer2.from(val, encoding);
        }
        if (Buffer2.isBuffer(val)) {
          if (val.length === 0) {
            return -1;
          }
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === "number") {
          val = val & 255;
          if (typeof GlobalUint8Array.prototype.indexOf === "function") {
            if (dir) {
              return GlobalUint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
              return GlobalUint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
          }
          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }
        throw new TypeError("val must be string, number or Buffer");
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        let indexSize = 1;
        let arrLength = arr.length;
        let valLength = val.length;
        if (encoding !== void 0) {
          encoding = String(encoding).toLowerCase();
          if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i2) {
          if (indexSize === 1) {
            return buf[i2];
          } else {
            return buf.readUInt16BE(i2 * indexSize);
          }
        }
        let i;
        if (dir) {
          let foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) {
            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
              if (foundIndex === -1)
                foundIndex = i;
              if (i - foundIndex + 1 === valLength)
                return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1)
                i -= i - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength)
            byteOffset = arrLength - valLength;
          for (i = byteOffset; i >= 0; i--) {
            let found = true;
            for (let j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
              }
            }
            if (found)
              return i;
          }
        }
        return -1;
      }
      Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };
      Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        const remaining = buf.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = Number(length);
          if (length > remaining) {
            length = remaining;
          }
        }
        const strLen = string.length;
        if (length > strLen / 2) {
          length = strLen / 2;
        }
        let i;
        for (i = 0; i < length; ++i) {
          const parsed = parseInt(string.substr(i * 2, 2), 16);
          if (numberIsNaN(parsed))
            return i;
          buf[offset + i] = parsed;
        }
        return i;
      }
      function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
      }
      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }
      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }
      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
      }
      Buffer2.prototype.write = function write(string, offset, length, encoding) {
        if (offset === void 0) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
        } else if (length === void 0 && typeof offset === "string") {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else if (isFinite(offset)) {
          offset = offset >>> 0;
          if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === void 0)
              encoding = "utf8";
          } else {
            encoding = length;
            length = void 0;
          }
        } else {
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        }
        const remaining = this.length - offset;
        if (length === void 0 || length > remaining)
          length = remaining;
        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
          throw new RangeError("Attempt to write outside buffer bounds");
        }
        if (!encoding)
          encoding = "utf8";
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "hex":
              return hexWrite(this, string, offset, length);
            case "utf8":
            case "utf-8":
              return utf8Write(this, string, offset, length);
            case "ascii":
            case "latin1":
            case "binary":
              return asciiWrite(this, string, offset, length);
            case "base64":
              return base64Write(this, string, offset, length);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return ucs2Write(this, string, offset, length);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };
      Buffer2.prototype.toJSON = function toJSON() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start, end));
        }
      }
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        const res = [];
        let i = start;
        while (i < end) {
          const firstByte = buf[i];
          let codePoint = null;
          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 128) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf[i + 1];
                if ((secondByte & 192) === 128) {
                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                  if (tempCodePoint > 127) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                fourthByte = buf[i + 3];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }
          if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
          }
          res.push(codePoint);
          i += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      var MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        const len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints);
        }
        let res = "";
        let i = 0;
        while (i < len) {
          res += String.fromCharCode.apply(
            String,
            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
          );
        }
        return res;
      }
      function asciiSlice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i] & 127);
        }
        return ret;
      }
      function latin1Slice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i]);
        }
        return ret;
      }
      function hexSlice(buf, start, end) {
        const len = buf.length;
        if (!start || start < 0)
          start = 0;
        if (!end || end < 0 || end > len)
          end = len;
        let out = "";
        for (let i = start; i < end; ++i) {
          out += hexSliceLookupTable[buf[i]];
        }
        return out;
      }
      function utf16leSlice(buf, start, end) {
        const bytes = buf.slice(start, end);
        let res = "";
        for (let i = 0; i < bytes.length - 1; i += 2) {
          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
        }
        return res;
      }
      Buffer2.prototype.slice = function slice(start, end) {
        const len = this.length;
        start = ~~start;
        end = end === void 0 ? len : ~~end;
        if (start < 0) {
          start += len;
          if (start < 0)
            start = 0;
        } else if (start > len) {
          start = len;
        }
        if (end < 0) {
          end += len;
          if (end < 0)
            end = 0;
        } else if (end > len) {
          end = len;
        }
        if (end < start)
          end = start;
        const newBuf = this.subarray(start, end);
        Object.setPrototypeOf(newBuf, Buffer2.prototype);
        return newBuf;
      };
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0)
          throw new RangeError("offset is not uint");
        if (offset + ext > length)
          throw new RangeError("Trying to access beyond buffer length");
      }
      Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          checkOffset(offset, byteLength2, this.length);
        }
        let val = this[offset + --byteLength2];
        let mul = 1;
        while (byteLength2 > 0 && (mul *= 256)) {
          val += this[offset + --byteLength2] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        return this[offset];
      };
      Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      };
      Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      };
      Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
      };
      Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };
      Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
        const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
        return BigInt(lo) + (BigInt(hi) << BigInt(32));
      });
      Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
        return (BigInt(hi) << BigInt(32)) + BigInt(lo);
      });
      Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let i = byteLength2;
        let mul = 1;
        let val = this[offset + --i];
        while (i > 0 && (mul *= 256)) {
          val += this[offset + --i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        if (!(this[offset] & 128))
          return this[offset];
        return (255 - this[offset] + 1) * -1;
      };
      Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset] | this[offset + 1] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset + 1] | this[offset] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };
      Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };
      Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
      });
      Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = (first << 24) + // Overflow
        this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
      });
      Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };
      Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };
      Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };
      Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };
      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer2.isBuffer(buf))
          throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min)
          throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
      }
      Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let mul = 1;
        let i = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 255, 0);
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 255;
        return offset + 4;
      };
      Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      function wrtBigUInt64LE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        return offset;
      }
      function wrtBigUInt64BE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset + 7] = lo;
        lo = lo >> 8;
        buf[offset + 6] = lo;
        lo = lo >> 8;
        buf[offset + 5] = lo;
        lo = lo >> 8;
        buf[offset + 4] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset + 3] = hi;
        hi = hi >> 8;
        buf[offset + 2] = hi;
        hi = hi >> 8;
        buf[offset + 1] = hi;
        hi = hi >> 8;
        buf[offset] = hi;
        return offset + 8;
      }
      Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = 0;
        let mul = 1;
        let sub = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        let sub = 0;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 127, -128);
        if (value < 0)
          value = 255 + value + 1;
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
        return offset + 4;
      };
      Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (value < 0)
          value = 4294967295 + value + 1;
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
        if (offset < 0)
          throw new RangeError("Index out of range");
      }
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
        }
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }
      Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
        }
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }
      Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      };
      Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
        if (!Buffer2.isBuffer(target))
          throw new TypeError("argument should be a Buffer");
        if (!start)
          start = 0;
        if (!end && end !== 0)
          end = this.length;
        if (targetStart >= target.length)
          targetStart = target.length;
        if (!targetStart)
          targetStart = 0;
        if (end > 0 && end < start)
          end = start;
        if (end === start)
          return 0;
        if (target.length === 0 || this.length === 0)
          return 0;
        if (targetStart < 0) {
          throw new RangeError("targetStart out of bounds");
        }
        if (start < 0 || start >= this.length)
          throw new RangeError("Index out of range");
        if (end < 0)
          throw new RangeError("sourceEnd out of bounds");
        if (end > this.length)
          end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }
        const len = end - start;
        if (this === target && typeof GlobalUint8Array.prototype.copyWithin === "function") {
          this.copyWithin(targetStart, start, end);
        } else {
          GlobalUint8Array.prototype.set.call(
            target,
            this.subarray(start, end),
            targetStart
          );
        }
        return len;
      };
      Buffer2.prototype.fill = function fill(val, start, end, encoding) {
        if (typeof val === "string") {
          if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
          }
          if (encoding !== void 0 && typeof encoding !== "string") {
            throw new TypeError("encoding must be a string");
          }
          if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }
          if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") {
              val = code;
            }
          }
        } else if (typeof val === "number") {
          val = val & 255;
        } else if (typeof val === "boolean") {
          val = Number(val);
        }
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError("Out of range index");
        }
        if (end <= start) {
          return this;
        }
        start = start >>> 0;
        end = end === void 0 ? this.length : end >>> 0;
        if (!val)
          val = 0;
        let i;
        if (typeof val === "number") {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
          const len = bytes.length;
          if (len === 0) {
            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
          }
          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }
        return this;
      };
      var errors = {};
      function E(sym, getMessage, Base) {
        errors[sym] = class NodeError extends Base {
          constructor() {
            super();
            Object.defineProperty(this, "message", {
              value: getMessage.apply(this, arguments),
              writable: true,
              configurable: true
            });
            this.name = `${this.name} [${sym}]`;
            this.stack;
            delete this.name;
          }
          get code() {
            return sym;
          }
          set code(value) {
            Object.defineProperty(this, "code", {
              configurable: true,
              enumerable: true,
              value,
              writable: true
            });
          }
          toString() {
            return `${this.name} [${sym}]: ${this.message}`;
          }
        };
      }
      E(
        "ERR_BUFFER_OUT_OF_BOUNDS",
        function(name) {
          if (name) {
            return `${name} is outside of buffer bounds`;
          }
          return "Attempt to access memory outside buffer bounds";
        },
        RangeError
      );
      E(
        "ERR_INVALID_ARG_TYPE",
        function(name, actual) {
          return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
        },
        TypeError
      );
      E(
        "ERR_OUT_OF_RANGE",
        function(str, range, input) {
          let msg = `The value of "${str}" is out of range.`;
          let received = input;
          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
            received = addNumericalSeparator(String(input));
          } else if (typeof input === "bigint") {
            received = String(input);
            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
              received = addNumericalSeparator(received);
            }
            received += "n";
          }
          msg += ` It must be ${range}. Received ${received}`;
          return msg;
        },
        RangeError
      );
      function addNumericalSeparator(val) {
        let res = "";
        let i = val.length;
        const start = val[0] === "-" ? 1 : 0;
        for (; i >= start + 4; i -= 3) {
          res = `_${val.slice(i - 3, i)}${res}`;
        }
        return `${val.slice(0, i)}${res}`;
      }
      function checkBounds(buf, offset, byteLength2) {
        validateNumber(offset, "offset");
        if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
          boundsError(offset, buf.length - (byteLength2 + 1));
        }
      }
      function checkIntBI(value, min, max, buf, offset, byteLength2) {
        if (value > max || value < min) {
          const n = typeof min === "bigint" ? "n" : "";
          let range;
          if (byteLength2 > 3) {
            if (min === 0 || min === BigInt(0)) {
              range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
            } else {
              range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
            }
          } else {
            range = `>= ${min}${n} and <= ${max}${n}`;
          }
          throw new errors.ERR_OUT_OF_RANGE("value", range, value);
        }
        checkBounds(buf, offset, byteLength2);
      }
      function validateNumber(value, name) {
        if (typeof value !== "number") {
          throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
        }
      }
      function boundsError(value, length, type) {
        if (Math.floor(value) !== value) {
          validateNumber(value, type);
          throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
        }
        if (length < 0) {
          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
        }
        throw new errors.ERR_OUT_OF_RANGE(
          type || "offset",
          `>= ${type ? 1 : 0} and <= ${length}`,
          value
        );
      }
      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = str.split("=")[0];
        str = str.trim().replace(INVALID_BASE64_RE, "");
        if (str.length < 2)
          return "";
        while (str.length % 4 !== 0) {
          str = str + "=";
        }
        return str;
      }
      function utf8ToBytes(string, units) {
        units = units || Infinity;
        let codePoint;
        const length = string.length;
        let leadSurrogate = null;
        const bytes = [];
        for (let i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              } else if (i + 1 === length) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
          } else if (leadSurrogate) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
          }
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0)
              break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0)
              break;
            bytes.push(
              codePoint >> 6 | 192,
              codePoint & 63 | 128
            );
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0)
              break;
            bytes.push(
              codePoint >> 12 | 224,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else if (codePoint < 1114112) {
            if ((units -= 4) < 0)
              break;
            bytes.push(
              codePoint >> 18 | 240,
              codePoint >> 12 & 63 | 128,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else {
            throw new Error("Invalid code point");
          }
        }
        return bytes;
      }
      function asciiToBytes(str) {
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          byteArray.push(str.charCodeAt(i) & 255);
        }
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        let c, hi, lo;
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0)
            break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      function blitBuffer(src, dst, offset, length) {
        let i;
        for (i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length)
            break;
          dst[i + offset] = src[i];
        }
        return i;
      }
      function isInstance(obj, type) {
        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
      }
      function numberIsNaN(obj) {
        return obj !== obj;
      }
      var hexSliceLookupTable = function() {
        const alphabet = "0123456789abcdef";
        const table = new Array(256);
        for (let i = 0; i < 16; ++i) {
          const i16 = i * 16;
          for (let j = 0; j < 16; ++j) {
            table[i16 + j] = alphabet[i] + alphabet[j];
          }
        }
        return table;
      }();
      function defineBigIntMethod(fn) {
        return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
      }
      function BufferBigIntNotDefined() {
        throw new Error("BigInt not supported");
      }
    }
  });

  // node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js
  var require_browser = __commonJS({
    "node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js"(exports, module) {
      init_dist();
      var process = module.exports = {};
      var cachedSetTimeout;
      var cachedClearTimeout;
      function defaultSetTimout() {
        throw new Error("setTimeout has not been defined");
      }
      function defaultClearTimeout() {
        throw new Error("clearTimeout has not been defined");
      }
      (function() {
        try {
          if (typeof setTimeout === "function") {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }
        try {
          if (typeof clearTimeout === "function") {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      })();
      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          return setTimeout(fun, 0);
        }
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }
        try {
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e2) {
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }
      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          return clearTimeout(marker);
        }
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }
        try {
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            return cachedClearTimeout.call(null, marker);
          } catch (e2) {
            return cachedClearTimeout.call(this, marker);
          }
        }
      }
      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;
      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }
        draining = false;
        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }
        if (queue.length) {
          drainQueue();
        }
      }
      function drainQueue() {
        if (draining) {
          return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue.length;
        while (len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }
          queueIndex = -1;
          len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }
      process.nextTick = function(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      };
      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }
      Item.prototype.run = function() {
        this.fun.apply(null, this.array);
      };
      process.title = "browser";
      process.browser = true;
      process.env = {};
      process.argv = [];
      process.version = "";
      process.versions = {};
      function noop() {
      }
      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;
      process.prependListener = noop;
      process.prependOnceListener = noop;
      process.listeners = function(name) {
        return [];
      };
      process.binding = function(name) {
        throw new Error("process.binding is not supported");
      };
      process.cwd = function() {
        return "/";
      };
      process.chdir = function(dir) {
        throw new Error("process.chdir is not supported");
      };
      process.umask = function() {
        return 0;
      };
    }
  });

  // shims/dist/index.js
  var import_buffer_polyfill, import_process, o;
  var init_dist = __esm({
    "shims/dist/index.js"() {
      "use strict";
      import_buffer_polyfill = __toESM(require_buffer(), 1);
      import_process = __toESM(require_browser(), 1);
      o = globalThis || void 0 || self;
    }
  });

  // shims/banner/index.cjs
  var require_banner = __commonJS({
    "shims/banner/index.cjs"() {
      init_dist();
      globalThis.Buffer = globalThis.Buffer || import_buffer_polyfill.Buffer;
      globalThis.global = globalThis.global || o;
      globalThis.process = globalThis.process || import_process.default;
    }
  });
  require_banner();
})();
/*! Bundled license information:

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)
*/

import {
  z
} from "./chunk-VFWI3KYL.js";
import {
  axios_default
} from "./chunk-AG2FPGUF.js";
import {
  __toESM,
  require_dist
} from "./chunk-KVZ3Q5ZK.js";

// node_modules/librechat-data-provider/dist/index.es.js
var import_dist = __toESM(require_dist());
var n;
var o;
var r;
var i = function() {
  return i = Object.assign || function(e) {
    for (var t, n2 = 1, o2 = arguments.length; n2 < o2; n2++)
      for (var r2 in t = arguments[n2])
        Object.prototype.hasOwnProperty.call(t, r2) && (e[r2] = t[r2]);
    return e;
  }, i.apply(this, arguments);
};
function a(e, t, n2, o2) {
  return new (n2 || (n2 = Promise))(function(r2, i2) {
    function a2(e2) {
      try {
        l2(o2.next(e2));
      } catch (e3) {
        i2(e3);
      }
    }
    function s2(e2) {
      try {
        l2(o2.throw(e2));
      } catch (e3) {
        i2(e3);
      }
    }
    function l2(e2) {
      var t2;
      e2.done ? r2(e2.value) : (t2 = e2.value, t2 instanceof n2 ? t2 : new n2(function(e3) {
        e3(t2);
      })).then(a2, s2);
    }
    l2((o2 = o2.apply(e, t || [])).next());
  });
}
function s(e, t) {
  var n2, o2, r2, i2, a2 = { label: 0, sent: function() {
    if (1 & r2[0])
      throw r2[1];
    return r2[1];
  }, trys: [], ops: [] };
  return i2 = { next: s2(0), throw: s2(1), return: s2(2) }, "function" == typeof Symbol && (i2[Symbol.iterator] = function() {
    return this;
  }), i2;
  function s2(s3) {
    return function(l2) {
      return function(s4) {
        if (n2)
          throw new TypeError("Generator is already executing.");
        for (; i2 && (i2 = 0, s4[0] && (a2 = 0)), a2; )
          try {
            if (n2 = 1, o2 && (r2 = 2 & s4[0] ? o2.return : s4[0] ? o2.throw || ((r2 = o2.return) && r2.call(o2), 0) : o2.next) && !(r2 = r2.call(o2, s4[1])).done)
              return r2;
            switch (o2 = 0, r2 && (s4 = [2 & s4[0], r2.value]), s4[0]) {
              case 0:
              case 1:
                r2 = s4;
                break;
              case 4:
                return a2.label++, { value: s4[1], done: false };
              case 5:
                a2.label++, o2 = s4[1], s4 = [0];
                continue;
              case 7:
                s4 = a2.ops.pop(), a2.trys.pop();
                continue;
              default:
                if (!(r2 = a2.trys, (r2 = r2.length > 0 && r2[r2.length - 1]) || 6 !== s4[0] && 2 !== s4[0])) {
                  a2 = 0;
                  continue;
                }
                if (3 === s4[0] && (!r2 || s4[1] > r2[0] && s4[1] < r2[3])) {
                  a2.label = s4[1];
                  break;
                }
                if (6 === s4[0] && a2.label < r2[1]) {
                  a2.label = r2[1], r2 = s4;
                  break;
                }
                if (r2 && a2.label < r2[2]) {
                  a2.label = r2[2], a2.ops.push(s4);
                  break;
                }
                r2[2] && a2.ops.pop(), a2.trys.pop();
                continue;
            }
            s4 = t.call(e, a2);
          } catch (e2) {
            s4 = [6, e2], o2 = 0;
          } finally {
            n2 = r2 = 0;
          }
        if (5 & s4[0])
          throw s4[1];
        return { value: s4[0] ? s4[1] : void 0, done: true };
      }([s3, l2]);
    };
  }
}
"function" == typeof SuppressedError && SuppressedError, function(e) {
  e.azureOpenAI = "azureOpenAI", e.openAI = "openAI", e.bingAI = "bingAI", e.chatGPTBrowser = "chatGPTBrowser", e.google = "google", e.gptPlugins = "gptPlugins", e.anthropic = "anthropic", e.assistant = "assistant", e.custom = "custom";
}(r || (r = {}));
var l;
var u = ((n = {})[r.google] = { model: { default: "chat-bison" }, maxOutputTokens: { min: 1, max: 2048, step: 1, default: 1024, maxGeminiPro: 8192, defaultGeminiPro: 8192 }, temperature: { min: 0, max: 1, step: 0.01, default: 0.2 }, topP: { min: 0, max: 1, step: 0.01, default: 0.8 }, topK: { min: 1, max: 40, step: 0.01, default: 40 } }, n);
var p = u[r.google];
var c = z.nativeEnum(r);
var d = z.union([c, z.string()]);
!function(e) {
  e.low = "low", e.auto = "auto", e.high = "high";
}(l || (l = {}));
var h = ((o = {})[l.low] = 0, o[l.auto] = 1, o[l.high] = 2, o);
var g = { 0: l.low, 1: l.auto, 2: l.high };
var f = z.nativeEnum(l);
var m = z.object({ authField: z.string(), label: z.string(), description: z.string() });
var v = z.object({ name: z.string(), pluginKey: z.string(), description: z.string(), icon: z.string(), authConfig: z.array(m), authenticated: z.boolean().optional(), isButton: z.boolean().optional() });
var b = z.object({ input: z.object({ content: z.string() }), output: z.object({ content: z.string() }) });
var y = z.object({ agent: z.string(), skipCompletion: z.boolean(), model: z.string(), temperature: z.number() });
var I = z.object({ messageId: z.string(), endpoint: z.string().optional(), clientId: z.string().nullable().optional(), conversationId: z.string().nullable(), parentMessageId: z.string().nullable(), responseMessageId: z.string().nullable().optional(), overrideParentMessageId: z.string().nullable().optional(), bg: z.string().nullable().optional(), model: z.string().nullable().optional(), title: z.string().nullable().or(z.literal("New Chat")).default("New Chat"), sender: z.string(), text: z.string(), generation: z.string().nullable().optional(), isEdited: z.boolean().optional(), isCreatedByUser: z.boolean(), error: z.boolean(), createdAt: z.string().optional().default(function() {
  return (/* @__PURE__ */ new Date()).toISOString();
}), updatedAt: z.string().optional().default(function() {
  return (/* @__PURE__ */ new Date()).toISOString();
}), current: z.boolean().optional(), unfinished: z.boolean().optional(), searchResult: z.boolean().optional(), finish_reason: z.string().optional() });
var P = z.object({ conversationId: z.string().nullable(), title: z.string().nullable().or(z.literal("New Chat")).default("New Chat"), user: z.string().optional(), endpoint: c.nullable(), endpointType: c.optional(), suggestions: z.array(z.string()).optional(), messages: z.array(z.string()).optional(), tools: z.array(v).optional(), createdAt: z.string(), updatedAt: z.string(), systemMessage: z.string().nullable().optional(), modelLabel: z.string().nullable().optional(), examples: z.array(b).optional(), chatGptLabel: z.string().nullable().optional(), userLabel: z.string().optional(), model: z.string().nullable().optional(), promptPrefix: z.string().nullable().optional(), temperature: z.number().optional(), topP: z.number().optional(), topK: z.number().optional(), context: z.string().nullable().optional(), top_p: z.number().optional(), frequency_penalty: z.number().optional(), presence_penalty: z.number().optional(), jailbreak: z.boolean().optional(), jailbreakConversationId: z.string().nullable().optional(), conversationSignature: z.string().nullable().optional(), parentMessageId: z.string().optional(), clientId: z.string().nullable().optional(), invocationId: z.number().nullable().optional(), toneStyle: z.string().nullable().optional(), maxOutputTokens: z.number().optional(), agentOptions: y.nullable().optional(), resendImages: z.boolean().optional(), imageDetail: f.optional(), assistant_id: z.string().optional(), thread_id: z.string().optional() });
var O = P.omit({ conversationId: true, createdAt: true, updatedAt: true, title: true }).merge(z.object({ conversationId: z.string().nullable().optional(), presetId: z.string().nullable().optional(), title: z.string().nullable().optional(), defaultPreset: z.boolean().optional(), order: z.number().optional(), endpoint: d.nullable() }));
var k = P.merge(z.object({ endpoint: d.nullable() }));
var x = P.merge(z.object({ endpoint: d.nullable() }));
var _ = P.pick({ model: true, chatGptLabel: true, promptPrefix: true, temperature: true, top_p: true, presence_penalty: true, frequency_penalty: true, resendImages: true, imageDetail: true }).transform(function(e) {
  var t, n2, o2, r2, a2, s2, u2, p2, c2;
  return i(i({}, e), { model: null !== (t = e.model) && void 0 !== t ? t : "gpt-3.5-turbo", chatGptLabel: null !== (n2 = e.chatGptLabel) && void 0 !== n2 ? n2 : null, promptPrefix: null !== (o2 = e.promptPrefix) && void 0 !== o2 ? o2 : null, temperature: null !== (r2 = e.temperature) && void 0 !== r2 ? r2 : 1, top_p: null !== (a2 = e.top_p) && void 0 !== a2 ? a2 : 1, presence_penalty: null !== (s2 = e.presence_penalty) && void 0 !== s2 ? s2 : 0, frequency_penalty: null !== (u2 = e.frequency_penalty) && void 0 !== u2 ? u2 : 0, resendImages: null !== (p2 = e.resendImages) && void 0 !== p2 && p2, imageDetail: null !== (c2 = e.imageDetail) && void 0 !== c2 ? c2 : l.auto });
}).catch(function() {
  return { model: "gpt-3.5-turbo", chatGptLabel: null, promptPrefix: null, temperature: 1, top_p: 1, presence_penalty: 0, frequency_penalty: 0, resendImages: false, imageDetail: l.auto };
});
var C = P.pick({ model: true, modelLabel: true, promptPrefix: true, examples: true, temperature: true, maxOutputTokens: true, topP: true, topK: true }).transform(function(e) {
  var t, n2, o2, r2, a2, s2, l2, u2, c2, d2, h2 = null === (n2 = null === (t = null == e ? void 0 : e.model) || void 0 === t ? void 0 : t.toLowerCase()) || void 0 === n2 ? void 0 : n2.includes("gemini-pro"), g2 = h2 ? p.maxOutputTokens.maxGeminiPro : p.maxOutputTokens.max, f2 = h2 ? p.maxOutputTokens.defaultGeminiPro : p.maxOutputTokens.default, m2 = null !== (o2 = e.maxOutputTokens) && void 0 !== o2 ? o2 : f2;
  return m2 = Math.min(m2, g2), i(i({}, e), { model: null !== (r2 = e.model) && void 0 !== r2 ? r2 : p.model.default, modelLabel: null !== (a2 = e.modelLabel) && void 0 !== a2 ? a2 : null, promptPrefix: null !== (s2 = e.promptPrefix) && void 0 !== s2 ? s2 : null, examples: null !== (l2 = e.examples) && void 0 !== l2 ? l2 : [{ input: { content: "" }, output: { content: "" } }], temperature: null !== (u2 = e.temperature) && void 0 !== u2 ? u2 : p.temperature.default, maxOutputTokens: m2, topP: null !== (c2 = e.topP) && void 0 !== c2 ? c2 : p.topP.default, topK: null !== (d2 = e.topK) && void 0 !== d2 ? d2 : p.topK.default });
}).catch(function() {
  return { model: p.model.default, modelLabel: null, promptPrefix: null, examples: [{ input: { content: "" }, output: { content: "" } }], temperature: p.temperature.default, maxOutputTokens: p.maxOutputTokens.default, topP: p.topP.default, topK: p.topK.default };
});
var E = P.pick({ jailbreak: true, systemMessage: true, context: true, toneStyle: true, jailbreakConversationId: true, conversationSignature: true, clientId: true, invocationId: true }).transform(function(e) {
  var t, n2, o2, r2, a2, s2, l2, u2;
  return i(i({}, e), { model: "", jailbreak: null !== (t = e.jailbreak) && void 0 !== t && t, systemMessage: null !== (n2 = e.systemMessage) && void 0 !== n2 ? n2 : null, context: null !== (o2 = e.context) && void 0 !== o2 ? o2 : null, toneStyle: null !== (r2 = e.toneStyle) && void 0 !== r2 ? r2 : "creative", jailbreakConversationId: null !== (a2 = e.jailbreakConversationId) && void 0 !== a2 ? a2 : null, conversationSignature: null !== (s2 = e.conversationSignature) && void 0 !== s2 ? s2 : null, clientId: null !== (l2 = e.clientId) && void 0 !== l2 ? l2 : null, invocationId: null !== (u2 = e.invocationId) && void 0 !== u2 ? u2 : 1 });
}).catch(function() {
  return { model: "", jailbreak: false, systemMessage: null, context: null, toneStyle: "creative", jailbreakConversationId: null, conversationSignature: null, clientId: null, invocationId: 1 };
});
var w = P.pick({ model: true, modelLabel: true, promptPrefix: true, temperature: true, maxOutputTokens: true, topP: true, topK: true }).transform(function(e) {
  var t, n2, o2, r2, a2, s2, l2;
  return i(i({}, e), { model: null !== (t = e.model) && void 0 !== t ? t : "claude-1", modelLabel: null !== (n2 = e.modelLabel) && void 0 !== n2 ? n2 : null, promptPrefix: null !== (o2 = e.promptPrefix) && void 0 !== o2 ? o2 : null, temperature: null !== (r2 = e.temperature) && void 0 !== r2 ? r2 : 1, maxOutputTokens: null !== (a2 = e.maxOutputTokens) && void 0 !== a2 ? a2 : 4e3, topP: null !== (s2 = e.topP) && void 0 !== s2 ? s2 : 0.7, topK: null !== (l2 = e.topK) && void 0 !== l2 ? l2 : 5 });
}).catch(function() {
  return { model: "claude-1", modelLabel: null, promptPrefix: null, temperature: 1, maxOutputTokens: 4e3, topP: 0.7, topK: 5 };
});
var A = P.pick({ model: true }).transform(function(e) {
  var t;
  return i(i({}, e), { model: null !== (t = e.model) && void 0 !== t ? t : "text-davinci-002-render-sha" });
}).catch(function() {
  return { model: "text-davinci-002-render-sha" };
});
var T = P.pick({ model: true, chatGptLabel: true, promptPrefix: true, temperature: true, top_p: true, presence_penalty: true, frequency_penalty: true, tools: true, agentOptions: true }).transform(function(e) {
  var t, n2, o2, r2, a2, s2, l2, u2, p2;
  return i(i({}, e), { model: null !== (t = e.model) && void 0 !== t ? t : "gpt-3.5-turbo", chatGptLabel: null !== (n2 = e.chatGptLabel) && void 0 !== n2 ? n2 : null, promptPrefix: null !== (o2 = e.promptPrefix) && void 0 !== o2 ? o2 : null, temperature: null !== (r2 = e.temperature) && void 0 !== r2 ? r2 : 0.8, top_p: null !== (a2 = e.top_p) && void 0 !== a2 ? a2 : 1, presence_penalty: null !== (s2 = e.presence_penalty) && void 0 !== s2 ? s2 : 0, frequency_penalty: null !== (l2 = e.frequency_penalty) && void 0 !== l2 ? l2 : 0, tools: null !== (u2 = e.tools) && void 0 !== u2 ? u2 : [], agentOptions: null !== (p2 = e.agentOptions) && void 0 !== p2 ? p2 : { agent: "functions", skipCompletion: true, model: "gpt-3.5-turbo", temperature: 0 } });
}).catch(function() {
  return { model: "gpt-3.5-turbo", chatGptLabel: null, promptPrefix: null, temperature: 0.8, top_p: 1, presence_penalty: 0, frequency_penalty: 0, tools: [], agentOptions: { agent: "functions", skipCompletion: true, model: "gpt-3.5-turbo", temperature: 0 } };
});
function L(e) {
  var t = i({}, e);
  return Object.keys(t).forEach(function(e2) {
    void 0 !== t[e2] && null !== t[e2] && "" !== t[e2] || delete t[e2];
  }), t;
}
var S;
var G;
var j;
var N;
var K;
var D;
var M = P.pick({ model: true, assistant_id: true, thread_id: true }).transform(L).catch(function() {
  return {};
});
var R = P.pick({ model: true, chatGptLabel: true, promptPrefix: true, temperature: true, top_p: true, presence_penalty: true, frequency_penalty: true, resendImages: true, imageDetail: true }).transform(function(e) {
  var t = i({}, e);
  return "gpt-3.5-turbo" === t.model && delete t.model, 1 === t.temperature && delete t.temperature, 1 === t.top_p && delete t.top_p, 0 === t.presence_penalty && delete t.presence_penalty, 0 === t.frequency_penalty && delete t.frequency_penalty, true !== t.resendImages && delete t.resendImages, t.imageDetail === l.auto && delete t.imageDetail, L(t);
}).catch(function() {
  return {};
});
var q = P.pick({ model: true, modelLabel: true, promptPrefix: true, examples: true, temperature: true, maxOutputTokens: true, topP: true, topK: true }).transform(function(e) {
  var t = i({}, e);
  return t.model === p.model.default && delete t.model, t.temperature === p.temperature.default && delete t.temperature, t.maxOutputTokens === p.maxOutputTokens.default && delete t.maxOutputTokens, t.topP === p.topP.default && delete t.topP, t.topK === p.topK.default && delete t.topK, L(t);
}).catch(function() {
  return {};
});
var B = P.pick({ model: true, modelLabel: true, promptPrefix: true, temperature: true, maxOutputTokens: true, topP: true, topK: true }).transform(function(e) {
  var t = i({}, e);
  return "claude-1" === t.model && delete t.model, 1 === t.temperature && delete t.temperature, 4e3 === t.maxOutputTokens && delete t.maxOutputTokens, 0.7 === t.topP && delete t.topP, 5 === t.topK && delete t.topK, L(t);
}).catch(function() {
  return {};
});
var z2 = P.pick({ model: true }).transform(function(e) {
  var t = i({}, e);
  return "text-davinci-002-render-sha" === t.model && delete t.model, L(t);
}).catch(function() {
  return {};
});
var U = P.pick({ model: true, chatGptLabel: true, promptPrefix: true, temperature: true, top_p: true, presence_penalty: true, frequency_penalty: true, tools: true, agentOptions: true }).transform(function(e) {
  var t, n2 = i({}, e);
  return "gpt-3.5-turbo" === n2.model && delete n2.model, null === n2.chatGptLabel && delete n2.chatGptLabel, null === n2.promptPrefix && delete n2.promptPrefix, 0.8 === n2.temperature && delete n2.temperature, 1 === n2.top_p && delete n2.top_p, 0 === n2.presence_penalty && delete n2.presence_penalty, 0 === n2.frequency_penalty && delete n2.frequency_penalty, 0 === (null === (t = n2.tools) || void 0 === t ? void 0 : t.length) && delete n2.tools, n2.agentOptions && "functions" === n2.agentOptions.agent && true === n2.agentOptions.skipCompletion && "gpt-3.5-turbo" === n2.agentOptions.model && 0 === n2.agentOptions.temperature && delete n2.agentOptions, L(n2);
}).catch(function() {
  return {};
});
!function(e) {
  e.local = "local", e.firebase = "firebase", e.openai = "openai", e.s3 = "s3";
}(S || (S = {}));
var F;
var H = z.nativeEnum(S);
var V = z.object({ name: z.string().refine(function(e) {
  return !c.safeParse(e).success;
}, { message: "Value cannot be one of the default endpoint (EModelEndpoint) values: ".concat(Object.values(r).join(", ")) }), apiKey: z.string(), baseURL: z.string(), models: z.object({ default: z.array(z.string()).min(1), fetch: z.boolean().optional() }), titleConvo: z.boolean().optional(), titleMethod: z.union([z.literal("completion"), z.literal("functions")]).optional(), titleModel: z.string().optional(), summarize: z.boolean().optional(), summaryModel: z.string().optional(), forcePrompt: z.boolean().optional(), modelDisplayLabel: z.string().optional(), headers: z.record(z.any()).optional() });
var W = z.object({ version: z.string(), cache: z.boolean(), fileStrategy: H.optional(), registration: z.object({ socialLogins: z.array(z.string()).optional(), allowedDomains: z.array(z.string()).optional() }).optional(), endpoints: z.object({ custom: z.array(V.partial()) }).strict() });
!function(e) {
  e.mistral = "mistral", e.openrouter = "openrouter";
}(F || (F = {}));
var Y;
var J;
var Q;
var X;
var Z;
var $ = [r.openAI, r.assistant, r.azureOpenAI, r.bingAI, r.chatGPTBrowser, r.gptPlugins, r.google, r.anthropic, r.custom];
var ee = ((G = {})[r.openAI] = "OpenAI", G[r.assistant] = "Assistants", G[r.azureOpenAI] = "Azure OpenAI", G[r.bingAI] = "Bing", G[r.chatGPTBrowser] = "ChatGPT", G[r.gptPlugins] = "Plugins", G[r.google] = "Google", G[r.anthropic] = "Anthropic", G[r.custom] = "Custom", G);
var te = ((j = {})[r.google] = ["gemini-pro", "gemini-pro-vision", "chat-bison", "chat-bison-32k", "codechat-bison", "codechat-bison-32k", "text-bison", "text-bison-32k", "text-unicorn", "code-gecko", "code-bison", "code-bison-32k"], j[r.anthropic] = ["claude-2.1", "claude-2", "claude-1.2", "claude-1", "claude-1-100k", "claude-instant-1", "claude-instant-1-100k"], j[r.openAI] = ["gpt-3.5-turbo-0125", "gpt-3.5-turbo-16k-0613", "gpt-3.5-turbo-16k", "gpt-4-turbo-preview", "gpt-4-0125-preview", "gpt-4-1106-preview", "gpt-3.5-turbo", "gpt-3.5-turbo-1106", "gpt-4-vision-preview", "gpt-4", "gpt-3.5-turbo-instruct-0914", "gpt-3.5-turbo-0613", "gpt-3.5-turbo-0301", "gpt-3.5-turbo-instruct", "gpt-4-0613", "text-davinci-003", "gpt-4-0314"], j);
var ne = ((N = {})[r.openAI] = "/api/ask/".concat(r.openAI), N[r.bingAI] = "/api/ask/".concat(r.bingAI), N[r.google] = "/api/ask/".concat(r.google), N[r.custom] = "/api/ask/".concat(r.custom), N[r.anthropic] = "/api/ask/".concat(r.anthropic), N[r.gptPlugins] = "/api/ask/".concat(r.gptPlugins), N[r.azureOpenAI] = "/api/ask/".concat(r.azureOpenAI), N[r.chatGPTBrowser] = "/api/ask/".concat(r.chatGPTBrowser), N[r.assistant] = "/api/assistants/chat", N);
var oe = /* @__PURE__ */ new Set([r.gptPlugins, r.anthropic, r.google, r.openAI, r.azureOpenAI, r.custom]);
var re = ((K = {})[r.openAI] = true, K[r.google] = true, K[r.assistant] = true, K[r.azureOpenAI] = true, K[r.custom] = true, K);
var ie = ((D = {})[r.openAI] = true, D[r.azureOpenAI] = true, D[r.gptPlugins] = true, D[r.custom] = true, D);
var ae = ["gpt-4-vision", "llava-13b", "gemini-pro-vision"];
!function(e) {
  e.CONFIG_STORE = "configStore", e.PLUGINS = "plugins", e.GEN_TITLE = "genTitle", e.MODELS_CONFIG = "modelsConfig", e.ENDPOINT_CONFIG = "endpointsConfig", e.TOKEN_CONFIG = "tokenConfig", e.CUSTOM_CONFIG = "customConfig", e.OVERRIDE_CONFIG = "overrideConfig";
}(Y || (Y = {})), function(e) {
  e.GOOGLE_SERVICE_KEY = "GOOGLE_SERVICE_KEY", e.GOOGLE_API_KEY = "GOOGLE_API_KEY";
}(J || (J = {})), function(e) {
  e[e.LOW = 85] = "LOW", e[e.HIGH = 170] = "HIGH", e[e.ADDITIONAL = 85] = "ADDITIONAL";
}(Q || (Q = {})), function(e) {
  e.GENERAL = "general", e.BETA = "beta", e.DATA = "data", e.ACCOUNT = "account";
}(X || (X = {}));
var se = ((Z = {})[r.openAI] = _, Z[r.azureOpenAI] = _, Z[r.custom] = _, Z[r.google] = C, Z[r.bingAI] = E, Z[r.anthropic] = w, Z[r.chatGPTBrowser] = A, Z[r.gptPlugins] = T, Z[r.assistant] = M, Z);
function le(e) {
  for (var t, n2 = 0, o2 = e; n2 < o2.length; n2++) {
    var r2 = o2[n2];
    if (r2) {
      t = r2;
      break;
    }
  }
  return t;
}
var ue;
var pe;
var ce;
var de = function(e) {
  var t, n2, o2 = e.endpoint, r2 = e.endpointType, i2 = e.conversation, a2 = e.possibleValues, s2 = se[o2];
  if (!s2 && !r2)
    throw new Error("Unknown endpoint: ".concat(o2));
  !s2 && r2 && (s2 = se[r2]);
  var l2 = s2.parse(i2), u2 = null != a2 ? a2 : {}, p2 = u2.models, c2 = u2.secondaryModels;
  return p2 && l2 && (l2.model = null !== (t = le(p2)) && void 0 !== t ? t : l2.model), c2 && l2.agentOptions && (l2.agentOptions.model = null !== (n2 = le(c2)) && void 0 !== n2 ? n2 : l2.agentOptions.model), l2;
};
var he = function(e) {
  var t, n2 = e.model, o2 = e.endpoint, i2 = e.endpointType, a2 = e.modelDisplayLabel, s2 = e.chatGptLabel, l2 = e.modelLabel, u2 = e.jailbreak;
  return [r.openAI, r.azureOpenAI, r.gptPlugins, r.chatGPTBrowser].includes(o2) ? s2 || (n2 && n2.includes("gpt-3") ? "GPT-3.5" : n2 && n2.includes("gpt-4") ? "GPT-4" : n2 && n2.includes("mistral") ? "Mistral" : null !== (t = ee[o2]) && void 0 !== t ? t : "ChatGPT") : o2 === r.bingAI ? u2 ? "Sydney" : "BingAI" : o2 === r.anthropic ? null != l2 ? l2 : "Claude" : o2 === r.google ? l2 || (n2 && n2.includes("gemini") ? "Gemini" : n2 && n2.includes("code") ? "Codey" : "PaLM2") : o2 === r.custom || i2 === r.custom ? l2 || (s2 || (n2 && n2.includes("mistral") ? "Mistral" : n2 && n2.includes("gpt-3") ? "GPT-3.5" : n2 && n2.includes("gpt-4") ? "GPT-4" : a2 || "AI")) : "";
};
var ge = { openAI: R, azureOpenAI: R, custom: R, assistant: M, google: q, bingAI: E, anthropic: B, chatGPTBrowser: z2, gptPlugins: U };
var fe = function(e) {
  var t, n2 = e.endpoint, o2 = e.endpointType, r2 = e.conversation, i2 = e.possibleValues;
  if (!n2)
    throw new Error("undefined endpoint: ".concat(n2));
  var a2 = ge[n2];
  if (!a2 && !o2)
    throw new Error("Unknown endpoint: ".concat(n2));
  !a2 && o2 && (a2 = ge[o2]);
  var s2 = a2.parse(r2), l2 = (null != i2 ? i2 : {}).models;
  return l2 && s2 && (s2.model = null !== (t = le(l2)) && void 0 !== t ? t : s2.model), s2;
};
function me(e) {
  axios_default.defaults.headers.common["Accept-Language"] = e;
}
function ve(e) {
  axios_default.defaults.headers.common.Authorization = "Bearer " + e;
}
!function(e) {
  e.code_interpreter = "code_interpreter", e.retrieval = "retrieval", e.function = "function";
}(ue || (ue = {})), function(e) {
  e.messages = "messages", e.allConversations = "allConversations", e.searchConversations = "searchConversations", e.conversation = "conversation", e.searchEnabled = "searchEnabled", e.user = "user", e.name = "name", e.models = "models", e.balance = "balance", e.endpoints = "endpoints", e.presets = "presets", e.searchResults = "searchResults", e.tokenCount = "tokenCount", e.availablePlugins = "availablePlugins", e.startupConfig = "startupConfig", e.assistants = "assistants", e.assistant = "assistant", e.endpointsConfigOverride = "endpointsConfigOverride", e.files = "files";
}(pe || (pe = {})), function(e) {
  e.imageUpload = "imageUpload", e.fileDelete = "fileDelete", e.updatePreset = "updatePreset", e.deletePreset = "deletePreset", e.logoutUser = "logoutUser", e.avatarUpload = "avatarUpload";
}(ce || (ce = {}));
var be = function(e, t) {
  return "/api/messages/".concat(e).concat(t ? "/".concat(t) : "");
};
var ye = "/api/keys";
var Ie = function(e) {
  return "/api/convos?pageNumber=".concat(e);
};
var Pe = function(e, t) {
  return "/api/search?q=".concat(e, "&pageNumber=").concat(t);
};
var Oe = function(e) {
  return "/api/assistants".concat(e ? "/".concat(e) : "");
};
var ke = function() {
  return "".concat("/api/files", "/images");
};
function xe(e, n2) {
  return a(this, void 0, void 0, function() {
    return s(this, function(o2) {
      switch (o2.label) {
        case 0:
          return [4, axios_default.post(e, JSON.stringify(n2), { headers: { "Content-Type": "application/json" } })];
        case 1:
          return [2, o2.sent().data];
      }
    });
  });
}
var _e = false;
var Ce = [];
var Ee = function(e) {
  return xe(function(e2) {
    return "/api/auth/refresh".concat(e2 ? "?retry=true" : "");
  }(e));
};
var we = function(e, t) {
  void 0 === t && (t = null), Ce.forEach(function(n2) {
    e ? n2.reject(e) : n2.resolve(t);
  }), Ce = [];
};
axios_default.interceptors.response.use(function(e) {
  return e;
}, function(e) {
  return a(void 0, void 0, void 0, function() {
    var n2, o2, r2, i2, a2;
    return s(this, function(s2) {
      switch (s2.label) {
        case 0:
          if (n2 = e.config, 401 !== e.response.status || n2._retry)
            return [3, 13];
          if (n2._retry = true, !_e)
            return [3, 5];
          s2.label = 1;
        case 1:
          return s2.trys.push([1, 4, , 5]), [4, new Promise(function(e2, t) {
            Ce.push({ resolve: e2, reject: t });
          })];
        case 2:
          return r2 = s2.sent(), n2.headers.Authorization = "Bearer " + r2, [4, axios_default(n2)];
        case 3:
          return [2, s2.sent()];
        case 4:
          return o2 = s2.sent(), [2, Promise.reject(o2)];
        case 5:
          _e = true, s2.label = 6;
        case 6:
          return s2.trys.push([6, 11, 12, 13]), [4, Ee(!!(null === (a2 = n2.url) || void 0 === a2 ? void 0 : a2.includes("api/auth/refresh")))];
        case 7:
          return (r2 = s2.sent().token) ? (n2.headers.Authorization = "Bearer " + r2, ve(r2), window.dispatchEvent(new CustomEvent("tokenUpdated", { detail: r2 })), we(null, r2), [4, axios_default(n2)]) : [3, 9];
        case 8:
          return [2, s2.sent()];
        case 9:
          window.location.href = "/login", s2.label = 10;
        case 10:
          return [3, 13];
        case 11:
          return i2 = s2.sent(), we(i2, null), [2, Promise.reject(i2)];
        case 12:
          return _e = false, [7];
        case 13:
          return [2, Promise.reject(e)];
      }
    });
  });
});
var Ae = { get: function(e, n2) {
  return a(this, void 0, void 0, function() {
    return s(this, function(o2) {
      switch (o2.label) {
        case 0:
          return [4, axios_default.get(e, i({}, n2))];
        case 1:
          return [2, o2.sent().data];
      }
    });
  });
}, post: xe, postMultiPart: function(e, n2, o2) {
  return a(this, void 0, void 0, function() {
    return s(this, function(r2) {
      switch (r2.label) {
        case 0:
          return [4, axios_default.post(e, n2, i(i({}, o2), { headers: { "Content-Type": "multipart/form-data" } }))];
        case 1:
          return [2, r2.sent().data];
      }
    });
  });
}, put: function(e, n2) {
  return a(this, void 0, void 0, function() {
    return s(this, function(o2) {
      switch (o2.label) {
        case 0:
          return [4, axios_default.put(e, JSON.stringify(n2), { headers: { "Content-Type": "application/json" } })];
        case 1:
          return [2, o2.sent().data];
      }
    });
  });
}, delete: function(e) {
  return a(this, void 0, void 0, function() {
    return s(this, function(n2) {
      switch (n2.label) {
        case 0:
          return [4, axios_default.delete(e)];
        case 1:
          return [2, n2.sent().data];
      }
    });
  });
}, deleteWithOptions: function(e, n2) {
  return a(this, void 0, void 0, function() {
    return s(this, function(o2) {
      switch (o2.label) {
        case 0:
          return [4, axios_default.delete(e, i({}, n2))];
        case 1:
          return [2, o2.sent().data];
      }
    });
  });
}, patch: function(e, n2) {
  return a(this, void 0, void 0, function() {
    return s(this, function(o2) {
      switch (o2.label) {
        case 0:
          return [4, axios_default.patch(e, JSON.stringify(n2), { headers: { "Content-Type": "application/json" } })];
        case 1:
          return [2, o2.sent().data];
      }
    });
  });
}, refreshToken: Ee };
var Te = Object.freeze({ __proto__: null, abortRequestWithMessage: function(e, t, n2) {
  return Ae.post(function(e2) {
    return "/api/ask/".concat(e2, "/abort");
  }(e), { arg: { abortKey: t, message: n2 } });
}, clearAllConversations: function() {
  return Ae.post("/api/convos/clear", { arg: {} });
}, createAssistant: function(e) {
  return Ae.post(Oe(), e);
}, createPreset: function(e) {
  return Ae.post("/api/presets", e);
}, deleteAssistant: function(e) {
  return Ae.delete(Oe(e));
}, deleteConversation: function(e) {
  return Ae.post("/api/convos/clear", { arg: e });
}, deleteFiles: function(e) {
  return a(void 0, void 0, void 0, function() {
    return s(this, function(t) {
      return [2, Ae.deleteWithOptions("/api/files", { data: { files: e } })];
    });
  });
}, deletePreset: function(e) {
  return Ae.post("/api/presets/delete", e);
}, genTitle: function(e) {
  return Ae.post("/api/convos/gen_title", e);
}, getAIEndpoints: function() {
  return Ae.get("/api/endpoints");
}, getAssistantById: function(e) {
  return Ae.get(Oe(e));
}, getAvailablePlugins: function() {
  return Ae.get("/api/plugins");
}, getConversationById: function(e) {
  return Ae.get(function(e2) {
    return "/api/convos/".concat(e2);
  }(e));
}, getConversations: function(e) {
  return Ae.get(Ie(e));
}, getEndpointsConfigOverride: function() {
  return Ae.get("/api/endpoints/config/override");
}, getFiles: function() {
  return Ae.get("/api/files");
}, getLoginGoogle: function() {
  return Ae.get("/api/auth/google");
}, getMessagesByConvoId: function(e) {
  return "new" === e ? Promise.resolve([]) : Ae.get(be(e));
}, getModels: function() {
  return a(void 0, void 0, void 0, function() {
    return s(this, function(e) {
      return [2, Ae.get("/api/models")];
    });
  });
}, getPresets: function() {
  return Ae.get("/api/presets");
}, getSearchEnabled: function() {
  return Ae.get("/api/search/enable");
}, getStartupConfig: function() {
  return Ae.get("/api/config");
}, getUser: function() {
  return Ae.get("/api/user");
}, getUserBalance: function() {
  return Ae.get("/api/balance");
}, listAssistants: function(e) {
  return Ae.get(Oe(), { params: e });
}, listConversations: function(e) {
  var t = (null == e ? void 0 : e.pageNumber) || "1";
  return Ae.get(Ie(t));
}, listConversationsByQuery: function(e) {
  var t = (null == e ? void 0 : e.pageNumber) || "1", n2 = (null == e ? void 0 : e.searchQuery) || "";
  return "" !== n2 ? Ae.get(Pe(n2, t)) : Ae.get(Ie(t));
}, login: function(e) {
  return Ae.post("/api/auth/login", e);
}, logout: function() {
  return Ae.post("/api/auth/logout");
}, register: function(e) {
  return Ae.post("/api/auth/register", e);
}, requestPasswordReset: function(e) {
  return Ae.post("/api/auth/requestPasswordReset", e);
}, resetPassword: function(e) {
  return Ae.post("/api/auth/resetPassword", e);
}, revokeAllUserKeys: function() {
  return Ae.delete("".concat(ye, "?all=true"));
}, revokeUserKey: function(e) {
  return Ae.delete(function(e2) {
    return "".concat(ye, "/").concat(e2);
  }(e));
}, searchConversations: function(e, t) {
  return a(void 0, void 0, void 0, function() {
    return s(this, function(n2) {
      return [2, Ae.get(Pe(e, t))];
    });
  });
}, updateAssistant: function(e, t) {
  return Ae.patch(Oe(e), t);
}, updateConversation: function(e) {
  return Ae.post("/api/convos/update", { arg: e });
}, updateMessage: function(e) {
  var t = e.conversationId, n2 = e.messageId, o2 = e.text;
  if (!t)
    throw new Error("conversationId is required");
  return Ae.put(be(t, n2), { text: o2 });
}, updatePreset: function(e) {
  return Ae.post("/api/presets", e);
}, updateTokenCount: function(e) {
  return Ae.post("/api/tokenizer", { arg: e });
}, updateUserKey: function(e) {
  if (!e.value)
    throw new Error("value is required");
  return Ae.put(ye, e);
}, updateUserPlugins: function(e) {
  return Ae.post("/api/user/plugins", e);
}, uploadAvatar: function(e) {
  return Ae.postMultiPart("".concat(ke(), "/avatar"), e);
}, uploadImage: function(e) {
  return Ae.postMultiPart(ke(), e);
}, userKeyQuery: function(e) {
  return Ae.get(function(e2) {
    return "".concat(ye, "?name=").concat(e2);
  }(e));
} });
var Le = function(e, t) {
  if (!(this instanceof Le))
    return new Le(e, t);
  this.INITIALIZING = -1, this.CONNECTING = 0, this.OPEN = 1, this.CLOSED = 2, this.url = e, t = t || {}, this.headers = t.headers || {}, this.payload = void 0 !== t.payload ? t.payload : "", this.method = t.method || this.payload && "POST" || "GET", this.withCredentials = !!t.withCredentials, this.FIELD_SEPARATOR = ":", this.listeners = {}, this.xhr = null, this.readyState = this.INITIALIZING, this.progress = 0, this.chunk = "", this.addEventListener = function(e2, t2) {
    void 0 === this.listeners[e2] && (this.listeners[e2] = []), -1 === this.listeners[e2].indexOf(t2) && this.listeners[e2].push(t2);
  }, this.removeEventListener = function(e2, t2) {
    if (void 0 !== this.listeners[e2]) {
      var n2 = [];
      this.listeners[e2].forEach(function(e3) {
        e3 !== t2 && n2.push(e3);
      }), 0 === n2.length ? delete this.listeners[e2] : this.listeners[e2] = n2;
    }
  }, this.dispatchEvent = function(e2) {
    if (!e2)
      return true;
    e2.source = this;
    var t2 = "on" + e2.type;
    return (!this.hasOwnProperty(t2) || (this[t2].call(this, e2), !e2.defaultPrevented)) && (!this.listeners[e2.type] || this.listeners[e2.type].every(function(t3) {
      return t3(e2), !e2.defaultPrevented;
    }));
  }, this._setReadyState = function(e2) {
    var t2 = new CustomEvent("readystatechange");
    t2.readyState = e2, this.readyState = e2, this.dispatchEvent(t2);
  }, this._onStreamFailure = function(e2) {
    var t2 = new CustomEvent("error");
    t2.data = e2.currentTarget.response, this.dispatchEvent(t2), this.close();
  }, this._onStreamAbort = function(e2) {
    this.dispatchEvent(new CustomEvent("abort")), this.close();
  }, this._onStreamProgress = async function(e2) {
    if (this.xhr) {
      if (401 !== this.xhr.status || this._retry) {
        if (200 !== this.xhr.status)
          return void this._onStreamFailure(e2);
      } else {
        this._retry = true;
        try {
          const e3 = await Ae.refreshToken();
          this.headers = { "Content-Type": "application/json", Authorization: `Bearer ${e3.token}` }, ve(e3.token), window.dispatchEvent(new CustomEvent("tokenUpdated", { detail: e3.token })), this.stream();
        } catch (t3) {
          return void this._onStreamFailure(e2);
        }
      }
      this.readyState == this.CONNECTING && (this.dispatchEvent(new CustomEvent("open")), this._setReadyState(this.OPEN));
      var t2 = this.xhr.responseText.substring(this.progress);
      this.progress += t2.length, t2.split(/(\r\n|\r|\n){2}/g).forEach((function(e3) {
        0 === e3.trim().length ? (this.dispatchEvent(this._parseEventChunk(this.chunk.trim())), this.chunk = "") : this.chunk += e3;
      }).bind(this));
    }
  }, this._onStreamLoaded = function(e2) {
    this._onStreamProgress(e2), this.dispatchEvent(this._parseEventChunk(this.chunk)), this.chunk = "";
  }, this._parseEventChunk = function(e2) {
    if (!e2 || 0 === e2.length)
      return null;
    var t2 = { id: null, retry: null, data: "", event: "message" };
    e2.split(/\n|\r\n|\r/).forEach((function(e3) {
      var n3 = (e3 = e3.trimRight()).indexOf(this.FIELD_SEPARATOR);
      if (!(n3 <= 0)) {
        var o2 = e3.substring(0, n3);
        if (o2 in t2) {
          var r2 = e3.substring(n3 + 1).trimLeft();
          "data" === o2 ? t2[o2] += r2 : t2[o2] = r2;
        }
      }
    }).bind(this));
    var n2 = new CustomEvent(t2.event);
    return n2.data = t2.data, n2.id = t2.id, n2;
  }, this._checkStreamClosed = function() {
    this.xhr && this.xhr.readyState === XMLHttpRequest.DONE && this._setReadyState(this.CLOSED);
  }, this.stream = function() {
    for (var e2 in this._setReadyState(this.CONNECTING), this.xhr = new XMLHttpRequest(), this.xhr.addEventListener("progress", this._onStreamProgress.bind(this)), this.xhr.addEventListener("load", this._onStreamLoaded.bind(this)), this.xhr.addEventListener("readystatechange", this._checkStreamClosed.bind(this)), this.xhr.addEventListener("error", this._onStreamFailure.bind(this)), this.xhr.addEventListener("abort", this._onStreamAbort.bind(this)), this.xhr.open(this.method, this.url), this.headers)
      this.xhr.setRequestHeader(e2, this.headers[e2]);
    this.xhr.withCredentials = this.withCredentials, this.xhr.send(this.payload);
  }, this.close = function() {
    this.readyState !== this.CLOSED && (this.xhr.abort(), this.xhr = null, this._setReadyState(this.CLOSED));
  };
};
function Se(e) {
  var t = e.conversation, n2 = e.message, o2 = e.messages, a2 = e.endpointOption, s2 = e.isEdited, l2 = e.isContinued, u2 = k.parse(t).conversationId, p2 = a2, c2 = p2.endpoint, d2 = p2.endpointType, h2 = ne[null != d2 ? d2 : c2];
  s2 && c2 === r.assistant ? h2 += "/modify" : s2 && (h2 = h2.replace("/ask/", "/edit/"));
  var g2 = i(i(i({}, n2), a2), { isContinued: !(!s2 || !l2), conversationId: u2 });
  return c2 === r.assistant && (g2.messages = o2), { server: h2, payload: g2 };
}
export {
  J as AuthKeys,
  Y as CacheKeys,
  r as EModelEndpoint,
  ne as EndpointURLs,
  S as FileSources,
  l as ImageDetail,
  Q as ImageDetailCost,
  F as KnownEndpoints,
  ce as MutationKeys,
  pe as QueryKeys,
  Le as SSE,
  X as SettingsTabValues,
  ue as Tools,
  ee as alternateName,
  w as anthropicSchema,
  M as assistantSchema,
  E as bingAISchema,
  A as chatGPTBrowserSchema,
  B as compactAnthropicSchema,
  z2 as compactChatGPTSchema,
  q as compactGoogleSchema,
  R as compactOpenAISchema,
  U as compactPluginsSchema,
  W as configSchema,
  Se as createPayload,
  Te as dataService,
  $ as defaultEndpoints,
  te as defaultModels,
  f as eImageDetailSchema,
  c as eModelEndpointSchema,
  V as endpointSchema,
  u as endpointSettings,
  d as extendedModelEndpointSchema,
  H as fileSourceSchema,
  le as getFirstDefinedValue,
  he as getResponseSender,
  C as googleSchema,
  T as gptPluginsSchema,
  h as imageDetailNumeric,
  g as imageDetailValue,
  oe as modularEndpoints,
  _ as openAISchema,
  fe as parseCompactConvo,
  de as parseConvo,
  L as removeNullishValues,
  Ae as request,
  me as setAcceptLanguageHeader,
  ve as setTokenHeader,
  ie as supportsBalanceCheck,
  re as supportsFiles,
  y as tAgentOptionsSchema,
  P as tConversationSchema,
  k as tConvoUpdateSchema,
  b as tExampleSchema,
  I as tMessageSchema,
  m as tPluginAuthConfigSchema,
  v as tPluginSchema,
  O as tPresetSchema,
  x as tPresetUpdateSchema,
  ae as visionModels
};
//# sourceMappingURL=librechat-data-provider.js.map
