{
  "version": 3,
  "sources": ["../../librechat-data-provider/src/schemas.ts", "../../librechat-data-provider/src/types/files.ts", "../../librechat-data-provider/src/config.ts", "../../librechat-data-provider/src/parsers.ts", "../../librechat-data-provider/src/types/assistants.ts", "../../librechat-data-provider/src/keys.ts", "../../librechat-data-provider/src/headers-helpers.ts", "../../librechat-data-provider/src/api-endpoints.ts", "../../librechat-data-provider/src/request.ts", "../../librechat-data-provider/src/data-service.ts", "../../librechat-data-provider/src/sse.js", "../../librechat-data-provider/src/createPayload.ts"],
  "sourcesContent": ["import { z } from 'zod';\n\nexport enum EModelEndpoint {\n  azureOpenAI = 'azureOpenAI',\n  openAI = 'openAI',\n  bingAI = 'bingAI',\n  chatGPTBrowser = 'chatGPTBrowser',\n  google = 'google',\n  gptPlugins = 'gptPlugins',\n  anthropic = 'anthropic',\n  assistant = 'assistant',\n  custom = 'custom',\n}\n\nexport const endpointSettings = {\n  [EModelEndpoint.google]: {\n    model: {\n      default: 'chat-bison',\n    },\n    maxOutputTokens: {\n      min: 1,\n      max: 2048,\n      step: 1,\n      default: 1024,\n      maxGeminiPro: 8192,\n      defaultGeminiPro: 8192,\n    },\n    temperature: {\n      min: 0,\n      max: 1,\n      step: 0.01,\n      default: 0.2,\n    },\n    topP: {\n      min: 0,\n      max: 1,\n      step: 0.01,\n      default: 0.8,\n    },\n    topK: {\n      min: 1,\n      max: 40,\n      step: 0.01,\n      default: 40,\n    },\n  },\n};\n\nconst google = endpointSettings[EModelEndpoint.google];\n\nexport const eModelEndpointSchema = z.nativeEnum(EModelEndpoint);\n\nexport const extendedModelEndpointSchema = z.union([eModelEndpointSchema, z.string()]);\n\nexport enum ImageDetail {\n  low = 'low',\n  auto = 'auto',\n  high = 'high',\n}\n\nexport const imageDetailNumeric = {\n  [ImageDetail.low]: 0,\n  [ImageDetail.auto]: 1,\n  [ImageDetail.high]: 2,\n};\n\nexport const imageDetailValue = {\n  0: ImageDetail.low,\n  1: ImageDetail.auto,\n  2: ImageDetail.high,\n};\n\nexport const eImageDetailSchema = z.nativeEnum(ImageDetail);\n\nexport const tPluginAuthConfigSchema = z.object({\n  authField: z.string(),\n  label: z.string(),\n  description: z.string(),\n});\n\nexport type TPluginAuthConfig = z.infer<typeof tPluginAuthConfigSchema>;\n\nexport const tPluginSchema = z.object({\n  name: z.string(),\n  pluginKey: z.string(),\n  description: z.string(),\n  icon: z.string(),\n  authConfig: z.array(tPluginAuthConfigSchema),\n  authenticated: z.boolean().optional(),\n  isButton: z.boolean().optional(),\n});\n\nexport type TPlugin = z.infer<typeof tPluginSchema>;\n\nexport type TInput = {\n  inputStr: string;\n};\n\nexport type TResPlugin = {\n  plugin: string;\n  input: string;\n  thought: string;\n  loading?: boolean;\n  outputs?: string;\n  latest?: string;\n  inputs?: TInput[];\n};\n\nexport const tExampleSchema = z.object({\n  input: z.object({\n    content: z.string(),\n  }),\n  output: z.object({\n    content: z.string(),\n  }),\n});\n\nexport type TExample = z.infer<typeof tExampleSchema>;\n\nexport const tAgentOptionsSchema = z.object({\n  agent: z.string(),\n  skipCompletion: z.boolean(),\n  model: z.string(),\n  temperature: z.number(),\n});\n\nexport const tMessageSchema = z.object({\n  messageId: z.string(),\n  endpoint: z.string().optional(),\n  clientId: z.string().nullable().optional(),\n  conversationId: z.string().nullable(),\n  parentMessageId: z.string().nullable(),\n  responseMessageId: z.string().nullable().optional(),\n  overrideParentMessageId: z.string().nullable().optional(),\n  bg: z.string().nullable().optional(),\n  model: z.string().nullable().optional(),\n  title: z.string().nullable().or(z.literal('New Chat')).default('New Chat'),\n  sender: z.string(),\n  text: z.string(),\n  generation: z.string().nullable().optional(),\n  isEdited: z.boolean().optional(),\n  isCreatedByUser: z.boolean(),\n  error: z.boolean(),\n  createdAt: z\n    .string()\n    .optional()\n    .default(() => new Date().toISOString()),\n  updatedAt: z\n    .string()\n    .optional()\n    .default(() => new Date().toISOString()),\n  current: z.boolean().optional(),\n  unfinished: z.boolean().optional(),\n  searchResult: z.boolean().optional(),\n  finish_reason: z.string().optional(),\n});\n\nexport type TMessage = z.input<typeof tMessageSchema> & {\n  children?: TMessage[];\n  plugin?: TResPlugin | null;\n  plugins?: TResPlugin[];\n  files?: {\n    file_id: string;\n    type?: string;\n    filename?: string;\n    preview?: string;\n    filepath?: string;\n    height?: number;\n    width?: number;\n  }[];\n};\n\nexport const tConversationSchema = z.object({\n  conversationId: z.string().nullable(),\n  title: z.string().nullable().or(z.literal('New Chat')).default('New Chat'),\n  user: z.string().optional(),\n  endpoint: eModelEndpointSchema.nullable(),\n  endpointType: eModelEndpointSchema.optional(),\n  suggestions: z.array(z.string()).optional(),\n  messages: z.array(z.string()).optional(),\n  tools: z.array(tPluginSchema).optional(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n  systemMessage: z.string().nullable().optional(),\n  modelLabel: z.string().nullable().optional(),\n  examples: z.array(tExampleSchema).optional(),\n  chatGptLabel: z.string().nullable().optional(),\n  userLabel: z.string().optional(),\n  model: z.string().nullable().optional(),\n  promptPrefix: z.string().nullable().optional(),\n  temperature: z.number().optional(),\n  topP: z.number().optional(),\n  topK: z.number().optional(),\n  context: z.string().nullable().optional(),\n  top_p: z.number().optional(),\n  frequency_penalty: z.number().optional(),\n  presence_penalty: z.number().optional(),\n  jailbreak: z.boolean().optional(),\n  jailbreakConversationId: z.string().nullable().optional(),\n  conversationSignature: z.string().nullable().optional(),\n  parentMessageId: z.string().optional(),\n  clientId: z.string().nullable().optional(),\n  invocationId: z.number().nullable().optional(),\n  toneStyle: z.string().nullable().optional(),\n  maxOutputTokens: z.number().optional(),\n  agentOptions: tAgentOptionsSchema.nullable().optional(),\n  /* vision */\n  resendImages: z.boolean().optional(),\n  imageDetail: eImageDetailSchema.optional(),\n  /* assistant */\n  assistant_id: z.string().optional(),\n  thread_id: z.string().optional(),\n});\n\nexport type TConversation = z.infer<typeof tConversationSchema>;\n\nexport const tPresetSchema = tConversationSchema\n  .omit({\n    conversationId: true,\n    createdAt: true,\n    updatedAt: true,\n    title: true,\n  })\n  .merge(\n    z.object({\n      conversationId: z.string().nullable().optional(),\n      presetId: z.string().nullable().optional(),\n      title: z.string().nullable().optional(),\n      defaultPreset: z.boolean().optional(),\n      order: z.number().optional(),\n      endpoint: extendedModelEndpointSchema.nullable(),\n    }),\n  );\n\nexport const tConvoUpdateSchema = tConversationSchema.merge(\n  z.object({\n    endpoint: extendedModelEndpointSchema.nullable(),\n  }),\n);\n\nexport const tPresetUpdateSchema = tConversationSchema.merge(\n  z.object({\n    endpoint: extendedModelEndpointSchema.nullable(),\n  }),\n);\n\nexport type TPreset = z.infer<typeof tPresetSchema>;\n\n// type DefaultSchemaValues = Partial<typeof google>;\n\nexport const openAISchema = tConversationSchema\n  .pick({\n    model: true,\n    chatGptLabel: true,\n    promptPrefix: true,\n    temperature: true,\n    top_p: true,\n    presence_penalty: true,\n    frequency_penalty: true,\n    resendImages: true,\n    imageDetail: true,\n  })\n  .transform((obj) => ({\n    ...obj,\n    model: obj.model ?? 'gpt-3.5-turbo',\n    chatGptLabel: obj.chatGptLabel ?? null,\n    promptPrefix: obj.promptPrefix ?? null,\n    temperature: obj.temperature ?? 1,\n    top_p: obj.top_p ?? 1,\n    presence_penalty: obj.presence_penalty ?? 0,\n    frequency_penalty: obj.frequency_penalty ?? 0,\n    resendImages: obj.resendImages ?? false,\n    imageDetail: obj.imageDetail ?? ImageDetail.auto,\n  }))\n  .catch(() => ({\n    model: 'gpt-3.5-turbo',\n    chatGptLabel: null,\n    promptPrefix: null,\n    temperature: 1,\n    top_p: 1,\n    presence_penalty: 0,\n    frequency_penalty: 0,\n    resendImages: false,\n    imageDetail: ImageDetail.auto,\n  }));\n\nexport const googleSchema = tConversationSchema\n  .pick({\n    model: true,\n    modelLabel: true,\n    promptPrefix: true,\n    examples: true,\n    temperature: true,\n    maxOutputTokens: true,\n    topP: true,\n    topK: true,\n  })\n  .transform((obj) => {\n    const isGeminiPro = obj?.model?.toLowerCase()?.includes('gemini-pro');\n\n    const maxOutputTokensMax = isGeminiPro\n      ? google.maxOutputTokens.maxGeminiPro\n      : google.maxOutputTokens.max;\n    const maxOutputTokensDefault = isGeminiPro\n      ? google.maxOutputTokens.defaultGeminiPro\n      : google.maxOutputTokens.default;\n\n    let maxOutputTokens = obj.maxOutputTokens ?? maxOutputTokensDefault;\n    maxOutputTokens = Math.min(maxOutputTokens, maxOutputTokensMax);\n\n    return {\n      ...obj,\n      model: obj.model ?? google.model.default,\n      modelLabel: obj.modelLabel ?? null,\n      promptPrefix: obj.promptPrefix ?? null,\n      examples: obj.examples ?? [{ input: { content: '' }, output: { content: '' } }],\n      temperature: obj.temperature ?? google.temperature.default,\n      maxOutputTokens,\n      topP: obj.topP ?? google.topP.default,\n      topK: obj.topK ?? google.topK.default,\n    };\n  })\n  .catch(() => ({\n    model: google.model.default,\n    modelLabel: null,\n    promptPrefix: null,\n    examples: [{ input: { content: '' }, output: { content: '' } }],\n    temperature: google.temperature.default,\n    maxOutputTokens: google.maxOutputTokens.default,\n    topP: google.topP.default,\n    topK: google.topK.default,\n  }));\n\nexport const bingAISchema = tConversationSchema\n  .pick({\n    jailbreak: true,\n    systemMessage: true,\n    context: true,\n    toneStyle: true,\n    jailbreakConversationId: true,\n    conversationSignature: true,\n    clientId: true,\n    invocationId: true,\n  })\n  .transform((obj) => ({\n    ...obj,\n    model: '',\n    jailbreak: obj.jailbreak ?? false,\n    systemMessage: obj.systemMessage ?? null,\n    context: obj.context ?? null,\n    toneStyle: obj.toneStyle ?? 'creative',\n    jailbreakConversationId: obj.jailbreakConversationId ?? null,\n    conversationSignature: obj.conversationSignature ?? null,\n    clientId: obj.clientId ?? null,\n    invocationId: obj.invocationId ?? 1,\n  }))\n  .catch(() => ({\n    model: '',\n    jailbreak: false,\n    systemMessage: null,\n    context: null,\n    toneStyle: 'creative',\n    jailbreakConversationId: null,\n    conversationSignature: null,\n    clientId: null,\n    invocationId: 1,\n  }));\n\nexport const anthropicSchema = tConversationSchema\n  .pick({\n    model: true,\n    modelLabel: true,\n    promptPrefix: true,\n    temperature: true,\n    maxOutputTokens: true,\n    topP: true,\n    topK: true,\n  })\n  .transform((obj) => ({\n    ...obj,\n    model: obj.model ?? 'claude-1',\n    modelLabel: obj.modelLabel ?? null,\n    promptPrefix: obj.promptPrefix ?? null,\n    temperature: obj.temperature ?? 1,\n    maxOutputTokens: obj.maxOutputTokens ?? 4000,\n    topP: obj.topP ?? 0.7,\n    topK: obj.topK ?? 5,\n  }))\n  .catch(() => ({\n    model: 'claude-1',\n    modelLabel: null,\n    promptPrefix: null,\n    temperature: 1,\n    maxOutputTokens: 4000,\n    topP: 0.7,\n    topK: 5,\n  }));\n\nexport const chatGPTBrowserSchema = tConversationSchema\n  .pick({\n    model: true,\n  })\n  .transform((obj) => ({\n    ...obj,\n    model: obj.model ?? 'text-davinci-002-render-sha',\n  }))\n  .catch(() => ({\n    model: 'text-davinci-002-render-sha',\n  }));\n\nexport const gptPluginsSchema = tConversationSchema\n  .pick({\n    model: true,\n    chatGptLabel: true,\n    promptPrefix: true,\n    temperature: true,\n    top_p: true,\n    presence_penalty: true,\n    frequency_penalty: true,\n    tools: true,\n    agentOptions: true,\n  })\n  .transform((obj) => ({\n    ...obj,\n    model: obj.model ?? 'gpt-3.5-turbo',\n    chatGptLabel: obj.chatGptLabel ?? null,\n    promptPrefix: obj.promptPrefix ?? null,\n    temperature: obj.temperature ?? 0.8,\n    top_p: obj.top_p ?? 1,\n    presence_penalty: obj.presence_penalty ?? 0,\n    frequency_penalty: obj.frequency_penalty ?? 0,\n    tools: obj.tools ?? [],\n    agentOptions: obj.agentOptions ?? {\n      agent: 'functions',\n      skipCompletion: true,\n      model: 'gpt-3.5-turbo',\n      temperature: 0,\n    },\n  }))\n  .catch(() => ({\n    model: 'gpt-3.5-turbo',\n    chatGptLabel: null,\n    promptPrefix: null,\n    temperature: 0.8,\n    top_p: 1,\n    presence_penalty: 0,\n    frequency_penalty: 0,\n    tools: [],\n    agentOptions: {\n      agent: 'functions',\n      skipCompletion: true,\n      model: 'gpt-3.5-turbo',\n      temperature: 0,\n    },\n  }));\n\nexport function removeNullishValues<T extends object>(obj: T): T {\n  const newObj: Partial<T> = { ...obj };\n\n  (Object.keys(newObj) as Array<keyof T>).forEach((key) => {\n    if (newObj[key] === undefined || newObj[key] === null || newObj[key] === '') {\n      delete newObj[key];\n    }\n  });\n\n  return newObj as T;\n}\n\nexport const assistantSchema = tConversationSchema\n  .pick({\n    model: true,\n    assistant_id: true,\n    thread_id: true,\n  })\n  .transform(removeNullishValues)\n  .catch(() => ({}));\n\nexport const compactOpenAISchema = tConversationSchema\n  .pick({\n    model: true,\n    chatGptLabel: true,\n    promptPrefix: true,\n    temperature: true,\n    top_p: true,\n    presence_penalty: true,\n    frequency_penalty: true,\n    resendImages: true,\n    imageDetail: true,\n  })\n  .transform((obj: Partial<TConversation>) => {\n    const newObj: Partial<TConversation> = { ...obj };\n    if (newObj.model === 'gpt-3.5-turbo') {\n      delete newObj.model;\n    }\n    if (newObj.temperature === 1) {\n      delete newObj.temperature;\n    }\n    if (newObj.top_p === 1) {\n      delete newObj.top_p;\n    }\n    if (newObj.presence_penalty === 0) {\n      delete newObj.presence_penalty;\n    }\n    if (newObj.frequency_penalty === 0) {\n      delete newObj.frequency_penalty;\n    }\n    if (newObj.resendImages !== true) {\n      delete newObj.resendImages;\n    }\n    if (newObj.imageDetail === ImageDetail.auto) {\n      delete newObj.imageDetail;\n    }\n\n    return removeNullishValues(newObj);\n  })\n  .catch(() => ({}));\n\nexport const compactGoogleSchema = tConversationSchema\n  .pick({\n    model: true,\n    modelLabel: true,\n    promptPrefix: true,\n    examples: true,\n    temperature: true,\n    maxOutputTokens: true,\n    topP: true,\n    topK: true,\n  })\n  .transform((obj) => {\n    const newObj: Partial<TConversation> = { ...obj };\n    if (newObj.model === google.model.default) {\n      delete newObj.model;\n    }\n    if (newObj.temperature === google.temperature.default) {\n      delete newObj.temperature;\n    }\n    if (newObj.maxOutputTokens === google.maxOutputTokens.default) {\n      delete newObj.maxOutputTokens;\n    }\n    if (newObj.topP === google.topP.default) {\n      delete newObj.topP;\n    }\n    if (newObj.topK === google.topK.default) {\n      delete newObj.topK;\n    }\n\n    return removeNullishValues(newObj);\n  })\n  .catch(() => ({}));\n\nexport const compactAnthropicSchema = tConversationSchema\n  .pick({\n    model: true,\n    modelLabel: true,\n    promptPrefix: true,\n    temperature: true,\n    maxOutputTokens: true,\n    topP: true,\n    topK: true,\n  })\n  .transform((obj) => {\n    const newObj: Partial<TConversation> = { ...obj };\n    if (newObj.model === 'claude-1') {\n      delete newObj.model;\n    }\n    if (newObj.temperature === 1) {\n      delete newObj.temperature;\n    }\n    if (newObj.maxOutputTokens === 4000) {\n      delete newObj.maxOutputTokens;\n    }\n    if (newObj.topP === 0.7) {\n      delete newObj.topP;\n    }\n    if (newObj.topK === 5) {\n      delete newObj.topK;\n    }\n\n    return removeNullishValues(newObj);\n  })\n  .catch(() => ({}));\n\nexport const compactChatGPTSchema = tConversationSchema\n  .pick({\n    model: true,\n  })\n  .transform((obj) => {\n    const newObj: Partial<TConversation> = { ...obj };\n    // model: obj.model ?? 'text-davinci-002-render-sha',\n    if (newObj.model === 'text-davinci-002-render-sha') {\n      delete newObj.model;\n    }\n\n    return removeNullishValues(newObj);\n  })\n  .catch(() => ({}));\n\nexport const compactPluginsSchema = tConversationSchema\n  .pick({\n    model: true,\n    chatGptLabel: true,\n    promptPrefix: true,\n    temperature: true,\n    top_p: true,\n    presence_penalty: true,\n    frequency_penalty: true,\n    tools: true,\n    agentOptions: true,\n  })\n  .transform((obj) => {\n    const newObj: Partial<TConversation> = { ...obj };\n    if (newObj.model === 'gpt-3.5-turbo') {\n      delete newObj.model;\n    }\n    if (newObj.chatGptLabel === null) {\n      delete newObj.chatGptLabel;\n    }\n    if (newObj.promptPrefix === null) {\n      delete newObj.promptPrefix;\n    }\n    if (newObj.temperature === 0.8) {\n      delete newObj.temperature;\n    }\n    if (newObj.top_p === 1) {\n      delete newObj.top_p;\n    }\n    if (newObj.presence_penalty === 0) {\n      delete newObj.presence_penalty;\n    }\n    if (newObj.frequency_penalty === 0) {\n      delete newObj.frequency_penalty;\n    }\n    if (newObj.tools?.length === 0) {\n      delete newObj.tools;\n    }\n\n    if (\n      newObj.agentOptions &&\n      newObj.agentOptions.agent === 'functions' &&\n      newObj.agentOptions.skipCompletion === true &&\n      newObj.agentOptions.model === 'gpt-3.5-turbo' &&\n      newObj.agentOptions.temperature === 0\n    ) {\n      delete newObj.agentOptions;\n    }\n\n    return removeNullishValues(newObj);\n  })\n  .catch(() => ({}));\n\n// const createGoogleSchema = (customGoogle: DefaultSchemaValues) => {\n//   const defaults = { ...google, ...customGoogle };\n//   return tConversationSchema\n//     .pick({\n//       model: true,\n//       modelLabel: true,\n//       promptPrefix: true,\n//       examples: true,\n//       temperature: true,\n//       maxOutputTokens: true,\n//       topP: true,\n//       topK: true,\n//     })\n//     .transform((obj) => {\n//       const isGeminiPro = obj?.model?.toLowerCase()?.includes('gemini-pro');\n\n//       const maxOutputTokensMax = isGeminiPro\n//         ? defaults.maxOutputTokens.maxGeminiPro\n//         : defaults.maxOutputTokens.max;\n//       const maxOutputTokensDefault = isGeminiPro\n//         ? defaults.maxOutputTokens.defaultGeminiPro\n//         : defaults.maxOutputTokens.default;\n\n//       let maxOutputTokens = obj.maxOutputTokens ?? maxOutputTokensDefault;\n//       maxOutputTokens = Math.min(maxOutputTokens, maxOutputTokensMax);\n\n//       return {\n//         ...obj,\n//         model: obj.model ?? defaults.model.default,\n//         modelLabel: obj.modelLabel ?? null,\n//         promptPrefix: obj.promptPrefix ?? null,\n//         examples: obj.examples ?? [{ input: { content: '' }, output: { content: '' } }],\n//         temperature: obj.temperature ?? defaults.temperature.default,\n//         maxOutputTokens,\n//         topP: obj.topP ?? defaults.topP.default,\n//         topK: obj.topK ?? defaults.topK.default,\n//       };\n//     })\n//     .catch(() => ({\n//       model: defaults.model.default,\n//       modelLabel: null,\n//       promptPrefix: null,\n//       examples: [{ input: { content: '' }, output: { content: '' } }],\n//       temperature: defaults.temperature.default,\n//       maxOutputTokens: defaults.maxOutputTokens.default,\n//       topP: defaults.topP.default,\n//       topK: defaults.topK.default,\n//     }));\n// };\n", "export enum FileSources {\n  local = 'local',\n  firebase = 'firebase',\n  openai = 'openai',\n  s3 = 's3',\n}\n\nexport type TFile = {\n  message: string;\n  file_id: string;\n  filepath: string;\n  filename: string;\n  type: string;\n  size: number;\n  temp_file_id?: string;\n  source?: FileSources;\n  height?: number;\n  width?: number;\n};\n\nexport type TFileUpload = TFile & {\n  temp_file_id: string;\n};\n\nexport type AvatarUploadResponse = {\n  url: string;\n};\n\nexport type FileUploadBody = {\n  formData: FormData;\n  file_id: string;\n};\n\nexport type UploadMutationOptions = {\n  onSuccess?: (data: TFileUpload, variables: FileUploadBody, context?: unknown) => void;\n  onMutate?: (variables: FileUploadBody) => void | Promise<unknown>;\n  onError?: (error: unknown, variables: FileUploadBody, context?: unknown) => void;\n};\n\nexport type UploadAvatarOptions = {\n  onSuccess?: (data: AvatarUploadResponse, variables: FormData, context?: unknown) => void;\n  onMutate?: (variables: FormData) => void | Promise<unknown>;\n  onError?: (error: unknown, variables: FormData, context?: unknown) => void;\n};\n\nexport type DeleteFilesResponse = {\n  message: string;\n  result: Record<string, unknown>;\n};\n\nexport type BatchFile = {\n  file_id: string;\n  filepath: string;\n  source: FileSources;\n};\n\nexport type DeleteFilesBody = {\n  files: BatchFile[];\n};\n\nexport type DeleteMutationOptions = {\n  onSuccess?: (data: DeleteFilesResponse, variables: DeleteFilesBody, context?: unknown) => void;\n  onMutate?: (variables: DeleteFilesBody) => void | Promise<unknown>;\n  onError?: (error: unknown, variables: DeleteFilesBody, context?: unknown) => void;\n};\n", "import { z } from 'zod';\nimport { EModelEndpoint, eModelEndpointSchema } from './schemas';\nimport { FileSources } from './types/files';\n\nexport const fileSourceSchema = z.nativeEnum(FileSources);\n\nexport const endpointSchema = z.object({\n  name: z.string().refine((value) => !eModelEndpointSchema.safeParse(value).success, {\n    message: `Value cannot be one of the default endpoint (EModelEndpoint) values: ${Object.values(\n      EModelEndpoint,\n    ).join(', ')}`,\n  }),\n  apiKey: z.string(),\n  baseURL: z.string(),\n  models: z.object({\n    default: z.array(z.string()).min(1),\n    fetch: z.boolean().optional(),\n  }),\n  titleConvo: z.boolean().optional(),\n  titleMethod: z.union([z.literal('completion'), z.literal('functions')]).optional(),\n  titleModel: z.string().optional(),\n  summarize: z.boolean().optional(),\n  summaryModel: z.string().optional(),\n  forcePrompt: z.boolean().optional(),\n  modelDisplayLabel: z.string().optional(),\n  headers: z.record(z.any()).optional(),\n});\n\nexport const configSchema = z.object({\n  version: z.string(),\n  cache: z.boolean(),\n  fileStrategy: fileSourceSchema.optional(),\n  registration: z\n    .object({\n      socialLogins: z.array(z.string()).optional(),\n      allowedDomains: z.array(z.string()).optional(),\n    })\n    .optional(),\n  endpoints: z\n    .object({\n      custom: z.array(endpointSchema.partial()),\n    })\n    .strict(),\n});\n\nexport type TCustomConfig = z.infer<typeof configSchema>;\n\nexport enum KnownEndpoints {\n  mistral = 'mistral',\n  openrouter = 'openrouter',\n}\n\nexport const defaultEndpoints: EModelEndpoint[] = [\n  EModelEndpoint.openAI,\n  EModelEndpoint.assistant,\n  EModelEndpoint.azureOpenAI,\n  EModelEndpoint.bingAI,\n  EModelEndpoint.chatGPTBrowser,\n  EModelEndpoint.gptPlugins,\n  EModelEndpoint.google,\n  EModelEndpoint.anthropic,\n  EModelEndpoint.custom,\n];\n\nexport const alternateName = {\n  [EModelEndpoint.openAI]: 'OpenAI',\n  [EModelEndpoint.assistant]: 'Assistants',\n  [EModelEndpoint.azureOpenAI]: 'Azure OpenAI',\n  [EModelEndpoint.bingAI]: 'Bing',\n  [EModelEndpoint.chatGPTBrowser]: 'ChatGPT',\n  [EModelEndpoint.gptPlugins]: 'Plugins',\n  [EModelEndpoint.google]: 'Google',\n  [EModelEndpoint.anthropic]: 'Anthropic',\n  [EModelEndpoint.custom]: 'Custom',\n};\n\nexport const defaultModels = {\n  [EModelEndpoint.google]: [\n    'gemini-pro',\n    'gemini-pro-vision',\n    'chat-bison',\n    'chat-bison-32k',\n    'codechat-bison',\n    'codechat-bison-32k',\n    'text-bison',\n    'text-bison-32k',\n    'text-unicorn',\n    'code-gecko',\n    'code-bison',\n    'code-bison-32k',\n  ],\n  [EModelEndpoint.anthropic]: [\n    'claude-2.1',\n    'claude-2',\n    'claude-1.2',\n    'claude-1',\n    'claude-1-100k',\n    'claude-instant-1',\n    'claude-instant-1-100k',\n  ],\n  [EModelEndpoint.openAI]: [\n    'gpt-3.5-turbo-0125',\n    'gpt-3.5-turbo-16k-0613',\n    'gpt-3.5-turbo-16k',\n    'gpt-4-turbo-preview',\n    'gpt-4-0125-preview',\n    'gpt-4-1106-preview',\n    'gpt-3.5-turbo',\n    'gpt-3.5-turbo-1106',\n    'gpt-4-vision-preview',\n    'gpt-4',\n    'gpt-3.5-turbo-instruct-0914',\n    'gpt-3.5-turbo-0613',\n    'gpt-3.5-turbo-0301',\n    'gpt-3.5-turbo-instruct',\n    'gpt-4-0613',\n    'text-davinci-003',\n    'gpt-4-0314',\n  ],\n};\n\nexport const EndpointURLs: { [key in EModelEndpoint]: string } = {\n  [EModelEndpoint.openAI]: `/api/ask/${EModelEndpoint.openAI}`,\n  [EModelEndpoint.bingAI]: `/api/ask/${EModelEndpoint.bingAI}`,\n  [EModelEndpoint.google]: `/api/ask/${EModelEndpoint.google}`,\n  [EModelEndpoint.custom]: `/api/ask/${EModelEndpoint.custom}`,\n  [EModelEndpoint.anthropic]: `/api/ask/${EModelEndpoint.anthropic}`,\n  [EModelEndpoint.gptPlugins]: `/api/ask/${EModelEndpoint.gptPlugins}`,\n  [EModelEndpoint.azureOpenAI]: `/api/ask/${EModelEndpoint.azureOpenAI}`,\n  [EModelEndpoint.chatGPTBrowser]: `/api/ask/${EModelEndpoint.chatGPTBrowser}`,\n  [EModelEndpoint.assistant]: '/api/assistants/chat',\n};\n\nexport const modularEndpoints = new Set<EModelEndpoint | string>([\n  EModelEndpoint.gptPlugins,\n  EModelEndpoint.anthropic,\n  EModelEndpoint.google,\n  EModelEndpoint.openAI,\n  EModelEndpoint.azureOpenAI,\n  EModelEndpoint.custom,\n]);\n\nexport const supportsFiles = {\n  [EModelEndpoint.openAI]: true,\n  [EModelEndpoint.google]: true,\n  [EModelEndpoint.assistant]: true,\n  [EModelEndpoint.azureOpenAI]: true,\n  [EModelEndpoint.custom]: true,\n};\n\nexport const supportsBalanceCheck = {\n  [EModelEndpoint.openAI]: true,\n  [EModelEndpoint.azureOpenAI]: true,\n  [EModelEndpoint.gptPlugins]: true,\n  [EModelEndpoint.custom]: true,\n};\n\nexport const visionModels = ['gpt-4-vision', 'llava-13b', 'gemini-pro-vision'];\n\n/**\n * Enum for cache keys.\n */\nexport enum CacheKeys {\n  /**\n   * Key for the config store namespace.\n   */\n  CONFIG_STORE = 'configStore',\n  /**\n   * Key for the plugins cache.\n   */\n  PLUGINS = 'plugins',\n  /**\n   * Key for the title generation cache.\n   */\n  GEN_TITLE = 'genTitle',\n  /**\n   * Key for the model config cache.\n   */\n  MODELS_CONFIG = 'modelsConfig',\n  /**\n   * Key for the default endpoint config cache.\n   */\n  ENDPOINT_CONFIG = 'endpointsConfig',\n  /**\n   * Key for accessing the model token config cache.\n   */\n  TOKEN_CONFIG = 'tokenConfig',\n  /**\n   * Key for the custom config cache.\n   */\n  CUSTOM_CONFIG = 'customConfig',\n  /**\n   * Key for the override config cache.\n   */\n  OVERRIDE_CONFIG = 'overrideConfig',\n}\n\n/**\n * Enum for authentication keys.\n */\nexport enum AuthKeys {\n  /**\n   * Key for the Service Account to use Vertex AI.\n   */\n  GOOGLE_SERVICE_KEY = 'GOOGLE_SERVICE_KEY',\n  /**\n   * API key to use Google Generative AI.\n   */\n  GOOGLE_API_KEY = 'GOOGLE_API_KEY',\n}\n\n/**\n * Enum for Image Detail Cost.\n *\n * **Low Res Fixed Cost:** `85`\n *\n * **High Res Calculation:**\n *\n * Number of `512px` Tiles * `170` + `85` (Additional Cost)\n */\nexport enum ImageDetailCost {\n  /**\n   * Low resolution is a fixed value.\n   */\n  LOW = 85,\n  /**\n   * High resolution Cost Per Tile\n   */\n  HIGH = 170,\n  /**\n   * Additional Cost added to High Resolution Total Cost\n   */\n  ADDITIONAL = 85,\n}\n\n/**\n * Tab values for Settings Dialog\n */\nexport enum SettingsTabValues {\n  /**\n   * Tab for General Settings\n   */\n  GENERAL = 'general',\n  /**\n   * Tab for Beta Features\n   */\n  BETA = 'beta',\n  /**\n   * Tab for Data Controls\n   */\n  DATA = 'data',\n  /**\n   * Tab for Account Settings\n   */\n  ACCOUNT = 'account',\n}\n", "import type { TConversation, TPreset } from './schemas';\nimport type { TEndpointOption } from './types';\nimport {\n  EModelEndpoint,\n  openAISchema,\n  googleSchema,\n  bingAISchema,\n  anthropicSchema,\n  chatGPTBrowserSchema,\n  gptPluginsSchema,\n  assistantSchema,\n  compactOpenAISchema,\n  compactGoogleSchema,\n  compactAnthropicSchema,\n  compactChatGPTSchema,\n  compactPluginsSchema,\n} from './schemas';\nimport { alternateName } from './config';\n\ntype EndpointSchema =\n  | typeof openAISchema\n  | typeof googleSchema\n  | typeof bingAISchema\n  | typeof anthropicSchema\n  | typeof chatGPTBrowserSchema\n  | typeof gptPluginsSchema\n  | typeof assistantSchema;\n\nconst endpointSchemas: Record<EModelEndpoint, EndpointSchema> = {\n  [EModelEndpoint.openAI]: openAISchema,\n  [EModelEndpoint.azureOpenAI]: openAISchema,\n  [EModelEndpoint.custom]: openAISchema,\n  [EModelEndpoint.google]: googleSchema,\n  [EModelEndpoint.bingAI]: bingAISchema,\n  [EModelEndpoint.anthropic]: anthropicSchema,\n  [EModelEndpoint.chatGPTBrowser]: chatGPTBrowserSchema,\n  [EModelEndpoint.gptPlugins]: gptPluginsSchema,\n  [EModelEndpoint.assistant]: assistantSchema,\n};\n\n// const schemaCreators: Record<EModelEndpoint, (customSchema: DefaultSchemaValues) => EndpointSchema> = {\n//   [EModelEndpoint.google]: createGoogleSchema,\n// };\n\nexport function getFirstDefinedValue(possibleValues: string[]) {\n  let returnValue;\n  for (const value of possibleValues) {\n    if (value) {\n      returnValue = value;\n      break;\n    }\n  }\n  return returnValue;\n}\n\nexport type TPossibleValues = {\n  models: string[];\n  secondaryModels?: string[];\n};\n\nexport const parseConvo = ({\n  endpoint,\n  endpointType,\n  conversation,\n  possibleValues,\n}: {\n  endpoint: EModelEndpoint;\n  endpointType?: EModelEndpoint;\n  conversation: Partial<TConversation | TPreset>;\n  possibleValues?: TPossibleValues;\n  // TODO: POC for default schema\n  // defaultSchema?: Partial<EndpointSchema>,\n}) => {\n  let schema = endpointSchemas[endpoint];\n\n  if (!schema && !endpointType) {\n    throw new Error(`Unknown endpoint: ${endpoint}`);\n  } else if (!schema && endpointType) {\n    schema = endpointSchemas[endpointType];\n  }\n\n  // if (defaultSchema && schemaCreators[endpoint]) {\n  //   schema = schemaCreators[endpoint](defaultSchema);\n  // }\n\n  const convo = schema.parse(conversation) as TConversation;\n  const { models, secondaryModels } = possibleValues ?? {};\n\n  if (models && convo) {\n    convo.model = getFirstDefinedValue(models) ?? convo.model;\n  }\n\n  if (secondaryModels && convo.agentOptions) {\n    convo.agentOptions.model = getFirstDefinedValue(secondaryModels) ?? convo.agentOptions.model;\n  }\n\n  return convo;\n};\n\nexport const getResponseSender = (endpointOption: TEndpointOption): string => {\n  const { model, endpoint, endpointType, modelDisplayLabel, chatGptLabel, modelLabel, jailbreak } =\n    endpointOption;\n\n  if (\n    [\n      EModelEndpoint.openAI,\n      EModelEndpoint.azureOpenAI,\n      EModelEndpoint.gptPlugins,\n      EModelEndpoint.chatGPTBrowser,\n    ].includes(endpoint)\n  ) {\n    if (chatGptLabel) {\n      return chatGptLabel;\n    } else if (model && model.includes('gpt-3')) {\n      return 'GPT-3.5';\n    } else if (model && model.includes('gpt-4')) {\n      return 'GPT-4';\n    } else if (model && model.includes('mistral')) {\n      return 'Mistral';\n    }\n    return alternateName[endpoint] ?? 'ChatGPT';\n  }\n\n  if (endpoint === EModelEndpoint.bingAI) {\n    return jailbreak ? 'Sydney' : 'BingAI';\n  }\n\n  if (endpoint === EModelEndpoint.anthropic) {\n    return modelLabel ?? 'Claude';\n  }\n\n  if (endpoint === EModelEndpoint.google) {\n    if (modelLabel) {\n      return modelLabel;\n    } else if (model && model.includes('gemini')) {\n      return 'Gemini';\n    } else if (model && model.includes('code')) {\n      return 'Codey';\n    }\n\n    return 'PaLM2';\n  }\n\n  if (endpoint === EModelEndpoint.custom || endpointType === EModelEndpoint.custom) {\n    if (modelLabel) {\n      return modelLabel;\n    } else if (chatGptLabel) {\n      return chatGptLabel;\n    } else if (model && model.includes('mistral')) {\n      return 'Mistral';\n    } else if (model && model.includes('gpt-3')) {\n      return 'GPT-3.5';\n    } else if (model && model.includes('gpt-4')) {\n      return 'GPT-4';\n    } else if (modelDisplayLabel) {\n      return modelDisplayLabel;\n    }\n\n    return 'AI';\n  }\n\n  return '';\n};\n\ntype CompactEndpointSchema =\n  | typeof compactOpenAISchema\n  | typeof assistantSchema\n  | typeof compactGoogleSchema\n  | typeof bingAISchema\n  | typeof compactAnthropicSchema\n  | typeof compactChatGPTSchema\n  | typeof compactPluginsSchema;\n\nconst compactEndpointSchemas: Record<string, CompactEndpointSchema> = {\n  openAI: compactOpenAISchema,\n  azureOpenAI: compactOpenAISchema,\n  custom: compactOpenAISchema,\n  assistant: assistantSchema,\n  google: compactGoogleSchema,\n  /* BingAI needs all fields */\n  bingAI: bingAISchema,\n  anthropic: compactAnthropicSchema,\n  chatGPTBrowser: compactChatGPTSchema,\n  gptPlugins: compactPluginsSchema,\n};\n\nexport const parseCompactConvo = ({\n  endpoint,\n  endpointType,\n  conversation,\n  possibleValues,\n}: {\n  endpoint?: EModelEndpoint;\n  endpointType?: EModelEndpoint;\n  conversation: Partial<TConversation | TPreset>;\n  possibleValues?: TPossibleValues;\n  // TODO: POC for default schema\n  // defaultSchema?: Partial<EndpointSchema>,\n}) => {\n  if (!endpoint) {\n    throw new Error(`undefined endpoint: ${endpoint}`);\n  }\n\n  let schema = compactEndpointSchemas[endpoint];\n\n  if (!schema && !endpointType) {\n    throw new Error(`Unknown endpoint: ${endpoint}`);\n  } else if (!schema && endpointType) {\n    schema = compactEndpointSchemas[endpointType];\n  }\n\n  const convo = schema.parse(conversation) as TConversation;\n  // const { models, secondaryModels } = possibleValues ?? {};\n  const { models } = possibleValues ?? {};\n\n  if (models && convo) {\n    convo.model = getFirstDefinedValue(models) ?? convo.model;\n  }\n\n  // if (secondaryModels && convo.agentOptions) {\n  //   convo.agentOptionmodel = getFirstDefinedValue(secondaryModels) ?? convo.agentOptionmodel;\n  // }\n\n  return convo;\n};\n", "export type Metadata = {\n  [key: string]: unknown;\n};\n\nexport enum Tools {\n  code_interpreter = 'code_interpreter',\n  retrieval = 'retrieval',\n  function = 'function',\n}\n\nexport type Tool = {\n  [type: string]: Tools;\n};\n\nexport type Assistant = {\n  id: string;\n  created_at: number;\n  description: string | null;\n  file_ids: string[];\n  instructions: string | null;\n  metadata: Metadata | null;\n  model: string;\n  name: string | null;\n  object: string;\n  tools: Tool[];\n};\n\nexport type AssistantCreateParams = {\n  model: string;\n  description?: string | null;\n  file_ids?: string[];\n  instructions?: string | null;\n  metadata?: Metadata | null;\n  name?: string | null;\n  tools?: Tool[];\n};\n\nexport type AssistantUpdateParams = {\n  model?: string;\n  description?: string | null;\n  file_ids?: string[];\n  instructions?: string | null;\n  metadata?: Metadata | null;\n  name?: string | null;\n  tools?: Tool[];\n};\n\nexport type AssistantListParams = {\n  limit?: number;\n  before?: string | null;\n  after?: string | null;\n  order?: 'asc' | 'desc';\n};\n\nexport type AssistantListResponse = {\n  object: string;\n  data: Assistant[];\n  first_id: string;\n  last_id: string;\n  has_more: boolean;\n};\n\nexport type File = {\n  file_id: string;\n  id?: string;\n  temp_file_id?: string;\n  bytes: number;\n  created_at: number;\n  filename: string;\n  object: string;\n  purpose: 'fine-tune' | 'fine-tune-results' | 'assistants' | 'assistants_output';\n};\n", "export enum QueryKeys {\n  messages = 'messages',\n  allConversations = 'allConversations',\n  searchConversations = 'searchConversations',\n  conversation = 'conversation',\n  searchEnabled = 'searchEnabled',\n  user = 'user',\n  name = 'name', // user key name\n  models = 'models',\n  balance = 'balance',\n  endpoints = 'endpoints',\n  presets = 'presets',\n  searchResults = 'searchResults',\n  tokenCount = 'tokenCount',\n  availablePlugins = 'availablePlugins',\n  startupConfig = 'startupConfig',\n  assistants = 'assistants',\n  assistant = 'assistant',\n  endpointsConfigOverride = 'endpointsConfigOverride',\n  files = 'files',\n}\n\nexport enum MutationKeys {\n  imageUpload = 'imageUpload',\n  fileDelete = 'fileDelete',\n  updatePreset = 'updatePreset',\n  deletePreset = 'deletePreset',\n  logoutUser = 'logoutUser',\n  avatarUpload = 'avatarUpload',\n}\n", "import axios from 'axios';\n\nexport function setAcceptLanguageHeader(value: string): void {\n  axios.defaults.headers.common['Accept-Language'] = value;\n}\n\nexport function setTokenHeader(token: string) {\n  axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\n}\n", "export const user = () => '/api/user';\n\nexport const balance = () => '/api/balance';\n\nexport const userPlugins = () => '/api/user/plugins';\n\nexport const messages = (conversationId: string, messageId?: string) =>\n  `/api/messages/${conversationId}${messageId ? `/${messageId}` : ''}`;\n\nconst keysEndpoint = '/api/keys';\n\nexport const keys = () => keysEndpoint;\n\nexport const userKeyQuery = (name: string) => `${keysEndpoint}?name=${name}`;\n\nexport const revokeUserKey = (name: string) => `${keysEndpoint}/${name}`;\n\nexport const revokeAllUserKeys = () => `${keysEndpoint}?all=true`;\n\nexport const abortRequest = (endpoint: string) => `/api/ask/${endpoint}/abort`;\n\nexport const conversations = (pageNumber: string) => `/api/convos?pageNumber=${pageNumber}`;\n\nexport const conversationById = (id: string) => `/api/convos/${id}`;\n\nexport const genTitle = () => '/api/convos/gen_title';\n\nexport const updateConversation = () => '/api/convos/update';\n\nexport const deleteConversation = () => '/api/convos/clear';\n\nexport const search = (q: string, pageNumber: string) =>\n  `/api/search?q=${q}&pageNumber=${pageNumber}`;\n\nexport const searchEnabled = () => '/api/search/enable';\n\nexport const presets = () => '/api/presets';\n\nexport const deletePreset = () => '/api/presets/delete';\n\nexport const aiEndpoints = () => '/api/endpoints';\n\nexport const endpointsConfigOverride = () => '/api/endpoints/config/override';\n\nexport const models = () => '/api/models';\n\nexport const tokenizer = () => '/api/tokenizer';\n\nexport const login = () => '/api/auth/login';\n\nexport const logout = () => '/api/auth/logout';\n\nexport const register = () => '/api/auth/register';\n\nexport const loginFacebook = () => '/api/auth/facebook';\n\nexport const loginGoogle = () => '/api/auth/google';\n\nexport const refreshToken = (retry?: boolean) => `/api/auth/refresh${retry ? '?retry=true' : ''}`;\n\nexport const requestPasswordReset = () => '/api/auth/requestPasswordReset';\n\nexport const resetPassword = () => '/api/auth/resetPassword';\n\nexport const plugins = () => '/api/plugins';\n\nexport const config = () => '/api/config';\n\nexport const assistants = (id?: string) => `/api/assistants${id ? `/${id}` : ''}`;\n\nexport const files = () => '/api/files';\n\nexport const images = () => `${files()}/images`;\n\nexport const avatar = () => `${images()}/avatar`;\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport axios, { AxiosRequestConfig, AxiosError } from 'axios';\nimport { setTokenHeader } from './headers-helpers';\nimport * as endpoints from './api-endpoints';\n\nasync function _get<T>(url: string, options?: AxiosRequestConfig): Promise<T> {\n  const response = await axios.get(url, { ...options });\n  return response.data;\n}\n\nasync function _post(url: string, data?: any) {\n  const response = await axios.post(url, JSON.stringify(data), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n  return response.data;\n}\n\nasync function _postMultiPart(url: string, formData: FormData, options?: AxiosRequestConfig) {\n  const response = await axios.post(url, formData, {\n    ...options,\n    headers: { 'Content-Type': 'multipart/form-data' },\n  });\n  return response.data;\n}\n\nasync function _put(url: string, data?: any) {\n  const response = await axios.put(url, JSON.stringify(data), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n  return response.data;\n}\n\nasync function _delete<T>(url: string): Promise<T> {\n  const response = await axios.delete(url);\n  return response.data;\n}\n\nasync function _deleteWithOptions<T>(url: string, options?: AxiosRequestConfig): Promise<T> {\n  const response = await axios.delete(url, { ...options });\n  return response.data;\n}\n\nasync function _patch(url: string, data?: any) {\n  const response = await axios.patch(url, JSON.stringify(data), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n  return response.data;\n}\n\nlet isRefreshing = false;\nlet failedQueue: { resolve: (value?: any) => void; reject: (reason?: any) => void }[] = [];\n\nconst refreshToken = (retry?: boolean) => _post(endpoints.refreshToken(retry));\n\nconst processQueue = (error: AxiosError | null, token: string | null = null) => {\n  failedQueue.forEach((prom) => {\n    if (error) {\n      prom.reject(error);\n    } else {\n      prom.resolve(token);\n    }\n  });\n  failedQueue = [];\n};\n\naxios.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    if (error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      if (isRefreshing) {\n        try {\n          const token = await new Promise((resolve, reject) => {\n            failedQueue.push({ resolve, reject });\n          });\n          originalRequest.headers['Authorization'] = 'Bearer ' + token;\n          return await axios(originalRequest);\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      }\n\n      isRefreshing = true;\n\n      try {\n        const { token } = await refreshToken(\n          // Handle edge case where we get a blank screen if the initial 401 error is from a refresh token request\n          originalRequest.url?.includes('api/auth/refresh') ? true : false,\n        );\n\n        if (token) {\n          originalRequest.headers['Authorization'] = 'Bearer ' + token;\n          setTokenHeader(token);\n          window.dispatchEvent(new CustomEvent('tokenUpdated', { detail: token }));\n          processQueue(null, token);\n          return await axios(originalRequest);\n        } else {\n          window.location.href = '/login';\n        }\n      } catch (err) {\n        processQueue(err as AxiosError, null);\n        return Promise.reject(err);\n      } finally {\n        isRefreshing = false;\n      }\n    }\n\n    return Promise.reject(error);\n  },\n);\n\nexport default {\n  get: _get,\n  post: _post,\n  postMultiPart: _postMultiPart,\n  put: _put,\n  delete: _delete,\n  deleteWithOptions: _deleteWithOptions,\n  patch: _patch,\n  refreshToken,\n};\n", "import * as f from './types/files';\nimport * as q from './types/queries';\nimport * as m from './types/mutations';\nimport * as a from './types/assistants';\nimport * as t from './types';\nimport * as s from './schemas';\nimport request from './request';\nimport * as endpoints from './api-endpoints';\n\nexport function getConversations(pageNumber: string): Promise<t.TGetConversationsResponse> {\n  return request.get(endpoints.conversations(pageNumber));\n}\n\nexport function abortRequestWithMessage(\n  endpoint: string,\n  abortKey: string,\n  message: string,\n): Promise<void> {\n  return request.post(endpoints.abortRequest(endpoint), { arg: { abortKey, message } });\n}\n\nexport function deleteConversation(payload: t.TDeleteConversationRequest) {\n  //todo: this should be a DELETE request\n  return request.post(endpoints.deleteConversation(), { arg: payload });\n}\n\nexport function clearAllConversations(): Promise<unknown> {\n  return request.post(endpoints.deleteConversation(), { arg: {} });\n}\n\nexport function revokeUserKey(name: string): Promise<unknown> {\n  return request.delete(endpoints.revokeUserKey(name));\n}\n\nexport function revokeAllUserKeys(): Promise<unknown> {\n  return request.delete(endpoints.revokeAllUserKeys());\n}\n\nexport function getMessagesByConvoId(conversationId: string): Promise<s.TMessage[]> {\n  if (conversationId === 'new') {\n    return Promise.resolve([]);\n  }\n  return request.get(endpoints.messages(conversationId));\n}\n\nexport function getConversationById(id: string): Promise<s.TConversation> {\n  return request.get(endpoints.conversationById(id));\n}\n\nexport function updateConversation(\n  payload: t.TUpdateConversationRequest,\n): Promise<t.TUpdateConversationResponse> {\n  return request.post(endpoints.updateConversation(), { arg: payload });\n}\n\nexport function genTitle(payload: m.TGenTitleRequest): Promise<m.TGenTitleResponse> {\n  return request.post(endpoints.genTitle(), payload);\n}\n\nexport function updateMessage(payload: t.TUpdateMessageRequest): Promise<unknown> {\n  const { conversationId, messageId, text } = payload;\n  if (!conversationId) {\n    throw new Error('conversationId is required');\n  }\n\n  return request.put(endpoints.messages(conversationId, messageId), { text });\n}\n\nexport function updateUserKey(payload: t.TUpdateUserKeyRequest) {\n  const { value } = payload;\n  if (!value) {\n    throw new Error('value is required');\n  }\n\n  return request.put(endpoints.keys(), payload);\n}\n\nexport function getPresets(): Promise<s.TPreset[]> {\n  return request.get(endpoints.presets());\n}\n\nexport function createPreset(payload: s.TPreset): Promise<s.TPreset> {\n  return request.post(endpoints.presets(), payload);\n}\n\nexport function updatePreset(payload: s.TPreset): Promise<s.TPreset> {\n  return request.post(endpoints.presets(), payload);\n}\n\nexport function deletePreset(arg: s.TPreset | undefined): Promise<m.PresetDeleteResponse> {\n  return request.post(endpoints.deletePreset(), arg);\n}\n\nexport function getSearchEnabled(): Promise<boolean> {\n  return request.get(endpoints.searchEnabled());\n}\n\nexport function getUser(): Promise<t.TUser> {\n  return request.get(endpoints.user());\n}\n\nexport function getUserBalance(): Promise<string> {\n  return request.get(endpoints.balance());\n}\n\nexport const searchConversations = async (\n  q: string,\n  pageNumber: string,\n): Promise<t.TSearchResults> => {\n  return request.get(endpoints.search(q, pageNumber));\n};\n\nexport const updateTokenCount = (text: string) => {\n  return request.post(endpoints.tokenizer(), { arg: text });\n};\n\nexport const login = (payload: t.TLoginUser) => {\n  return request.post(endpoints.login(), payload);\n};\n\nexport const logout = () => {\n  return request.post(endpoints.logout());\n};\n\nexport const register = (payload: t.TRegisterUser) => {\n  return request.post(endpoints.register(), payload);\n};\n\nexport const userKeyQuery = (name: string): Promise<t.TCheckUserKeyResponse> =>\n  request.get(endpoints.userKeyQuery(name));\n\nexport const getLoginGoogle = () => {\n  return request.get(endpoints.loginGoogle());\n};\n\nexport const requestPasswordReset = (\n  payload: t.TRequestPasswordReset,\n): Promise<t.TRequestPasswordResetResponse> => {\n  return request.post(endpoints.requestPasswordReset(), payload);\n};\n\nexport const resetPassword = (payload: t.TResetPassword) => {\n  return request.post(endpoints.resetPassword(), payload);\n};\n\nexport const getAvailablePlugins = (): Promise<s.TPlugin[]> => {\n  return request.get(endpoints.plugins());\n};\n\nexport const updateUserPlugins = (payload: t.TUpdateUserPlugins) => {\n  return request.post(endpoints.userPlugins(), payload);\n};\n\n/* Config */\n\nexport const getStartupConfig = (): Promise<t.TStartupConfig> => {\n  return request.get(endpoints.config());\n};\n\nexport const getAIEndpoints = (): Promise<t.TEndpointsConfig> => {\n  return request.get(endpoints.aiEndpoints());\n};\n\nexport const getModels = async (): Promise<t.TModelsConfig> => {\n  return request.get(endpoints.models());\n};\n\nexport const getEndpointsConfigOverride = (): Promise<unknown | boolean> => {\n  return request.get(endpoints.endpointsConfigOverride());\n};\n\n/* Assistants */\n\nexport const createAssistant = (data: a.AssistantCreateParams): Promise<a.Assistant> => {\n  return request.post(endpoints.assistants(), data);\n};\n\nexport const getAssistantById = (assistant_id: string): Promise<a.Assistant> => {\n  return request.get(endpoints.assistants(assistant_id));\n};\n\nexport const updateAssistant = (\n  assistant_id: string,\n  data: a.AssistantUpdateParams,\n): Promise<a.Assistant> => {\n  return request.patch(endpoints.assistants(assistant_id), data);\n};\n\nexport const deleteAssistant = (assistant_id: string): Promise<void> => {\n  return request.delete(endpoints.assistants(assistant_id));\n};\n\nexport const listAssistants = (\n  params?: a.AssistantListParams,\n): Promise<a.AssistantListResponse> => {\n  return request.get(endpoints.assistants(), { params });\n};\n\n/* Files */\n\nexport const getFiles = (): Promise<f.TFile[]> => {\n  return request.get(endpoints.files());\n};\n\nexport const uploadImage = (data: FormData): Promise<f.TFileUpload> => {\n  return request.postMultiPart(endpoints.images(), data);\n};\n\nexport const uploadAvatar = (data: FormData): Promise<f.AvatarUploadResponse> => {\n  return request.postMultiPart(endpoints.avatar(), data);\n};\n\nexport const deleteFiles = async (files: f.BatchFile[]): Promise<f.DeleteFilesResponse> =>\n  request.deleteWithOptions(endpoints.files(), {\n    data: { files },\n  });\n\n/* conversations */\n\nexport const listConversations = (\n  params?: q.ConversationListParams,\n): Promise<q.ConversationListResponse> => {\n  // Assuming params has a pageNumber property\n  const pageNumber = params?.pageNumber || '1'; // Default to page 1 if not provided\n  return request.get(endpoints.conversations(pageNumber));\n};\n\nexport const listConversationsByQuery = (\n  params?: q.ConversationListParams & { searchQuery?: string },\n): Promise<q.ConversationListResponse> => {\n  const pageNumber = params?.pageNumber || '1'; // Default to page 1 if not provided\n  const searchQuery = params?.searchQuery || ''; // If no search query is provided, default to an empty string\n  // Update the endpoint to handle a search query\n  if (searchQuery !== '') {\n    return request.get(endpoints.search(searchQuery, pageNumber));\n  } else {\n    return request.get(endpoints.conversations(pageNumber));\n  }\n};\n", "/* eslint-disable */\n/**\n * Copyright (C) 2016 Maxime Petazzoni <maxime.petazzoni@bulix.org>.\n * All rights reserved.\n */\n\nimport request from './request';\nimport { setTokenHeader } from './headers-helpers';\n\nvar SSE = function (url, options) {\n  if (!(this instanceof SSE)) {\n    return new SSE(url, options);\n  }\n\n  this.INITIALIZING = -1;\n  this.CONNECTING = 0;\n  this.OPEN = 1;\n  this.CLOSED = 2;\n\n  this.url = url;\n\n  options = options || {};\n  this.headers = options.headers || {};\n  this.payload = options.payload !== undefined ? options.payload : '';\n  this.method = options.method || (this.payload && 'POST') || 'GET';\n  this.withCredentials = !!options.withCredentials;\n\n  this.FIELD_SEPARATOR = ':';\n  this.listeners = {};\n\n  this.xhr = null;\n  this.readyState = this.INITIALIZING;\n  this.progress = 0;\n  this.chunk = '';\n\n  this.addEventListener = function (type, listener) {\n    if (this.listeners[type] === undefined) {\n      this.listeners[type] = [];\n    }\n\n    if (this.listeners[type].indexOf(listener) === -1) {\n      this.listeners[type].push(listener);\n    }\n  };\n\n  this.removeEventListener = function (type, listener) {\n    if (this.listeners[type] === undefined) {\n      return;\n    }\n\n    var filtered = [];\n    this.listeners[type].forEach(function (element) {\n      if (element !== listener) {\n        filtered.push(element);\n      }\n    });\n    if (filtered.length === 0) {\n      delete this.listeners[type];\n    } else {\n      this.listeners[type] = filtered;\n    }\n  };\n\n  this.dispatchEvent = function (e) {\n    if (!e) {\n      return true;\n    }\n\n    e.source = this;\n\n    var onHandler = 'on' + e.type;\n    if (this.hasOwnProperty(onHandler)) {\n      this[onHandler].call(this, e);\n      if (e.defaultPrevented) {\n        return false;\n      }\n    }\n\n    if (this.listeners[e.type]) {\n      return this.listeners[e.type].every(function (callback) {\n        callback(e);\n        return !e.defaultPrevented;\n      });\n    }\n\n    return true;\n  };\n\n  this._setReadyState = function (state) {\n    var event = new CustomEvent('readystatechange');\n    event.readyState = state;\n    this.readyState = state;\n    this.dispatchEvent(event);\n  };\n\n  this._onStreamFailure = function (e) {\n    var event = new CustomEvent('error');\n    event.data = e.currentTarget.response;\n    this.dispatchEvent(event);\n    this.close();\n  };\n\n  this._onStreamAbort = function (e) {\n    this.dispatchEvent(new CustomEvent('abort'));\n    this.close();\n  };\n\n  this._onStreamProgress = async function (e) {\n    if (!this.xhr) {\n      return;\n    }\n\n    if (this.xhr.status === 401 && !this._retry) {\n      this._retry = true;\n      try {\n        const refreshResponse = await request.refreshToken();\n        this.headers = {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${refreshResponse.token}`,\n        };\n        setTokenHeader(refreshResponse.token);\n        window.dispatchEvent(new CustomEvent('tokenUpdated', { detail: refreshResponse.token }));\n        this.stream();\n      } catch (err) {\n        this._onStreamFailure(e);\n        return;\n      }\n    } else if (this.xhr.status !== 200) {\n      this._onStreamFailure(e);\n      return;\n    }\n\n    if (this.readyState == this.CONNECTING) {\n      this.dispatchEvent(new CustomEvent('open'));\n      this._setReadyState(this.OPEN);\n    }\n\n    var data = this.xhr.responseText.substring(this.progress);\n    this.progress += data.length;\n    data.split(/(\\r\\n|\\r|\\n){2}/g).forEach(\n      function (part) {\n        if (part.trim().length === 0) {\n          this.dispatchEvent(this._parseEventChunk(this.chunk.trim()));\n          this.chunk = '';\n        } else {\n          this.chunk += part;\n        }\n      }.bind(this),\n    );\n  };\n\n  this._onStreamLoaded = function (e) {\n    this._onStreamProgress(e);\n\n    // Parse the last chunk.\n    this.dispatchEvent(this._parseEventChunk(this.chunk));\n    this.chunk = '';\n  };\n\n  /**\n   * Parse a received SSE event chunk into a constructed event object.\n   */\n  this._parseEventChunk = function (chunk) {\n    if (!chunk || chunk.length === 0) {\n      return null;\n    }\n\n    var e = { id: null, retry: null, data: '', event: 'message' };\n    chunk.split(/\\n|\\r\\n|\\r/).forEach(\n      function (line) {\n        line = line.trimRight();\n        var index = line.indexOf(this.FIELD_SEPARATOR);\n        if (index <= 0) {\n          // Line was either empty, or started with a separator and is a comment.\n          // Either way, ignore.\n          return;\n        }\n\n        var field = line.substring(0, index);\n        if (!(field in e)) {\n          return;\n        }\n\n        var value = line.substring(index + 1).trimLeft();\n        if (field === 'data') {\n          e[field] += value;\n        } else {\n          e[field] = value;\n        }\n      }.bind(this),\n    );\n\n    var event = new CustomEvent(e.event);\n    event.data = e.data;\n    event.id = e.id;\n    return event;\n  };\n\n  this._checkStreamClosed = function () {\n    if (!this.xhr) {\n      return;\n    }\n\n    if (this.xhr.readyState === XMLHttpRequest.DONE) {\n      this._setReadyState(this.CLOSED);\n    }\n  };\n\n  this.stream = function () {\n    this._setReadyState(this.CONNECTING);\n\n    this.xhr = new XMLHttpRequest();\n    this.xhr.addEventListener('progress', this._onStreamProgress.bind(this));\n    this.xhr.addEventListener('load', this._onStreamLoaded.bind(this));\n    this.xhr.addEventListener('readystatechange', this._checkStreamClosed.bind(this));\n    this.xhr.addEventListener('error', this._onStreamFailure.bind(this));\n    this.xhr.addEventListener('abort', this._onStreamAbort.bind(this));\n    this.xhr.open(this.method, this.url);\n    for (var header in this.headers) {\n      this.xhr.setRequestHeader(header, this.headers[header]);\n    }\n    this.xhr.withCredentials = this.withCredentials;\n    this.xhr.send(this.payload);\n  };\n\n  this.close = function () {\n    if (this.readyState === this.CLOSED) {\n      return;\n    }\n\n    this.xhr.abort();\n    this.xhr = null;\n    this._setReadyState(this.CLOSED);\n  };\n};\n\nexport { SSE };\n// Export our SSE module for npm.js\n// if (typeof exports !== 'undefined') {\n//   // exports.SSE = SSE;\n//   module.exports = { SSE };\n// }\n", "import type { TSubmission, TMessage, TEndpointOption } from './types';\nimport { tConvoUpdateSchema, EModelEndpoint } from './schemas';\nimport { EndpointURLs } from './config';\n\nexport default function createPayload(submission: TSubmission) {\n  const { conversation, message, messages, endpointOption, isEdited, isContinued } = submission;\n  const { conversationId } = tConvoUpdateSchema.parse(conversation);\n  const { endpoint, endpointType } = endpointOption as {\n    endpoint: EModelEndpoint;\n    endpointType?: EModelEndpoint;\n  };\n\n  let server = EndpointURLs[endpointType ?? endpoint];\n\n  if (isEdited && endpoint === EModelEndpoint.assistant) {\n    server += '/modify';\n  } else if (isEdited) {\n    server = server.replace('/ask/', '/edit/');\n  }\n\n  type Payload = Partial<TMessage> &\n    Partial<TEndpointOption> & {\n      isContinued: boolean;\n      conversationId: string | null;\n      messages?: typeof messages;\n    };\n\n  const payload: Payload = {\n    ...message,\n    ...endpointOption,\n    isContinued: !!(isEdited && isContinued),\n    conversationId,\n  };\n\n  if (endpoint === EModelEndpoint.assistant) {\n    payload.messages = messages;\n  }\n\n  return { server, payload };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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",
  "names": ["EModelEndpoint", "ImageDetail", "endpointSettings", "_a", "google", "model", "default", "maxOutputTokens", "min", "max", "step", "maxGeminiPro", "defaultGeminiPro", "temperature", "topP", "topK", "eModelEndpointSchema", "z", "nativeEnum", "extendedModelEndpointSchema", "union", "string", "imageDetailNumeric", "_b", "low", "auto", "high", "imageDetailValue", "eImageDetailSchema", "tPluginAuthConfigSchema", "object", "authField", "label", "description", "tPluginSchema", "name", "pluginKey", "icon", "authConfig", "array", "authenticated", "boolean", "optional", "isButton", "tExampleSchema", "input", "content", "output", "tAgentOptionsSchema", "agent", "skipCompletion", "number", "tMessageSchema", "messageId", "endpoint", "clientId", "nullable", "conversationId", "parentMessageId", "responseMessageId", "overrideParentMessageId", "bg", "title", "or", "literal", "sender", "text", "generation", "isEdited", "isCreatedByUser", "error", "createdAt", "Date", "toISOString", "updatedAt", "current", "unfinished", "searchResult", "finish_reason", "tConversationSchema", "user", "endpointType", "suggestions", "messages", "tools", "systemMessage", "modelLabel", "examples", "chatGptLabel", "userLabel", "promptPrefix", "context", "top_p", "frequency_penalty", "presence_penalty", "jailbreak", "jailbreakConversationId", "conversationSignature", "invocationId", "toneStyle", "agentOptions", "resendImages", "imageDetail", "assistant_id", "thread_id", "tPresetSchema", "omit", "merge", "presetId", "defaultPreset", "order", "tConvoUpdateSchema", "tPresetUpdateSchema", "openAISchema", "pick", "transform", "obj", "n", "_c", "_d", "_e", "_f", "u", "_g", "_h", "_j", "catch", "googleSchema", "isGeminiPro", "toLowerCase", "includes", "maxOutputTokensMax", "maxOutputTokensDefault", "Math", "__assign", "r", "a", "_k", "bingAISchema", "s", "anthropicSchema", "chatGPTBrowserSchema", "gptPluginsSchema", "p", "removeNullishValues", "newObj", "Object", "keys", "forEach", "key", "FileSources", "assistantSchema", "compactOpenAISchema", "compactGoogleSchema", "compactAnthropicSchema", "compactChatGPTSchema", "compactPluginsSchema", "length", "KnownEndpoints", "fileSourceSchema", "endpointSchema", "refine", "value", "safeParse", "success", "message", "concat", "values", "join", "apiKey", "baseURL", "models", "fetch", "titleConvo", "titleMethod", "titleModel", "summarize", "summaryModel", "forcePrompt", "modelDisplayLabel", "headers", "record", "any", "configSchema", "version", "cache", "fileStrategy", "registration", "socialLogins", "allowedDomains", "endpoints", "custom", "partial", "strict", "CacheKeys", "AuthKeys", "ImageDetailCost", "SettingsTabValues", "defaultEndpoints", "openAI", "assistant", "azureOpenAI", "bingAI", "chatGPTBrowser", "gptPlugins", "anthropic", "alternateName", "defaultModels", "EndpointURLs", "modularEndpoints", "Set", "supportsFiles", "supportsBalanceCheck", "visionModels", "endpointSchemas", "getFirstDefinedValue", "possibleValues", "returnValue", "possibleValues_1", "_i", "Tools", "QueryKeys", "MutationKeys", "parseConvo", "conversation", "schema", "Error", "convo", "parse", "secondaryModels", "getResponseSender", "endpointOption", "compactEndpointSchemas", "parseCompactConvo", "setAcceptLanguageHeader", "axios", "defaults", "common", "setTokenHeader", "token", "keysEndpoint", "conversations", "pageNumber", "search", "q", "assistants", "id", "images", "_post", "url", "data", "post", "JSON", "stringify", "sent", "isRefreshing", "failedQueue", "refreshToken", "retry", "processQueue", "prom", "reject", "resolve", "interceptors", "response", "use", "__awaiter", "o", "i", "originalRequest", "config", "status", "_retry", "Promise", "push", "err_1", "window", "dispatchEvent", "CustomEvent", "detail", "location", "href", "err_2", "request", "get", "options", "postMultiPart", "formData", "put", "delete", "deleteWithOptions", "patch", "abortKey", "arg", "endpoints.assistants", "payload", "files", "endpoints.conversations", "endpoints.messages", "params", "searchQuery", "endpoints.search", "endpoints.images", "SSE", "this", "INITIALIZING", "CONNECTING", "OPEN", "CLOSED", "method", "withCredentials", "FIELD_SEPARATOR", "listeners", "xhr", "readyState", "progress", "chunk", "addEventListener", "type", "listener", "indexOf", "removeEventListener", "filtered", "element", "e", "source", "onHandler", "hasOwnProperty", "call", "defaultPrevented", "every", "callback", "_setReadyState", "state", "event", "_onStreamFailure", "currentTarget", "close", "_onStreamAbort", "_onStreamProgress", "async", "refreshResponse", "Authorization", "stream", "err", "responseText", "substring", "split", "part", "trim", "_parseEventChunk", "bind", "_onStreamLoaded", "line", "index", "trimRight", "field", "trimLeft", "_checkStreamClosed", "XMLHttpRequest", "DONE", "header", "open", "setRequestHeader", "send", "abort", "createPayload", "submission", "isContinued", "server", "replace"]
}
