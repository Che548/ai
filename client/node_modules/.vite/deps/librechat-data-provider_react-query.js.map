{
  "version": 3,
  "sources": ["../../librechat-data-provider/src/api-endpoints.ts", "../../librechat-data-provider/src/request.ts", "../../librechat-data-provider/src/headers-helpers.ts", "../../librechat-data-provider/src/data-service.ts", "../../librechat-data-provider/src/keys.ts", "../../librechat-data-provider/src/react-query/react-query-service.ts", "../../librechat-data-provider/src/react-query/assistants.ts"],
  "sourcesContent": ["export const user = () => '/api/user';\n\nexport const balance = () => '/api/balance';\n\nexport const userPlugins = () => '/api/user/plugins';\n\nexport const messages = (conversationId: string, messageId?: string) =>\n  `/api/messages/${conversationId}${messageId ? `/${messageId}` : ''}`;\n\nconst keysEndpoint = '/api/keys';\n\nexport const keys = () => keysEndpoint;\n\nexport const userKeyQuery = (name: string) => `${keysEndpoint}?name=${name}`;\n\nexport const revokeUserKey = (name: string) => `${keysEndpoint}/${name}`;\n\nexport const revokeAllUserKeys = () => `${keysEndpoint}?all=true`;\n\nexport const abortRequest = (endpoint: string) => `/api/ask/${endpoint}/abort`;\n\nexport const conversations = (pageNumber: string) => `/api/convos?pageNumber=${pageNumber}`;\n\nexport const conversationById = (id: string) => `/api/convos/${id}`;\n\nexport const genTitle = () => '/api/convos/gen_title';\n\nexport const updateConversation = () => '/api/convos/update';\n\nexport const deleteConversation = () => '/api/convos/clear';\n\nexport const search = (q: string, pageNumber: string) =>\n  `/api/search?q=${q}&pageNumber=${pageNumber}`;\n\nexport const searchEnabled = () => '/api/search/enable';\n\nexport const presets = () => '/api/presets';\n\nexport const deletePreset = () => '/api/presets/delete';\n\nexport const aiEndpoints = () => '/api/endpoints';\n\nexport const endpointsConfigOverride = () => '/api/endpoints/config/override';\n\nexport const models = () => '/api/models';\n\nexport const tokenizer = () => '/api/tokenizer';\n\nexport const login = () => '/api/auth/login';\n\nexport const logout = () => '/api/auth/logout';\n\nexport const register = () => '/api/auth/register';\n\nexport const loginFacebook = () => '/api/auth/facebook';\n\nexport const loginGoogle = () => '/api/auth/google';\n\nexport const refreshToken = (retry?: boolean) => `/api/auth/refresh${retry ? '?retry=true' : ''}`;\n\nexport const requestPasswordReset = () => '/api/auth/requestPasswordReset';\n\nexport const resetPassword = () => '/api/auth/resetPassword';\n\nexport const plugins = () => '/api/plugins';\n\nexport const config = () => '/api/config';\n\nexport const assistants = (id?: string) => `/api/assistants${id ? `/${id}` : ''}`;\n\nexport const files = () => '/api/files';\n\nexport const images = () => `${files()}/images`;\n\nexport const avatar = () => `${images()}/avatar`;\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport axios, { AxiosRequestConfig, AxiosError } from 'axios';\nimport { setTokenHeader } from './headers-helpers';\nimport * as endpoints from './api-endpoints';\n\nasync function _get<T>(url: string, options?: AxiosRequestConfig): Promise<T> {\n  const response = await axios.get(url, { ...options });\n  return response.data;\n}\n\nasync function _post(url: string, data?: any) {\n  const response = await axios.post(url, JSON.stringify(data), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n  return response.data;\n}\n\nasync function _postMultiPart(url: string, formData: FormData, options?: AxiosRequestConfig) {\n  const response = await axios.post(url, formData, {\n    ...options,\n    headers: { 'Content-Type': 'multipart/form-data' },\n  });\n  return response.data;\n}\n\nasync function _put(url: string, data?: any) {\n  const response = await axios.put(url, JSON.stringify(data), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n  return response.data;\n}\n\nasync function _delete<T>(url: string): Promise<T> {\n  const response = await axios.delete(url);\n  return response.data;\n}\n\nasync function _deleteWithOptions<T>(url: string, options?: AxiosRequestConfig): Promise<T> {\n  const response = await axios.delete(url, { ...options });\n  return response.data;\n}\n\nasync function _patch(url: string, data?: any) {\n  const response = await axios.patch(url, JSON.stringify(data), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n  return response.data;\n}\n\nlet isRefreshing = false;\nlet failedQueue: { resolve: (value?: any) => void; reject: (reason?: any) => void }[] = [];\n\nconst refreshToken = (retry?: boolean) => _post(endpoints.refreshToken(retry));\n\nconst processQueue = (error: AxiosError | null, token: string | null = null) => {\n  failedQueue.forEach((prom) => {\n    if (error) {\n      prom.reject(error);\n    } else {\n      prom.resolve(token);\n    }\n  });\n  failedQueue = [];\n};\n\naxios.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    if (error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      if (isRefreshing) {\n        try {\n          const token = await new Promise((resolve, reject) => {\n            failedQueue.push({ resolve, reject });\n          });\n          originalRequest.headers['Authorization'] = 'Bearer ' + token;\n          return await axios(originalRequest);\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      }\n\n      isRefreshing = true;\n\n      try {\n        const { token } = await refreshToken(\n          // Handle edge case where we get a blank screen if the initial 401 error is from a refresh token request\n          originalRequest.url?.includes('api/auth/refresh') ? true : false,\n        );\n\n        if (token) {\n          originalRequest.headers['Authorization'] = 'Bearer ' + token;\n          setTokenHeader(token);\n          window.dispatchEvent(new CustomEvent('tokenUpdated', { detail: token }));\n          processQueue(null, token);\n          return await axios(originalRequest);\n        } else {\n          window.location.href = '/login';\n        }\n      } catch (err) {\n        processQueue(err as AxiosError, null);\n        return Promise.reject(err);\n      } finally {\n        isRefreshing = false;\n      }\n    }\n\n    return Promise.reject(error);\n  },\n);\n\nexport default {\n  get: _get,\n  post: _post,\n  postMultiPart: _postMultiPart,\n  put: _put,\n  delete: _delete,\n  deleteWithOptions: _deleteWithOptions,\n  patch: _patch,\n  refreshToken,\n};\n", "import axios from 'axios';\n\nexport function setAcceptLanguageHeader(value: string): void {\n  axios.defaults.headers.common['Accept-Language'] = value;\n}\n\nexport function setTokenHeader(token: string) {\n  axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\n}\n", "import * as f from './types/files';\nimport * as q from './types/queries';\nimport * as m from './types/mutations';\nimport * as a from './types/assistants';\nimport * as t from './types';\nimport * as s from './schemas';\nimport request from './request';\nimport * as endpoints from './api-endpoints';\n\nexport function getConversations(pageNumber: string): Promise<t.TGetConversationsResponse> {\n  return request.get(endpoints.conversations(pageNumber));\n}\n\nexport function abortRequestWithMessage(\n  endpoint: string,\n  abortKey: string,\n  message: string,\n): Promise<void> {\n  return request.post(endpoints.abortRequest(endpoint), { arg: { abortKey, message } });\n}\n\nexport function deleteConversation(payload: t.TDeleteConversationRequest) {\n  //todo: this should be a DELETE request\n  return request.post(endpoints.deleteConversation(), { arg: payload });\n}\n\nexport function clearAllConversations(): Promise<unknown> {\n  return request.post(endpoints.deleteConversation(), { arg: {} });\n}\n\nexport function revokeUserKey(name: string): Promise<unknown> {\n  return request.delete(endpoints.revokeUserKey(name));\n}\n\nexport function revokeAllUserKeys(): Promise<unknown> {\n  return request.delete(endpoints.revokeAllUserKeys());\n}\n\nexport function getMessagesByConvoId(conversationId: string): Promise<s.TMessage[]> {\n  if (conversationId === 'new') {\n    return Promise.resolve([]);\n  }\n  return request.get(endpoints.messages(conversationId));\n}\n\nexport function getConversationById(id: string): Promise<s.TConversation> {\n  return request.get(endpoints.conversationById(id));\n}\n\nexport function updateConversation(\n  payload: t.TUpdateConversationRequest,\n): Promise<t.TUpdateConversationResponse> {\n  return request.post(endpoints.updateConversation(), { arg: payload });\n}\n\nexport function genTitle(payload: m.TGenTitleRequest): Promise<m.TGenTitleResponse> {\n  return request.post(endpoints.genTitle(), payload);\n}\n\nexport function updateMessage(payload: t.TUpdateMessageRequest): Promise<unknown> {\n  const { conversationId, messageId, text } = payload;\n  if (!conversationId) {\n    throw new Error('conversationId is required');\n  }\n\n  return request.put(endpoints.messages(conversationId, messageId), { text });\n}\n\nexport function updateUserKey(payload: t.TUpdateUserKeyRequest) {\n  const { value } = payload;\n  if (!value) {\n    throw new Error('value is required');\n  }\n\n  return request.put(endpoints.keys(), payload);\n}\n\nexport function getPresets(): Promise<s.TPreset[]> {\n  return request.get(endpoints.presets());\n}\n\nexport function createPreset(payload: s.TPreset): Promise<s.TPreset> {\n  return request.post(endpoints.presets(), payload);\n}\n\nexport function updatePreset(payload: s.TPreset): Promise<s.TPreset> {\n  return request.post(endpoints.presets(), payload);\n}\n\nexport function deletePreset(arg: s.TPreset | undefined): Promise<m.PresetDeleteResponse> {\n  return request.post(endpoints.deletePreset(), arg);\n}\n\nexport function getSearchEnabled(): Promise<boolean> {\n  return request.get(endpoints.searchEnabled());\n}\n\nexport function getUser(): Promise<t.TUser> {\n  return request.get(endpoints.user());\n}\n\nexport function getUserBalance(): Promise<string> {\n  return request.get(endpoints.balance());\n}\n\nexport const searchConversations = async (\n  q: string,\n  pageNumber: string,\n): Promise<t.TSearchResults> => {\n  return request.get(endpoints.search(q, pageNumber));\n};\n\nexport const updateTokenCount = (text: string) => {\n  return request.post(endpoints.tokenizer(), { arg: text });\n};\n\nexport const login = (payload: t.TLoginUser) => {\n  return request.post(endpoints.login(), payload);\n};\n\nexport const logout = () => {\n  return request.post(endpoints.logout());\n};\n\nexport const register = (payload: t.TRegisterUser) => {\n  return request.post(endpoints.register(), payload);\n};\n\nexport const userKeyQuery = (name: string): Promise<t.TCheckUserKeyResponse> =>\n  request.get(endpoints.userKeyQuery(name));\n\nexport const getLoginGoogle = () => {\n  return request.get(endpoints.loginGoogle());\n};\n\nexport const requestPasswordReset = (\n  payload: t.TRequestPasswordReset,\n): Promise<t.TRequestPasswordResetResponse> => {\n  return request.post(endpoints.requestPasswordReset(), payload);\n};\n\nexport const resetPassword = (payload: t.TResetPassword) => {\n  return request.post(endpoints.resetPassword(), payload);\n};\n\nexport const getAvailablePlugins = (): Promise<s.TPlugin[]> => {\n  return request.get(endpoints.plugins());\n};\n\nexport const updateUserPlugins = (payload: t.TUpdateUserPlugins) => {\n  return request.post(endpoints.userPlugins(), payload);\n};\n\n/* Config */\n\nexport const getStartupConfig = (): Promise<t.TStartupConfig> => {\n  return request.get(endpoints.config());\n};\n\nexport const getAIEndpoints = (): Promise<t.TEndpointsConfig> => {\n  return request.get(endpoints.aiEndpoints());\n};\n\nexport const getModels = async (): Promise<t.TModelsConfig> => {\n  return request.get(endpoints.models());\n};\n\nexport const getEndpointsConfigOverride = (): Promise<unknown | boolean> => {\n  return request.get(endpoints.endpointsConfigOverride());\n};\n\n/* Assistants */\n\nexport const createAssistant = (data: a.AssistantCreateParams): Promise<a.Assistant> => {\n  return request.post(endpoints.assistants(), data);\n};\n\nexport const getAssistantById = (assistant_id: string): Promise<a.Assistant> => {\n  return request.get(endpoints.assistants(assistant_id));\n};\n\nexport const updateAssistant = (\n  assistant_id: string,\n  data: a.AssistantUpdateParams,\n): Promise<a.Assistant> => {\n  return request.patch(endpoints.assistants(assistant_id), data);\n};\n\nexport const deleteAssistant = (assistant_id: string): Promise<void> => {\n  return request.delete(endpoints.assistants(assistant_id));\n};\n\nexport const listAssistants = (\n  params?: a.AssistantListParams,\n): Promise<a.AssistantListResponse> => {\n  return request.get(endpoints.assistants(), { params });\n};\n\n/* Files */\n\nexport const getFiles = (): Promise<f.TFile[]> => {\n  return request.get(endpoints.files());\n};\n\nexport const uploadImage = (data: FormData): Promise<f.TFileUpload> => {\n  return request.postMultiPart(endpoints.images(), data);\n};\n\nexport const uploadAvatar = (data: FormData): Promise<f.AvatarUploadResponse> => {\n  return request.postMultiPart(endpoints.avatar(), data);\n};\n\nexport const deleteFiles = async (files: f.BatchFile[]): Promise<f.DeleteFilesResponse> =>\n  request.deleteWithOptions(endpoints.files(), {\n    data: { files },\n  });\n\n/* conversations */\n\nexport const listConversations = (\n  params?: q.ConversationListParams,\n): Promise<q.ConversationListResponse> => {\n  // Assuming params has a pageNumber property\n  const pageNumber = params?.pageNumber || '1'; // Default to page 1 if not provided\n  return request.get(endpoints.conversations(pageNumber));\n};\n\nexport const listConversationsByQuery = (\n  params?: q.ConversationListParams & { searchQuery?: string },\n): Promise<q.ConversationListResponse> => {\n  const pageNumber = params?.pageNumber || '1'; // Default to page 1 if not provided\n  const searchQuery = params?.searchQuery || ''; // If no search query is provided, default to an empty string\n  // Update the endpoint to handle a search query\n  if (searchQuery !== '') {\n    return request.get(endpoints.search(searchQuery, pageNumber));\n  } else {\n    return request.get(endpoints.conversations(pageNumber));\n  }\n};\n", "export enum QueryKeys {\n  messages = 'messages',\n  allConversations = 'allConversations',\n  searchConversations = 'searchConversations',\n  conversation = 'conversation',\n  searchEnabled = 'searchEnabled',\n  user = 'user',\n  name = 'name', // user key name\n  models = 'models',\n  balance = 'balance',\n  endpoints = 'endpoints',\n  presets = 'presets',\n  searchResults = 'searchResults',\n  tokenCount = 'tokenCount',\n  availablePlugins = 'availablePlugins',\n  startupConfig = 'startupConfig',\n  assistants = 'assistants',\n  assistant = 'assistant',\n  endpointsConfigOverride = 'endpointsConfigOverride',\n  files = 'files',\n}\n\nexport enum MutationKeys {\n  imageUpload = 'imageUpload',\n  fileDelete = 'fileDelete',\n  updatePreset = 'updatePreset',\n  deletePreset = 'deletePreset',\n  logoutUser = 'logoutUser',\n  avatarUpload = 'avatarUpload',\n}\n", "import {\n  UseQueryOptions,\n  useQuery,\n  useMutation,\n  useQueryClient,\n  UseMutationResult,\n  QueryObserverResult,\n} from '@tanstack/react-query';\nimport * as t from '../types';\nimport * as s from '../schemas';\nimport * as m from '../types/mutations';\nimport * as dataService from '../data-service';\nimport request from '../request';\nimport { QueryKeys } from '../keys';\n\nexport const useAbortRequestWithMessage = (): UseMutationResult<\n  void,\n  Error,\n  { endpoint: string; abortKey: string; message: string }\n> => {\n  const queryClient = useQueryClient();\n  return useMutation(\n    ({ endpoint, abortKey, message }) =>\n      dataService.abortRequestWithMessage(endpoint, abortKey, message),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries([QueryKeys.balance]);\n      },\n    },\n  );\n};\n\nexport const useGetUserQuery = (\n  config?: UseQueryOptions<t.TUser>,\n): QueryObserverResult<t.TUser> => {\n  return useQuery<t.TUser>([QueryKeys.user], () => dataService.getUser(), {\n    refetchOnWindowFocus: false,\n    refetchOnReconnect: false,\n    refetchOnMount: false,\n    retry: false,\n    ...config,\n  });\n};\n\nexport const useGetMessagesByConvoId = <TData = s.TMessage[]>(\n  id: string,\n  config?: UseQueryOptions<s.TMessage[], unknown, TData>,\n): QueryObserverResult<TData> => {\n  return useQuery<s.TMessage[], unknown, TData>(\n    [QueryKeys.messages, id],\n    () => dataService.getMessagesByConvoId(id),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      ...config,\n    },\n  );\n};\n\nexport const useGetUserBalance = (\n  config?: UseQueryOptions<string>,\n): QueryObserverResult<string> => {\n  return useQuery<string>([QueryKeys.balance], () => dataService.getUserBalance(), {\n    refetchOnWindowFocus: true,\n    refetchOnReconnect: true,\n    refetchOnMount: true,\n    ...config,\n  });\n};\n\nexport const useGetConversationByIdQuery = (\n  id: string,\n  config?: UseQueryOptions<s.TConversation>,\n): QueryObserverResult<s.TConversation> => {\n  return useQuery<s.TConversation>(\n    [QueryKeys.conversation, id],\n    () => dataService.getConversationById(id),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      ...config,\n    },\n  );\n};\n\n//This isn't ideal because its just a query and we're using mutation, but it was the only way\n//to make it work with how the Chat component is structured\nexport const useGetConversationByIdMutation = (id: string): UseMutationResult<s.TConversation> => {\n  const queryClient = useQueryClient();\n  return useMutation(() => dataService.getConversationById(id), {\n    // onSuccess: (res: s.TConversation) => {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.conversation, id]);\n    },\n  });\n};\n\nexport const useUpdateMessageMutation = (\n  id: string,\n): UseMutationResult<unknown, unknown, t.TUpdateMessageRequest, unknown> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: t.TUpdateMessageRequest) => dataService.updateMessage(payload), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.messages, id]);\n    },\n  });\n};\n\nexport const useUpdateUserKeysMutation = (): UseMutationResult<\n  t.TUser,\n  unknown,\n  t.TUpdateUserKeyRequest,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: t.TUpdateUserKeyRequest) => dataService.updateUserKey(payload), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.name]);\n    },\n  });\n};\n\nexport const useClearConversationsMutation = (): UseMutationResult<unknown> => {\n  const queryClient = useQueryClient();\n  return useMutation(() => dataService.clearAllConversations(), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.allConversations]);\n    },\n  });\n};\n\nexport const useRevokeUserKeyMutation = (name: string): UseMutationResult<unknown> => {\n  const queryClient = useQueryClient();\n  return useMutation(() => dataService.revokeUserKey(name), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.name]);\n    },\n  });\n};\n\nexport const useRevokeAllUserKeysMutation = (): UseMutationResult<unknown> => {\n  const queryClient = useQueryClient();\n  return useMutation(() => dataService.revokeAllUserKeys(), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.name]);\n    },\n  });\n};\n\nexport const useGetConversationsQuery = (\n  pageNumber: string,\n  config?: UseQueryOptions<t.TGetConversationsResponse>,\n): QueryObserverResult<t.TGetConversationsResponse> => {\n  return useQuery<t.TGetConversationsResponse>(\n    [QueryKeys.allConversations],\n    () => dataService.getConversations(pageNumber),\n    {\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      retry: 1,\n      ...config,\n    },\n  );\n};\n\nexport const useGetSearchEnabledQuery = (\n  config?: UseQueryOptions<boolean>,\n): QueryObserverResult<boolean> => {\n  return useQuery<boolean>([QueryKeys.searchEnabled], () => dataService.getSearchEnabled(), {\n    refetchOnWindowFocus: false,\n    refetchOnReconnect: false,\n    refetchOnMount: false,\n    ...config,\n  });\n};\n\nexport const useGetEndpointsQuery = <TData = t.TEndpointsConfig>(\n  config?: UseQueryOptions<t.TEndpointsConfig, unknown, TData>,\n): QueryObserverResult<TData> => {\n  return useQuery<t.TEndpointsConfig, unknown, TData>(\n    [QueryKeys.endpoints],\n    () => dataService.getAIEndpoints(),\n    {\n      staleTime: Infinity,\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      ...config,\n    },\n  );\n};\n\nexport const useGetModelsQuery = (\n  config?: UseQueryOptions<t.TModelsConfig>,\n): QueryObserverResult<t.TModelsConfig> => {\n  return useQuery<t.TModelsConfig>([QueryKeys.models], () => dataService.getModels(), {\n    staleTime: Infinity,\n    refetchOnWindowFocus: false,\n    refetchOnReconnect: false,\n    refetchOnMount: false,\n    ...config,\n  });\n};\n\nexport const useCreatePresetMutation = (): UseMutationResult<\n  s.TPreset,\n  unknown,\n  s.TPreset,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: s.TPreset) => dataService.createPreset(payload), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.presets]);\n    },\n  });\n};\n\nexport const useDeletePresetMutation = (): UseMutationResult<\n  m.PresetDeleteResponse,\n  unknown,\n  s.TPreset | undefined,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: s.TPreset | undefined) => dataService.deletePreset(payload), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.presets]);\n    },\n  });\n};\n\nexport const useSearchQuery = (\n  searchQuery: string,\n  pageNumber: string,\n  config?: UseQueryOptions<t.TSearchResults>,\n): QueryObserverResult<t.TSearchResults> => {\n  return useQuery<t.TSearchResults>(\n    [QueryKeys.searchResults, pageNumber, searchQuery],\n    () => dataService.searchConversations(searchQuery, pageNumber),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      ...config,\n    },\n  );\n};\n\nexport const useUpdateTokenCountMutation = (): UseMutationResult<\n  t.TUpdateTokenCountResponse,\n  unknown,\n  { text: string },\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation(({ text }: { text: string }) => dataService.updateTokenCount(text), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.tokenCount]);\n    },\n  });\n};\n\nexport const useLoginUserMutation = (): UseMutationResult<\n  t.TLoginResponse,\n  unknown,\n  t.TLoginUser,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: t.TLoginUser) => dataService.login(payload), {\n    onMutate: () => {\n      queryClient.removeQueries();\n      localStorage.removeItem('lastConversationSetup');\n      localStorage.removeItem('lastSelectedModel');\n      localStorage.removeItem('lastSelectedTools');\n      localStorage.removeItem('filesToDelete');\n      localStorage.removeItem('lastAssistant');\n    },\n  });\n};\n\nexport const useRegisterUserMutation = (): UseMutationResult<\n  unknown,\n  unknown,\n  t.TRegisterUser,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: t.TRegisterUser) => dataService.register(payload), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.user]);\n    },\n  });\n};\n\nexport const useRefreshTokenMutation = (): UseMutationResult<\n  t.TRefreshTokenResponse,\n  unknown,\n  unknown,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation(() => request.refreshToken(), {\n    onMutate: () => {\n      queryClient.removeQueries();\n    },\n  });\n};\n\nexport const useUserKeyQuery = (\n  name: string,\n  config?: UseQueryOptions<t.TCheckUserKeyResponse>,\n): QueryObserverResult<t.TCheckUserKeyResponse> => {\n  return useQuery<t.TCheckUserKeyResponse>(\n    [QueryKeys.name, name],\n    () => {\n      if (!name) {\n        return Promise.resolve({ expiresAt: '' });\n      }\n      return dataService.userKeyQuery(name);\n    },\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      retry: false,\n      ...config,\n    },\n  );\n};\n\nexport const useRequestPasswordResetMutation = (): UseMutationResult<\n  t.TRequestPasswordResetResponse,\n  unknown,\n  t.TRequestPasswordReset,\n  unknown\n> => {\n  return useMutation((payload: t.TRequestPasswordReset) =>\n    dataService.requestPasswordReset(payload),\n  );\n};\n\nexport const useResetPasswordMutation = (): UseMutationResult<\n  unknown,\n  unknown,\n  t.TResetPassword,\n  unknown\n> => {\n  return useMutation((payload: t.TResetPassword) => dataService.resetPassword(payload));\n};\n\nexport const useAvailablePluginsQuery = (): QueryObserverResult<s.TPlugin[]> => {\n  return useQuery<s.TPlugin[]>(\n    [QueryKeys.availablePlugins],\n    () => dataService.getAvailablePlugins(),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n    },\n  );\n};\n\nexport const useUpdateUserPluginsMutation = (): UseMutationResult<\n  t.TUser,\n  unknown,\n  t.TUpdateUserPlugins,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: t.TUpdateUserPlugins) => dataService.updateUserPlugins(payload), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.user]);\n    },\n  });\n};\n\nexport const useGetStartupConfig = (): QueryObserverResult<t.TStartupConfig> => {\n  return useQuery<t.TStartupConfig>(\n    [QueryKeys.startupConfig],\n    () => dataService.getStartupConfig(),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n    },\n  );\n};\n", "import { useQuery, useMutation, useQueryClient, useInfiniteQuery } from '@tanstack/react-query';\nimport type {\n  UseQueryOptions,\n  UseMutationResult,\n  QueryObserverResult,\n  UseInfiniteQueryOptions,\n} from '@tanstack/react-query';\nimport * as t from '../types/assistants';\nimport * as dataService from '../data-service';\nimport { QueryKeys } from '../keys';\n\n/**\n * Hook for listing all assistants, with optional parameters provided for pagination and sorting\n */\nexport const useListAssistantsQuery = <TData = t.AssistantListResponse>(\n  params?: t.AssistantListParams,\n  config?: UseQueryOptions<t.AssistantListResponse, unknown, TData>,\n): QueryObserverResult<TData> => {\n  return useQuery<t.AssistantListResponse, unknown, TData>(\n    [QueryKeys.assistants, params],\n    () => dataService.listAssistants(params),\n    {\n      // Example selector to sort them by created_at\n      // select: (res) => {\n      //   return res.data.sort((a, b) => a.created_at - b.created_at);\n      // },\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      retry: false,\n      ...config,\n    },\n  );\n};\n\nexport const useListAssistantsInfiniteQuery = (\n  params?: t.AssistantListParams,\n  config?: UseInfiniteQueryOptions<t.AssistantListResponse, Error>,\n) => {\n  return useInfiniteQuery<t.AssistantListResponse, Error>(\n    ['assistantsList', params],\n    ({ pageParam = '' }) => dataService.listAssistants({ ...params, after: pageParam }),\n    {\n      getNextPageParam: (lastPage) => {\n        // lastPage is of type AssistantListResponse, you can use the has_more and last_id from it directly\n        if (lastPage.has_more) {\n          return lastPage.last_id;\n        }\n        return undefined;\n      },\n      ...config,\n    },\n  );\n};\n\n/**\n * Hook for creating a new assistant\n */\nexport const useCreateAssistantMutation = (): UseMutationResult<\n  t.Assistant,\n  Error,\n  t.AssistantCreateParams\n> => {\n  const queryClient = useQueryClient();\n  return useMutation(\n    (newAssistantData: t.AssistantCreateParams) => dataService.createAssistant(newAssistantData),\n    {\n      onSuccess: () => {\n        // Invalidate and refetch assistants query to update list\n        queryClient.invalidateQueries([QueryKeys.assistants]);\n      },\n    },\n  );\n};\n\n/**\n * Hook for retrieving details about a single assistant\n */\nexport const useGetAssistantByIdQuery = (\n  assistant_id: string,\n  config?: UseQueryOptions<t.Assistant>,\n): QueryObserverResult<t.Assistant> => {\n  return useQuery<t.Assistant>(\n    [QueryKeys.assistant, assistant_id],\n    () => dataService.getAssistantById(assistant_id),\n    {\n      enabled: !!assistant_id, // Query will not execute until the assistant_id exists\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      retry: false,\n      ...config,\n    },\n  );\n};\n\n/**\n * Hook for updating an assistant\n */\nexport const useUpdateAssistantMutation = (): UseMutationResult<\n  t.Assistant,\n  Error,\n  { assistant_id: string; data: t.AssistantUpdateParams }\n> => {\n  const queryClient = useQueryClient();\n  return useMutation(\n    ({ assistant_id, data }: { assistant_id: string; data: t.AssistantUpdateParams }) =>\n      dataService.updateAssistant(assistant_id, data),\n    {\n      onSuccess: (_, { assistant_id }) => {\n        // Invalidate and refetch assistant details query\n        queryClient.invalidateQueries([QueryKeys.assistant, assistant_id]);\n        // Optionally invalidate and refetch list of assistants\n        queryClient.invalidateQueries([QueryKeys.assistants]);\n      },\n    },\n  );\n};\n\n/**\n * Hook for deleting an assistant\n */\nexport const useDeleteAssistantMutation = (): UseMutationResult<\n  void,\n  Error,\n  { assistant_id: string }\n> => {\n  const queryClient = useQueryClient();\n  return useMutation(\n    ({ assistant_id }: { assistant_id: string }) => dataService.deleteAssistant(assistant_id),\n    {\n      onSuccess: () => {\n        // Invalidate and refetch assistant list query\n        queryClient.invalidateQueries([QueryKeys.assistants]);\n      },\n    },\n  );\n};\n"],
  "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",
  "names": ["messages", "conversationId", "messageId", "concat", "keysEndpoint", "search", "q", "pageNumber", "assistants", "id", "_post", "url", "data", "axios", "post", "JSON", "stringify", "headers", "_a", "sent", "isRefreshing", "failedQueue", "refreshToken", "retry", "processQueue", "error", "token", "forEach", "prom", "reject", "resolve", "interceptors", "response", "use", "__awaiter", "u", "i", "c", "originalRequest", "config", "status", "_retry", "Promise", "push", "_b", "err_1", "includes", "defaults", "common", "window", "dispatchEvent", "CustomEvent", "detail", "location", "href", "err_2", "request", "get", "options", "__assign", "postMultiPart", "formData", "put", "delete", "deleteWithOptions", "patch", "revokeUserKey", "name", "revokeAllUserKeys", "getConversationById", "updateUserKey", "payload", "value", "Error", "QueryKeys", "MutationKeys", "userKeyQuery", "listAssistants", "params", "endpoints.assistants", "useAbortRequestWithMessage", "queryClient", "useQueryClient", "useMutation", "endpoint", "abortKey", "message", "arg", "dataService.abortRequestWithMessage", "onSuccess", "invalidateQueries", "balance", "useGetUserQuery", "useQuery", "user", "refetchOnWindowFocus", "refetchOnReconnect", "refetchOnMount", "useGetMessagesByConvoId", "endpoints.messages", "useGetUserBalance", "useGetConversationByIdQuery", "conversation", "dataService.getConversationById", "useGetConversationByIdMutation", "useUpdateMessageMutation", "text", "useUpdateUserKeysMutation", "dataService.updateUserKey", "useClearConversationsMutation", "allConversations", "useRevokeUserKeyMutation", "dataService.revokeUserKey", "useRevokeAllUserKeysMutation", "dataService.revokeAllUserKeys", "useGetConversationsQuery", "useGetSearchEnabledQuery", "searchEnabled", "useGetEndpointsQuery", "endpoints", "staleTime", "Infinity", "useGetModelsQuery", "models", "n", "useCreatePresetMutation", "presets", "useDeletePresetMutation", "useSearchQuery", "searchQuery", "searchResults", "endpoints.search", "useUpdateTokenCountMutation", "tokenCount", "useLoginUserMutation", "onMutate", "removeQueries", "localStorage", "removeItem", "useRegisterUserMutation", "useRefreshTokenMutation", "useUserKeyQuery", "dataService.userKeyQuery", "expiresAt", "useRequestPasswordResetMutation", "useResetPasswordMutation", "useAvailablePluginsQuery", "availablePlugins", "useUpdateUserPluginsMutation", "useGetStartupConfig", "startupConfig", "useListAssistantsQuery", "dataService.listAssistants", "useListAssistantsInfiniteQuery", "useInfiniteQuery", "pageParam", "after", "getNextPageParam", "lastPage", "has_more", "last_id", "useCreateAssistantMutation", "newAssistantData", "useGetAssistantByIdQuery", "assistant_id", "assistant", "enabled", "useUpdateAssistantMutation", "_", "useDeleteAssistantMutation"]
}
