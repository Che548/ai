# Secure default configuration with SSL enabled
# Based on Mozilla SSL Configuration Generator and provided configuration

# Block to handle direct IP access and undefined server names
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;
    ssl_certificate /etc/letsencrypt/live/chat.alexruegg.xyz/fullchain.pem; # Use your cert paths
    ssl_certificate_key /etc/letsencrypt/live/chat.alexruegg.xyz/privkey.pem; # Use your cert paths
    server_name _; # Catch all other domain requests or direct IP access
    return 403; # Forbidden or use 'return 444;' to drop the request immediately without response
}

# Redirect HTTP to HTTPS for your domain
server {
    listen 80;
    listen [::]:80;
    server_name chat.alexruegg.xyz; # Your domain

    # Redirect all HTTP traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS server configuration for your domain
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2; # IPv6 support

    server_name chat.alexruegg.xyz; # Your domain

    # SSL Certificate settings
    ssl_certificate /etc/letsencrypt/live/chat.alexruegg.xyz/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/chat.alexruegg.xyz/privkey.pem; # managed by Certbot

    # Recommended SSL settings
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot or replace with Mozilla's recommended settings
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot or Mozilla's recommended dhparam

    # Increase the client_max_body_size to allow larger file uploads
    client_max_body_size 25M;

    # Proxy settings for the API and front-end
    location /api {
        proxy_pass http://api:3080/api; # or use http://api:3080/api if 'api' is a service name in Docker
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    location / {
        proxy_pass http://api:3080; # or use http://api:3080 if 'api' is a service name in Docker
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}
