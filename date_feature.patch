diff --git a/api/models/schema/assistant.js b/api/models/schema/assistant.js
index 4260b8a4..8a725a05 100644
--- a/api/models/schema/assistant.js
+++ b/api/models/schema/assistant.js
@@ -28,6 +28,10 @@ const assistantSchema = mongoose.Schema(
     },
     file_ids: { type: [String], default: undefined },
     actions: { type: [String], default: undefined },
+    append_today_date: {
+      type: Boolean,
+      default: false,
+    },
   },
   {
     timestamps: true,
diff --git a/api/server/controllers/assistants/chatV1.js b/api/server/controllers/assistants/chatV1.js
index a1a023a4..4a60293a 100644
--- a/api/server/controllers/assistants/chatV1.js
+++ b/api/server/controllers/assistants/chatV1.js
@@ -31,6 +31,7 @@ const getLogStores = require('~/cache/getLogStores');
 const { getModelMaxTokens } = require('~/utils');
 const { getOpenAIClient } = require('./helpers');
 const { logger } = require('~/config');
+const { createRunBody } = require('~/server/services/createRunBody');
 
 const ten_minutes = 1000 * 60 * 10;
 
@@ -59,6 +60,7 @@ const chatV1 = async (req, res) => {
     messageId: _messageId,
     conversationId: convoId,
     parentMessageId: _parentId = Constants.NO_PARENT,
+    clientTimestamp,
   } = req.body;
 
   /** @type {OpenAIClient} */
@@ -304,14 +306,14 @@ const chatV1 = async (req, res) => {
     };
 
     /** @type {CreateRunBody | undefined} */
-    const body = {
+    const body = createRunBody({
       assistant_id,
       model,
-    };
-
-    if (promptPrefix) {
-      body.additional_instructions = promptPrefix;
-    }
+      promptPrefix,
+      instructions,
+      endpointOption,
+      clientTimestamp,
+    });
 
     if (typeof endpointOption.artifactsPrompt === 'string' && endpointOption.artifactsPrompt) {
       body.additional_instructions = `${body.additional_instructions ?? ''}\n${
@@ -319,10 +321,6 @@ const chatV1 = async (req, res) => {
       }`.trim();
     }
 
-    if (instructions) {
-      body.instructions = instructions;
-    }
-
     const getRequestFileIds = async () => {
       let thread_file_ids = [];
       if (convoId) {
@@ -507,21 +505,22 @@ const chatV1 = async (req, res) => {
           return;
         }
 
-        /* NOTE:
-         * By default, a Run will use the model and tools configuration specified in Assistant object,
-         * but you can override most of these when creating the Run for added flexibility:
-         */
         const run = await createRun({
           openai,
           thread_id,
-          body,
+          body: createRunBody({
+            assistant_id,
+            model,
+            promptPrefix,
+            instructions,
+            endpointOption,
+          }),
         });
 
         run_id = run.id;
         await cache.set(cacheKey, `${thread_id}:${run_id}`, ten_minutes);
         sendInitialResponse();
 
-        // todo: retry logic
         response = await runAssistant({ openai, thread_id, run_id });
         return;
       }
diff --git a/api/server/controllers/assistants/chatV2.js b/api/server/controllers/assistants/chatV2.js
index 5ad71b16..f79665a6 100644
--- a/api/server/controllers/assistants/chatV2.js
+++ b/api/server/controllers/assistants/chatV2.js
@@ -30,6 +30,7 @@ const getLogStores = require('~/cache/getLogStores');
 const { getModelMaxTokens } = require('~/utils');
 const { getOpenAIClient } = require('./helpers');
 const { logger } = require('~/config');
+const { createRunBody } = require('~/server/services/createRunBody');
 
 const ten_minutes = 1000 * 60 * 10;
 
@@ -58,6 +59,7 @@ const chatV2 = async (req, res) => {
     messageId: _messageId,
     conversationId: convoId,
     parentMessageId: _parentId = Constants.NO_PARENT,
+    clientTimestamp,
   } = req.body;
 
   /** @type {OpenAIClient} */
@@ -186,24 +188,14 @@ const chatV2 = async (req, res) => {
     };
 
     /** @type {CreateRunBody | undefined} */
-    const body = {
+    const body = createRunBody({
       assistant_id,
       model,
-    };
-
-    if (promptPrefix) {
-      body.additional_instructions = promptPrefix;
-    }
-
-    if (typeof endpointOption.artifactsPrompt === 'string' && endpointOption.artifactsPrompt) {
-      body.additional_instructions = `${body.additional_instructions ?? ''}\n${
-        endpointOption.artifactsPrompt
-      }`.trim();
-    }
-
-    if (instructions) {
-      body.instructions = instructions;
-    }
+      promptPrefix,
+      instructions,
+      endpointOption,
+      clientTimestamp,
+    });
 
     const getRequestFileIds = async () => {
       let thread_file_ids = [];
diff --git a/api/server/controllers/assistants/v1.js b/api/server/controllers/assistants/v1.js
index 5871cce2..571cc8d2 100644
--- a/api/server/controllers/assistants/v1.js
+++ b/api/server/controllers/assistants/v1.js
@@ -19,8 +19,15 @@ const createAssistant = async (req, res) => {
   try {
     const { openai } = await getOpenAIClient({ req, res });
 
-    const { tools = [], endpoint, conversation_starters, ...assistantData } = req.body;
+    const {
+      tools = [],
+      endpoint,
+      conversation_starters,
+      append_today_date,
+      ...assistantData
+    } = req.body;
     delete assistantData.conversation_starters;
+    delete assistantData.append_today_date;
 
     assistantData.tools = tools
       .map((tool) => {
@@ -49,6 +56,9 @@ const createAssistant = async (req, res) => {
     if (conversation_starters) {
       createData.conversation_starters = conversation_starters;
     }
+    if (append_today_date !== undefined) {
+      createData.append_today_date = append_today_date;
+    }
 
     const document = await updateAssistantDoc({ assistant_id: assistant.id }, createData);
 
@@ -60,6 +70,10 @@ const createAssistant = async (req, res) => {
       assistant.conversation_starters = document.conversation_starters;
     }
 
+    if (append_today_date !== undefined) {
+      assistant.append_today_date = append_today_date;
+    }
+
     logger.debug('/assistants/', assistant);
     res.status(201).json(assistant);
   } catch (error) {
@@ -102,7 +116,7 @@ const patchAssistant = async (req, res) => {
     await validateAuthor({ req, openai });
 
     const assistant_id = req.params.id;
-    const { endpoint: _e, conversation_starters, ...updateData } = req.body;
+    const { endpoint: _e, conversation_starters, append_today_date, ...updateData } = req.body;
     updateData.tools = (updateData.tools ?? [])
       .map((tool) => {
         if (typeof tool !== 'string') {
@@ -127,6 +141,11 @@ const patchAssistant = async (req, res) => {
       updatedAssistant.conversation_starters = conversationStartersUpdate.conversation_starters;
     }
 
+    if (append_today_date !== undefined) {
+      await updateAssistantDoc({ assistant_id }, { append_today_date });
+      updatedAssistant.append_today_date = append_today_date;
+    }
+
     res.json(updatedAssistant);
   } catch (error) {
     logger.error('[/assistants/:id] Error updating assistant', error);
@@ -219,6 +238,7 @@ const getAssistantDocuments = async (req, res) => {
         conversation_starters: 1,
         createdAt: 1,
         updatedAt: 1,
+        append_today_date: 1,
       },
     );
 
diff --git a/api/server/controllers/assistants/v2.js b/api/server/controllers/assistants/v2.js
index 7d91e55b..90d272b0 100644
--- a/api/server/controllers/assistants/v2.js
+++ b/api/server/controllers/assistants/v2.js
@@ -16,8 +16,15 @@ const createAssistant = async (req, res) => {
     /** @type {{ openai: OpenAIClient }} */
     const { openai } = await getOpenAIClient({ req, res });
 
-    const { tools = [], endpoint, conversation_starters, ...assistantData } = req.body;
+    const {
+      tools = [],
+      endpoint,
+      conversation_starters,
+      append_today_date,
+      ...assistantData
+    } = req.body;
     delete assistantData.conversation_starters;
+    delete assistantData.append_today_date;
 
     assistantData.tools = tools
       .map((tool) => {
@@ -46,6 +53,9 @@ const createAssistant = async (req, res) => {
     if (conversation_starters) {
       createData.conversation_starters = conversation_starters;
     }
+    if (append_today_date !== undefined) {
+      createData.append_today_date = append_today_date;
+    }
 
     const document = await updateAssistantDoc({ assistant_id: assistant.id }, createData);
 
@@ -56,6 +66,9 @@ const createAssistant = async (req, res) => {
     if (document.conversation_starters) {
       assistant.conversation_starters = document.conversation_starters;
     }
+    if (append_today_date !== undefined) {
+      assistant.append_today_date = append_today_date;
+    }
 
     logger.debug('/assistants/', assistant);
     res.status(201).json(assistant);
@@ -89,6 +102,14 @@ const updateAssistant = async ({ req, openai, assistant_id, updateData }) => {
     delete updateData.conversation_starters;
   }
 
+  if (updateData?.append_today_date !== undefined) {
+    await updateAssistantDoc(
+      { assistant_id: assistant_id },
+      { append_today_date: updateData.append_today_date },
+    );
+    delete updateData.append_today_date;
+  }
+
   let hasFileSearch = false;
   for (const tool of updateData.tools ?? []) {
     let actualTool = typeof tool === 'string' ? req.app.locals.availableTools[tool] : tool;
diff --git a/api/server/middleware/buildEndpointOption.js b/api/server/middleware/buildEndpointOption.js
index 25bb5a3c..5fab0178 100644
--- a/api/server/middleware/buildEndpointOption.js
+++ b/api/server/middleware/buildEndpointOption.js
@@ -76,7 +76,7 @@ async function buildEndpointOption(req, res, next) {
   const builder = isAgentsEndpoint(endpoint) ? (...args) => endpointFn(req, ...args) : endpointFn;
 
   // TODO: use object params
-  req.body.endpointOption = builder(endpoint, parsedBody, endpointType);
+  req.body.endpointOption = await builder(endpoint, parsedBody, endpointType);
 
   // TODO: use `getModelsConfig` only when necessary
   const modelsConfig = await getModelsConfig(req);
diff --git a/api/server/services/Endpoints/assistants/build.js b/api/server/services/Endpoints/assistants/build.js
index d8729e2a..ba69e344 100644
--- a/api/server/services/Endpoints/assistants/build.js
+++ b/api/server/services/Endpoints/assistants/build.js
@@ -1,7 +1,9 @@
 const { removeNullishValues } = require('librechat-data-provider');
 const generateArtifactsPrompt = require('~/app/clients/prompts/artifacts');
+const { getAssistant } = require('~/models/Assistant');
+const logger = require('~/utils/logger');
 
-const buildOptions = (endpoint, parsedBody) => {
+const buildOptions = async (endpoint, parsedBody) => {
   // eslint-disable-next-line no-unused-vars
   const { promptPrefix, assistant_id, iconURL, greeting, spec, artifacts, ...modelOptions } =
     parsedBody;
@@ -15,6 +17,31 @@ const buildOptions = (endpoint, parsedBody) => {
     modelOptions,
   });
 
+  if (assistant_id) {
+    const assistantDoc = await getAssistant({ assistant_id });
+    logger.debug('[assistants/build] assistantDoc:', {
+      found: !!assistantDoc,
+      append_today_date: assistantDoc?.append_today_date,
+      assistant_id,
+    });
+
+    if (assistantDoc) {
+      // Create a clean assistant object with only the needed properties
+      endpointOption.assistant = {
+        append_today_date: assistantDoc.append_today_date,
+        assistant_id: assistantDoc.assistant_id,
+        conversation_starters: assistantDoc.conversation_starters,
+        createdAt: assistantDoc.createdAt,
+        updatedAt: assistantDoc.updatedAt,
+      };
+    }
+  }
+
+  logger.debug('[assistants/build] final endpointOption:', {
+    assistant: endpointOption.assistant,
+    assistant_id: endpointOption.assistant_id,
+  });
+
   if (typeof artifacts === 'string') {
     endpointOption.artifactsPrompt = generateArtifactsPrompt({ endpoint, artifacts });
   }
diff --git a/api/server/services/Endpoints/azureAssistants/build.js b/api/server/services/Endpoints/azureAssistants/build.js
index d8729e2a..6cc920ad 100644
--- a/api/server/services/Endpoints/azureAssistants/build.js
+++ b/api/server/services/Endpoints/azureAssistants/build.js
@@ -1,7 +1,8 @@
 const { removeNullishValues } = require('librechat-data-provider');
 const generateArtifactsPrompt = require('~/app/clients/prompts/artifacts');
+const { getAssistant } = require('~/models/Assistant');
 
-const buildOptions = (endpoint, parsedBody) => {
+const buildOptions = async (endpoint, parsedBody) => {
   // eslint-disable-next-line no-unused-vars
   const { promptPrefix, assistant_id, iconURL, greeting, spec, artifacts, ...modelOptions } =
     parsedBody;
@@ -15,6 +16,19 @@ const buildOptions = (endpoint, parsedBody) => {
     modelOptions,
   });
 
+  if (assistant_id) {
+    const assistantDoc = await getAssistant({ assistant_id });
+    if (assistantDoc) {
+      endpointOption.assistant = {
+        append_today_date: assistantDoc.append_today_date,
+        assistant_id: assistantDoc.assistant_id,
+        conversation_starters: assistantDoc.conversation_starters,
+        createdAt: assistantDoc.createdAt,
+        updatedAt: assistantDoc.updatedAt,
+      };
+    }
+  }
+
   if (typeof artifacts === 'string') {
     endpointOption.artifactsPrompt = generateArtifactsPrompt({ endpoint, artifacts });
   }
diff --git a/api/server/services/createRunBody.js b/api/server/services/createRunBody.js
new file mode 100644
index 00000000..1d942276
--- /dev/null
+++ b/api/server/services/createRunBody.js
@@ -0,0 +1,45 @@
+const createRunBody = ({
+  assistant_id,
+  model,
+  promptPrefix,
+  instructions,
+  endpointOption = {},
+  clientTimestamp,
+}) => {
+  const body = {
+    assistant_id,
+    model,
+  };
+
+  let systemInstructions = '';
+
+  if (endpointOption.assistant?.append_today_date) {
+    const dateStr = clientTimestamp
+      ? clientTimestamp.split('T')[0]
+      : new Date().toISOString().split('T')[0];
+    const timeStr = clientTimestamp
+      ? clientTimestamp.split('T')[1].split('.')[0]
+      : new Date().toTimeString().split(' ')[0];
+    systemInstructions = `Current date and time: ${dateStr} ${timeStr}\n`;
+  }
+
+  if (promptPrefix) {
+    systemInstructions += promptPrefix;
+  }
+
+  if (typeof endpointOption?.artifactsPrompt === 'string' && endpointOption.artifactsPrompt) {
+    systemInstructions += `\n${endpointOption.artifactsPrompt}`;
+  }
+
+  if (systemInstructions.trim()) {
+    body.additional_instructions = systemInstructions.trim();
+  }
+
+  if (instructions) {
+    body.instructions = instructions;
+  }
+
+  return body;
+};
+
+module.exports = { createRunBody };
diff --git a/client/src/common/assistants-types.ts b/client/src/common/assistants-types.ts
index 4e6f4d23..606dc27e 100644
--- a/client/src/common/assistants-types.ts
+++ b/client/src/common/assistants-types.ts
@@ -27,4 +27,5 @@ export type AssistantForm = {
   conversation_starters: string[];
   model: string;
   functions: string[];
+  append_today_date: boolean;
 } & Actions;
diff --git a/client/src/common/types.ts b/client/src/common/types.ts
index 3590b279..cdbd5024 100644
--- a/client/src/common/types.ts
+++ b/client/src/common/types.ts
@@ -293,6 +293,7 @@ export type TAskProps = {
   parentMessageId?: string | null;
   conversationId?: string | null;
   messageId?: string | null;
+  clientTimestamp?: string;
 };
 
 export type TOptions = {
diff --git a/client/src/components/SidePanel/Builder/AppendDateCheckbox.tsx b/client/src/components/SidePanel/Builder/AppendDateCheckbox.tsx
new file mode 100644
index 00000000..3bcc6845
--- /dev/null
+++ b/client/src/components/SidePanel/Builder/AppendDateCheckbox.tsx
@@ -0,0 +1,80 @@
+import { Control, Controller, UseFormSetValue, UseFormGetValues } from 'react-hook-form';
+import { CircleHelpIcon } from '~/components/svg';
+import { useLocalize } from '~/hooks';
+import {
+  HoverCard,
+  HoverCardContent,
+  HoverCardPortal,
+  HoverCardTrigger,
+  Checkbox,
+} from '~/components/ui';
+import { ESide } from '~/common';
+import type { AssistantForm } from '~/common';
+
+interface AppendDateCheckboxProps {
+  control: Control<AssistantForm>;
+  setValue: UseFormSetValue<AssistantForm>;
+  getValues: UseFormGetValues<AssistantForm>;
+}
+
+export default function AppendDateCheckbox({
+  control,
+  setValue,
+  getValues,
+}: AppendDateCheckboxProps) {
+  const localize = useLocalize();
+
+  const handleChange = (checked: boolean) => {
+    setValue('append_today_date', checked, {
+      shouldDirty: true,
+    });
+  };
+
+  return (
+    <div className="mb-6">
+      <HoverCard openDelay={50}>
+        <div className="flex items-center">
+          <Controller
+            name="append_today_date"
+            control={control}
+            render={({ field }) => (
+              <Checkbox
+                {...field}
+                id="append_today_date"
+                checked={field.value}
+                onCheckedChange={handleChange}
+                className="relative float-left mr-2 inline-flex h-4 w-4 cursor-pointer"
+                value={field.value.toString()}
+                aria-labelledby="append-date-label"
+              />
+            )}
+          />
+          <div className="flex items-center space-x-2">
+            <label
+              id="append-date-label"
+              htmlFor="append_today_date"
+              className="form-check-label text-token-text-primary w-full cursor-pointer"
+            >
+              {localize('com_assistants_append_date')}
+            </label>
+            <HoverCardTrigger>
+              <CircleHelpIcon
+                className="h-5 w-5 text-gray-500"
+                aria-label={localize('com_assistants_append_date_tooltip')}
+              />
+            </HoverCardTrigger>
+          </div>
+          <HoverCardPortal>
+            <HoverCardContent side={ESide.Top} className="w-80">
+              <div className="space-y-2">
+                <p className="text-sm text-gray-600 dark:text-gray-300">
+                  {localize('com_assistants_append_date_tooltip')}
+                </p>
+              </div>
+            </HoverCardContent>
+          </HoverCardPortal>
+        </div>
+      </HoverCard>
+    </div>
+  );
+}
diff --git a/client/src/components/SidePanel/Builder/AssistantPanel.tsx b/client/src/components/SidePanel/Builder/AssistantPanel.tsx
index 2788bd98..39be3bdf 100644
--- a/client/src/components/SidePanel/Builder/AssistantPanel.tsx
+++ b/client/src/components/SidePanel/Builder/AssistantPanel.tsx
@@ -19,6 +19,7 @@ import { useAssistantsMapContext, useToastContext } from '~/Providers';
 import { useSelectAssistant, useLocalize } from '~/hooks';
 import { ToolSelectDialog } from '~/components/Tools';
 import CapabilitiesForm from './CapabilitiesForm';
+import AppendDateCheckbox from './AppendDateCheckbox';
 import { SelectDropDown } from '~/components/ui';
 import AssistantAvatar from './AssistantAvatar';
 import AssistantSelect from './AssistantSelect';
@@ -63,7 +64,7 @@ export default function AssistantPanel({
 
   const [showToolDialog, setShowToolDialog] = useState(false);
 
-  const { control, handleSubmit, reset } = methods;
+  const { control, handleSubmit, reset, setValue, getValues } = methods;
   const assistant = useWatch({ control, name: 'assistant' });
   const functions = useWatch({ control, name: 'functions' });
   const assistant_id = useWatch({ control, name: 'id' });
@@ -137,6 +138,7 @@ export default function AssistantPanel({
   }, [assistant]);
 
   const onSubmit = (data: AssistantForm) => {
+    console.log('Form submitted with append_today_date:', data.append_today_date);
     const tools: Array<FunctionTool | string> = [...functions].map((functionName) => {
       if (!functionName.includes(actionDelimiter)) {
         return functionName;
@@ -167,7 +169,7 @@ export default function AssistantPanel({
       instructions,
       conversation_starters: starters,
       model,
-      // file_ids, // TODO: add file handling here
+      append_today_date,
     } = data;
 
     if (assistant_id) {
@@ -181,6 +183,7 @@ export default function AssistantPanel({
           model,
           tools,
           endpoint,
+          append_today_date,
         },
       });
       return;
@@ -195,6 +198,7 @@ export default function AssistantPanel({
       tools,
       endpoint,
       version,
+      append_today_date,
     });
   };
 
@@ -325,6 +329,9 @@ export default function AssistantPanel({
             />
           </div>
 
+          {/* Append Today's Date */}
+          <AppendDateCheckbox control={control} setValue={setValue} getValues={getValues} />
+
           {/* Conversation Starters */}
           <div className="relative mb-6">
             {/* the label of conversation starters is in the component */}
diff --git a/client/src/components/SidePanel/Builder/AssistantSelect.tsx b/client/src/components/SidePanel/Builder/AssistantSelect.tsx
index 31c7c81a..e7ff7e04 100644
--- a/client/src/components/SidePanel/Builder/AssistantSelect.tsx
+++ b/client/src/components/SidePanel/Builder/AssistantSelect.tsx
@@ -37,6 +37,7 @@ const keys = new Set([
   'instructions',
   'conversation_starters',
   'model',
+  'append_today_date',
 ]);
 
 export default function AssistantSelect({
@@ -125,8 +126,11 @@ export default function AssistantSelect({
 
         const assistantDoc = documentsMap?.get(_assistant.id);
         /* If no user updates, use the latest assistant docs */
-        if (assistantDoc && !assistant.conversation_starters) {
-          assistant.conversation_starters = assistantDoc.conversation_starters;
+        if (assistantDoc) {
+          if (!assistant.conversation_starters) {
+            assistant.conversation_starters = assistantDoc.conversation_starters;
+          }
+          assistant.append_today_date = assistantDoc.append_today_date ?? false;
         }
 
         return assistant;
@@ -184,6 +188,11 @@ export default function AssistantSelect({
           return;
         }
 
+        if (name === 'append_today_date') {
+          formValues[name] = !!value;
+          return;
+        }
+
         if (
           name === 'conversation_starters' &&
           Array.isArray(value) &&
diff --git a/client/src/data-provider/mutations.ts b/client/src/data-provider/mutations.ts
index 8b043525..06b2a6a3 100644
--- a/client/src/data-provider/mutations.ts
+++ b/client/src/data-provider/mutations.ts
@@ -833,11 +833,12 @@ export const useUpdateAssistantMutation = (
             if (!prev) {
               return prev;
             }
-            prev.map((doc) => {
+            return prev.map((doc) => {
               if (doc.assistant_id === variables.assistant_id) {
                 return {
                   ...doc,
                   conversation_starters: updatedAssistant.conversation_starters,
+                  append_today_date: variables.data.append_today_date,
                 };
               }
               return doc;
diff --git a/client/src/hooks/Chat/useChatFunctions.ts b/client/src/hooks/Chat/useChatFunctions.ts
index 43a7fcd5..24842c05 100644
--- a/client/src/hooks/Chat/useChatFunctions.ts
+++ b/client/src/hooks/Chat/useChatFunctions.ts
@@ -174,6 +174,7 @@ export default function useChatFunctions({
     const currentMsg: TMessage = {
       text,
       sender: 'User',
+      clientTimestamp: new Date().toLocaleString('sv').replace(' ', 'T'),
       isCreatedByUser: true,
       parentMessageId,
       conversationId,
diff --git a/client/src/hooks/Messages/useSubmitMessage.ts b/client/src/hooks/Messages/useSubmitMessage.ts
index a5adf0f3..f69ee6ee 100644
--- a/client/src/hooks/Messages/useSubmitMessage.ts
+++ b/client/src/hooks/Messages/useSubmitMessage.ts
@@ -45,17 +45,22 @@ export default function useSubmitMessage(helpers?: { clearDraft?: () => void })
       const overrideConvoId = isNewMultiConvo ? v4() : undefined;
       const overrideUserMessageId = hasAdded ? v4() : undefined;
       const rootIndex = addedIndex - 1;
+      const clientTimestamp = new Date().toISOString();
+
       ask({
         text: data.text,
         overrideConvoId: appendIndex(rootIndex, overrideConvoId),
         overrideUserMessageId: appendIndex(rootIndex, overrideUserMessageId),
+        clientTimestamp,
       });
+
       if (hasAdded) {
         askAdditional(
           {
             text: data.text,
             overrideConvoId: appendIndex(addedIndex, overrideConvoId),
             overrideUserMessageId: appendIndex(addedIndex, overrideUserMessageId),
+            clientTimestamp,
           },
           { overrideMessages: rootMessages },
         );
diff --git a/client/src/localization/languages/Ar.ts b/client/src/localization/languages/Ar.ts
index 34ef82e8..a342cad9 100644
--- a/client/src/localization/languages/Ar.ts
+++ b/client/src/localization/languages/Ar.ts
@@ -372,6 +372,9 @@ export default {
   com_assistants_knowledge_disabled:
     'يجب إنشاء المساعد وتمكين المفسر البرمجي أو الاسترجاع وحفظهما قبل تحميل الملفات كمعرفة.',
   com_assistants_image_vision: 'رؤية الصورة',
+  com_assistants_append_date: 'إضافة التاريخ والوقت الحالي',
+  com_assistants_append_date_tooltip:
+    'عند التفعيل، سيتم إضافة التاريخ والوقت الحالي للعميل إلى تعليمات نظام المساعد.',
   com_assistants_code_interpreter: 'مُفسِّر الشفرة',
   com_assistants_code_interpreter_files: 'الملفات التالية متاحة فقط لمفسر الشفرة:',
   com_assistants_retrieval: 'استرداد',
diff --git a/client/src/localization/languages/Br.ts b/client/src/localization/languages/Br.ts
index c1fd4916..8238491c 100644
--- a/client/src/localization/languages/Br.ts
+++ b/client/src/localization/languages/Br.ts
@@ -51,6 +51,9 @@ export default {
   com_assistants_knowledge_disabled:
     'O assistente deve ser criado, e o Interpretador de Código ou Recuperação deve ser habilitado e salvo antes de carregar arquivos como Conhecimento.',
   com_assistants_image_vision: 'Visão de Imagem',
+  com_assistants_append_date: 'Anexar Data e Hora Atual',
+  com_assistants_append_date_tooltip:
+    'Quando ativado, a data e hora atual do cliente serão anexadas às instruções do sistema do assistente.',
   com_assistants_code_interpreter: 'Interpretador de Código',
   com_assistants_code_interpreter_files:
     'Os arquivos abaixo são apenas para o Interpretador de Código:',
diff --git a/client/src/localization/languages/De.ts b/client/src/localization/languages/De.ts
index f1ae7f46..ea0d2c26 100644
--- a/client/src/localization/languages/De.ts
+++ b/client/src/localization/languages/De.ts
@@ -34,6 +34,9 @@ export default {
   com_assistants_knowledge_disabled:
     'Der Assistent muss erstellt und Code-Interpreter oder Abruf müssen aktiviert und gespeichert werden, bevor Dateien als Wissen hochgeladen werden können.',
   com_assistants_image_vision: 'Bildanalyse',
+  com_assistants_append_date: 'Aktuelles Datum & Uhrzeit anhängen',
+  com_assistants_append_date_tooltip:
+    'Wenn aktiviert, werden das aktuelle Client-Datum und die Uhrzeit an die Systemanweisungen des Assistenten angehängt.',
   com_assistants_code_interpreter: 'Code-Interpreter',
   com_assistants_code_interpreter_files: 'Die folgenden Dateien sind nur für den Code-Interpreter:',
   com_assistants_retrieval: 'Abruf',
diff --git a/client/src/localization/languages/Eng.ts b/client/src/localization/languages/Eng.ts
index 6dd32362..e2b92a94 100644
--- a/client/src/localization/languages/Eng.ts
+++ b/client/src/localization/languages/Eng.ts
@@ -66,6 +66,9 @@ export default {
   com_assistants_knowledge_disabled:
     'Assistant must be created, and Code Interpreter or Retrieval must be enabled and saved before uploading files as Knowledge.',
   com_assistants_image_vision: 'Image Vision',
+  com_assistants_append_date: 'Append Current Date & Time',
+  com_assistants_append_date_tooltip:
+    'When enabled, the current client date and time will be appended to the assistant system instructions.',
   com_assistants_code_interpreter: 'Code Interpreter',
   com_assistants_code_interpreter_files: 'Files below are for Code Interpreter only:',
   com_assistants_retrieval: 'Retrieval',
diff --git a/client/src/localization/languages/Es.ts b/client/src/localization/languages/Es.ts
index a23ff0d6..bf8fd723 100644
--- a/client/src/localization/languages/Es.ts
+++ b/client/src/localization/languages/Es.ts
@@ -19,6 +19,9 @@ export default {
   com_assistants_knowledge_disabled:
     'El Asistente debe ser creado, y el Intérprete de Código o la Recuperación deben estar habilitados y guardados antes de subir archivos como Conocimiento.',
   com_assistants_image_vision: 'Visión de Imagen',
+  com_assistants_append_date: 'Añadir Fecha y Hora Actual',
+  com_assistants_append_date_tooltip:
+    'Cuando está habilitado, la fecha y hora actual del cliente se adjuntarán a las instrucciones del sistema del asistente.',
   com_assistants_code_interpreter: 'Intérprete de Código',
   com_assistants_code_interpreter_files:
     'Los siguientes archivos solo están disponibles para el Intérprete de Código:',
diff --git a/client/src/localization/languages/Fi.ts b/client/src/localization/languages/Fi.ts
index 8f8e3bb9..538265ee 100644
--- a/client/src/localization/languages/Fi.ts
+++ b/client/src/localization/languages/Fi.ts
@@ -29,6 +29,9 @@ export default {
   com_assistants_knowledge_disabled:
     'Avustaja täytyy ensin luoda, ja Kooditulkki tai Tiedonhaku täytyy olla päällä ja asetukset tallennettuna, ennen kuin tiedostoja voidaan ladata Tietoihin.',
   com_assistants_image_vision: 'Kuvanäkö',
+  com_assistants_append_date: 'Lisää nykyinen päivämäärä ja aika',
+  com_assistants_append_date_tooltip:
+    'Kun käytössä, nykyinen asiakkaan päivämäärä ja aika lisätään avustajan järjestelmäohjeisiin.',
   com_assistants_code_interpreter: 'Kooditulkki',
   com_assistants_code_interpreter_files: 'Seuraavat tiedostot ovat vain Kooditulkin käytettävissä:',
   com_assistants_retrieval: 'Tiedonhaku',
diff --git a/client/src/localization/languages/Fr.ts b/client/src/localization/languages/Fr.ts
index e35a12b1..ff7ace66 100644
--- a/client/src/localization/languages/Fr.ts
+++ b/client/src/localization/languages/Fr.ts
@@ -479,6 +479,9 @@ export default {
   com_assistants_knowledge_disabled:
     'L\'assistant doit être créé, et l\'interpréteur de code ou la récupération doivent être activés et enregistrés avant de pouvoir importer des fichiers en tant que connaissances.',
   com_assistants_image_vision: 'Vision d\'image',
+  com_assistants_append_date: 'Ajouter la date et l\'heure actuelles',
+  com_assistants_append_date_tooltip:
+    'Lorsque activé, la date et l\'heure actuelles du client seront ajoutées aux instructions du système de l\'assistant.',
   com_assistants_code_interpreter: 'Interpréteur de code',
   com_assistants_code_interpreter_files:
     'Les fichiers suivants sont disponibles uniquement pour l\'interpréteur de code :',
diff --git a/client/src/localization/languages/He.ts b/client/src/localization/languages/He.ts
index 59c96ca2..d7ddbafc 100644
--- a/client/src/localization/languages/He.ts
+++ b/client/src/localization/languages/He.ts
@@ -11,6 +11,9 @@ export default {
     'אם אתה מעלה קבצים תחת ידע, שיחות עם ה-סייען שלך עשויות לכלול תוכן מהקובץ.',
   com_assistants_knowledge_disabled:
     'יש ליצור סייען, ויש להפעיל ולשמור את מתורגמן קוד או אחזור לפני העלאת קבצים כ-ידע.',
+  com_assistants_append_date: 'הוסף תאריך ושעה נוכחיים',
+  com_assistants_append_date_tooltip:
+    'כשמופעל, תאריך ושעה נוכחיים של הלקוח יוספים להוראות מערכת הסייען.',
   com_assistants_code_interpreter: 'מתורגמן קוד',
   com_assistants_code_interpreter_files: 'הקבצים הבאים זמינים רק עבור מתורגמן קוד:',
   com_assistants_retrieval: 'אחזור',
diff --git a/client/src/localization/languages/It.ts b/client/src/localization/languages/It.ts
index 98c95014..02e07907 100644
--- a/client/src/localization/languages/It.ts
+++ b/client/src/localization/languages/It.ts
@@ -27,6 +27,9 @@ export default {
   com_assistants_knowledge_disabled:
     'L\'Assistente deve essere creato, e Code Interpreter o Retrieval devono essere abilitati e salvati prima di caricare file come Conoscenza.',
   com_assistants_image_vision: 'Visione Immagine',
+  com_assistants_append_date: 'Aggiungi Data e Ora Attuali',
+  com_assistants_append_date_tooltip:
+    'Quando attivo, la data e l\'ora attuali del cliente saranno aggiunte alle istruzioni del sistema dell\'Assistente.',
   com_assistants_code_interpreter: 'Interprete Codice',
   com_assistants_code_interpreter_files:
     'I seguenti file sono disponibili solo per Code Interpreter:',
diff --git a/client/src/localization/languages/Jp.ts b/client/src/localization/languages/Jp.ts
index fcd472b6..4d537f3a 100644
--- a/client/src/localization/languages/Jp.ts
+++ b/client/src/localization/languages/Jp.ts
@@ -48,6 +48,9 @@ export default {
   com_assistants_knowledge_disabled:
     'ファイルをナレッジとしてアップロードする前に、アシスタントを作成し、コードインタプリタまたは検索を有効にして保存する必要があります。',
   com_assistants_image_vision: 'イメージビジョン',
+  com_assistants_append_date: '現在の日付と時刻を追加',
+  com_assistants_append_date_tooltip:
+    '有効にすると、現在のクライアントの日付と時刻がアシスタントのシステム指示に追加されます。',
   com_assistants_code_interpreter: 'コードインタプリタ',
   com_assistants_code_interpreter_files: '次のファイルはコードインタプリタでのみ使用できます。',
   com_assistants_retrieval: '検索',
diff --git a/client/src/localization/languages/Ko.ts b/client/src/localization/languages/Ko.ts
index b5fa1d97..9d0f7380 100644
--- a/client/src/localization/languages/Ko.ts
+++ b/client/src/localization/languages/Ko.ts
@@ -703,6 +703,9 @@ export default {
   com_assistants_knowledge_disabled:
     '지식으로 파일을 업로드하기 전에 Assistant를 생성하고 Code Interpreter 또는 Retrieval을 활성화한 후 저장해야 합니다.',
   com_assistants_image_vision: '이미지 인식',
+  com_assistants_append_date: '현재 날짜와 시간 추가',
+  com_assistants_append_date_tooltip:
+    '활성화하면 현재 클라이언트의 날짜와 시간이 어시스턴트의 시스템 지침에 추가됩니다.',
   com_assistants_code_interpreter: '코드 인터프리터',
   com_assistants_code_interpreter_files: '코드 인터프리터에서만 다음 파일을 사용할 수 있습니다:',
   com_assistants_retrieval: '검색',
diff --git a/client/src/localization/languages/Ru.ts b/client/src/localization/languages/Ru.ts
index e2b9a701..83d062e0 100644
--- a/client/src/localization/languages/Ru.ts
+++ b/client/src/localization/languages/Ru.ts
@@ -5,6 +5,9 @@ export default {
   com_sidepanel_assistant_builder: 'Конструктор Ассистента',
   com_sidepanel_attach_files: 'Прикрепить файлы',
   com_sidepanel_manage_files: 'Управление файлами',
+  com_assistants_append_date: 'Добавить текущую дату и время',
+  com_assistants_append_date_tooltip:
+    'Когда включено, текущая дата и время клиента будут добавлены к инструкциям системы Ассистента.',
   com_assistants_code_interpreter: 'Интерпретатор кода',
   com_assistants_code_interpreter_files: 'Следующие файлы доступны только для Интерпретатора кода:',
   com_ui_examples: 'Примеры',
diff --git a/client/src/localization/languages/Tr.ts b/client/src/localization/languages/Tr.ts
index f69ea540..5a5f16e7 100644
--- a/client/src/localization/languages/Tr.ts
+++ b/client/src/localization/languages/Tr.ts
@@ -30,6 +30,9 @@ export default {
   com_assistants_knowledge_disabled:
     'Bilgi olarak dosya yüklemeden önce, Asistan oluşturulmalı ve Kod Yorumlayıcı veya Geri Getirme etkinleştirilip kaydedilmelidir.',
   com_assistants_image_vision: 'Görüntü Vizyonu',
+  com_assistants_append_date: 'Şu anki tarih ve saati ekleyin',
+  com_assistants_append_date_tooltip:
+    'Etkinleştirildiğinde, şu anki müşteri tarihi ve saati, Asistanın sistem talimatlarına eklenir.',
   com_assistants_code_interpreter: 'Kod Yorumlayıcı',
   com_assistants_code_interpreter_files:
     'Aşağıdaki dosyalar yalnızca Kod Yorumlayıcı için kullanılabilir:',
diff --git a/client/src/localization/languages/Zh.ts b/client/src/localization/languages/Zh.ts
index 178b1c22..eb00883a 100644
--- a/client/src/localization/languages/Zh.ts
+++ b/client/src/localization/languages/Zh.ts
@@ -46,6 +46,8 @@ export default {
   com_assistants_knowledge_disabled:
     '必须创建助手，且启用并保存代码解释器或检索，才能将文件作为知识上传。',
   com_assistants_image_vision: '识图',
+  com_assistants_append_date: '添加当前日期和时间',
+  com_assistants_append_date_tooltip: '启用后，当前客户的日期和时间将附加到助手的系统指令中。',
   com_assistants_code_interpreter: '代码解释器',
   com_assistants_code_interpreter_files: '以下文件仅适用于代码解释器：',
   com_assistants_retrieval: '检索',
diff --git a/client/src/localization/languages/ZhTraditional.ts b/client/src/localization/languages/ZhTraditional.ts
index ef2f0324..4bc5466f 100644
--- a/client/src/localization/languages/ZhTraditional.ts
+++ b/client/src/localization/languages/ZhTraditional.ts
@@ -356,6 +356,8 @@ export default {
   com_assistants_knowledge_disabled:
     '助理必須先建立，並啟用及儲存「程式碼解譯器」或「資訊檢索」功能，才能上傳檔案作為知識庫。',
   com_assistants_image_vision: '影像視覺',
+  com_assistants_append_date: '添加當前日期和時間',
+  com_assistants_append_date_tooltip: '啟用後，當前客戶的日期和時間將附加到助手的系統指令中。',
   com_assistants_code_interpreter: '程式碼解譯器',
   com_assistants_code_interpreter_files: '以下檔案僅適用於程式碼解譯器：',
   com_assistants_retrieval: '檢索',
diff --git a/packages/data-provider/src/schemas.ts b/packages/data-provider/src/schemas.ts
index dd23b9aa..02592e2a 100644
--- a/packages/data-provider/src/schemas.ts
+++ b/packages/data-provider/src/schemas.ts
@@ -128,6 +128,7 @@ export const defaultAssistantFormValues = {
   code_interpreter: false,
   image_vision: false,
   retrieval: false,
+  append_today_date: false,
 };
 
 export const defaultAgentFormValues = {
@@ -451,6 +452,7 @@ export const tMessageSchema = z.object({
   isEdited: z.boolean().optional(),
   isCreatedByUser: z.boolean(),
   error: z.boolean().optional(),
+  clientTimestamp: z.string().optional(),
   createdAt: z
     .string()
     .optional()
@@ -485,6 +487,7 @@ export type TMessage = z.input<typeof tMessageSchema> & {
   depth?: number;
   siblingIndex?: number;
   attachments?: TAttachment[];
+  clientTimestamp?: string;
 };
 
 export const coerceNumber = z.union([z.number(), z.string()]).transform((val) => {
@@ -596,6 +599,7 @@ export const tConversationSchema = z.object({
   agentOptions: tAgentOptionsSchema.nullable().optional(),
   /** @deprecated Prefer `modelLabel` over `chatGptLabel` */
   chatGptLabel: z.string().nullable().optional(),
+  append_today_date: z.boolean().optional(),
 });
 
 export const tPresetSchema = tConversationSchema
@@ -849,6 +853,7 @@ export const assistantSchema = tConversationSchema
     iconURL: true,
     greeting: true,
     spec: true,
+    append_today_date: true,
   })
   .transform((obj) => ({
     ...obj,
@@ -859,6 +864,7 @@ export const assistantSchema = tConversationSchema
     iconURL: obj.iconURL ?? undefined,
     greeting: obj.greeting ?? undefined,
     spec: obj.spec ?? undefined,
+    append_today_date: obj.append_today_date ?? false,
   }))
   .catch(() => ({
     model: openAISettings.model.default,
@@ -868,6 +874,7 @@ export const assistantSchema = tConversationSchema
     iconURL: undefined,
     greeting: undefined,
     spec: undefined,
+    append_today_date: false,
   }));
 
 export const compactAssistantSchema = tConversationSchema
diff --git a/packages/data-provider/src/types.ts b/packages/data-provider/src/types.ts
index 38ec1124..b58261a7 100644
--- a/packages/data-provider/src/types.ts
+++ b/packages/data-provider/src/types.ts
@@ -64,6 +64,7 @@ export type TSubmission = {
   initialResponse?: TMessage;
   conversation: Partial<TConversation>;
   endpointOption: TEndpointOption;
+  clientTimestamp?: string;
 };
 
 export type EventSubmission = Omit<TSubmission, 'initialResponse'> & { initialResponse: TMessage };
