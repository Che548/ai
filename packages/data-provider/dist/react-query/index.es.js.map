{"version":3,"file":"index.es.js","sources":["../../src/types/assistants.ts","../../src/schemas.ts","../../src/file-config.ts","../../src/types/files.ts","../../src/models.ts","../../src/config.ts","../../src/api-endpoints.ts","../../src/request.ts","../../src/headers-helpers.ts","../../src/data-service.ts","../../src/keys.ts","../../src/react-query/react-query-service.ts"],"sourcesContent":["import type { OpenAPIV3 } from 'openapi-types';\nimport type { AssistantsEndpoint, AgentProvider } from 'src/schemas';\nimport type { ContentTypes } from './runs';\nimport type { Agents } from './agents';\nimport type { TFile } from './files';\n\nexport type Schema = OpenAPIV3.SchemaObject & { description?: string };\nexport type Reference = OpenAPIV3.ReferenceObject & { description?: string };\n\nexport type Metadata = {\n  avatar?: string;\n  author?: string;\n} & {\n  [key: string]: unknown;\n};\n\nexport enum Tools {\n  execute_code = 'execute_code',\n  code_interpreter = 'code_interpreter',\n  file_search = 'file_search',\n  retrieval = 'retrieval',\n  function = 'function',\n}\n\nexport enum EToolResources {\n  code_interpreter = 'code_interpreter',\n  execute_code = 'execute_code',\n  file_search = 'file_search',\n}\n\nexport type Tool = {\n  [type: string]: Tools;\n};\n\nexport type FunctionTool = {\n  type: Tools;\n  function?: {\n    description: string;\n    name: string;\n    parameters: Record<string, unknown>;\n  };\n};\n\n/**\n * A set of resources that are used by the assistant's tools. The resources are\n * specific to the type of tool. For example, the `code_interpreter` tool requires\n * a list of file IDs, while the `file_search` tool requires a list of vector store\n * IDs.\n */\nexport interface ToolResources {\n  code_interpreter?: CodeInterpreterResource;\n  file_search?: FileSearchResource;\n}\nexport interface CodeInterpreterResource {\n  /**\n   * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made\n   * available to the `code_interpreter`` tool. There can be a maximum of 20 files\n   * associated with the tool.\n   */\n  file_ids?: Array<string>;\n}\n\nexport interface FileSearchResource {\n  /**\n   * The ID of the\n   * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object)\n   * attached to this assistant. There can be a maximum of 1 vector store attached to\n   * the assistant.\n   */\n  vector_store_ids?: Array<string>;\n}\n\n/* Assistant types */\n\nexport type Assistant = {\n  id: string;\n  created_at: number;\n  description: string | null;\n  file_ids?: string[];\n  instructions: string | null;\n  conversation_starters?: string[];\n  metadata: Metadata | null;\n  model: string;\n  name: string | null;\n  object: string;\n  tools?: FunctionTool[];\n  tool_resources?: ToolResources;\n};\n\nexport type TAssistantsMap = Record<AssistantsEndpoint, Record<string, Assistant>>;\n\nexport type AssistantCreateParams = {\n  model: string;\n  description?: string | null;\n  file_ids?: string[];\n  instructions?: string | null;\n  conversation_starters?: string[];\n  metadata?: Metadata | null;\n  name?: string | null;\n  tools?: Array<FunctionTool | string>;\n  endpoint: AssistantsEndpoint;\n  version: number | string;\n};\n\nexport type AssistantUpdateParams = {\n  model?: string;\n  description?: string | null;\n  file_ids?: string[];\n  instructions?: string | null;\n  conversation_starters?: string[] | null;\n  metadata?: Metadata | null;\n  name?: string | null;\n  tools?: Array<FunctionTool | string>;\n  tool_resources?: ToolResources;\n  endpoint: AssistantsEndpoint;\n};\n\nexport type AssistantListParams = {\n  limit?: number;\n  before?: string | null;\n  after?: string | null;\n  order?: 'asc' | 'desc';\n  endpoint: AssistantsEndpoint;\n};\n\nexport type AssistantListResponse = {\n  object: string;\n  data: Assistant[];\n  first_id: string;\n  last_id: string;\n  has_more: boolean;\n};\n\nexport type File = {\n  file_id: string;\n  id?: string;\n  temp_file_id?: string;\n  bytes: number;\n  created_at: number;\n  filename: string;\n  object: string;\n  purpose: 'fine-tune' | 'fine-tune-results' | 'assistants' | 'assistants_output';\n};\n\n/* Agent types */\n\nexport type AgentParameterValue = number | null;\n\nexport type AgentModelParameters = {\n  model?: string;\n  temperature: AgentParameterValue;\n  max_context_tokens: AgentParameterValue;\n  max_output_tokens: AgentParameterValue;\n  top_p: AgentParameterValue;\n  frequency_penalty: AgentParameterValue;\n  presence_penalty: AgentParameterValue;\n};\n\nexport interface AgentToolResources {\n  execute_code?: ExecuteCodeResource;\n  file_search?: AgentFileSearchResource;\n}\nexport interface ExecuteCodeResource {\n  /**\n   * A list of file IDs made available to the `execute_code` tool.\n   * There can be a maximum of 20 files associated with the tool.\n   */\n  file_ids?: Array<string>;\n  /**\n   * A list of files already fetched.\n   */\n  files?: Array<TFile>;\n}\n\nexport interface AgentFileSearchResource {\n  /**\n   * The ID of the vector store attached to this agent. There\n   * can be a maximum of 1 vector store attached to the agent.\n   */\n  vector_store_ids?: Array<string>;\n  /**\n   * A list of file IDs made available to the `file_search` tool.\n   * To be used before vector stores are implemented.\n   */\n  file_ids?: Array<string>;\n  /**\n   * A list of files already fetched.\n   */\n  files?: Array<TFile>;\n}\n\nexport type Agent = {\n  id: string;\n  name: string | null;\n  author?: string | null;\n  /** The original custom endpoint name, lowercased */\n  endpoint?: string | null;\n  authorName?: string | null;\n  description: string | null;\n  created_at: number;\n  avatar: AgentAvatar | null;\n  instructions: string | null;\n  tools?: string[];\n  projectIds?: string[];\n  tool_kwargs?: Record<string, unknown>;\n  metadata?: Record<string, unknown>;\n  provider: AgentProvider;\n  model: string | null;\n  model_parameters: AgentModelParameters;\n  conversation_starters?: string[];\n  isCollaborative?: boolean;\n  tool_resources?: AgentToolResources;\n  agent_ids?: string[];\n  end_after_tools?: boolean;\n  hide_sequential_outputs?: boolean;\n};\n\nexport type TAgentsMap = Record<string, Agent | undefined>;\n\nexport type AgentCreateParams = {\n  name?: string | null;\n  description?: string | null;\n  avatar?: AgentAvatar | null;\n  file_ids?: string[];\n  instructions?: string | null;\n  tools?: Array<FunctionTool | string>;\n  provider: AgentProvider;\n  model: string | null;\n  model_parameters: AgentModelParameters;\n} & Pick<Agent, 'agent_ids' | 'end_after_tools' | 'hide_sequential_outputs'>;\n\nexport type AgentUpdateParams = {\n  name?: string | null;\n  description?: string | null;\n  avatar?: AgentAvatar | null;\n  file_ids?: string[];\n  instructions?: string | null;\n  tools?: Array<FunctionTool | string>;\n  tool_resources?: ToolResources;\n  provider?: AgentProvider;\n  model?: string | null;\n  model_parameters?: AgentModelParameters;\n  projectIds?: string[];\n  removeProjectIds?: string[];\n  isCollaborative?: boolean;\n} & Pick<Agent, 'agent_ids' | 'end_after_tools' | 'hide_sequential_outputs'>;\n\nexport type AgentListParams = {\n  limit?: number;\n  before?: string | null;\n  after?: string | null;\n  order?: 'asc' | 'desc';\n  provider?: AgentProvider;\n};\n\nexport type AgentListResponse = {\n  object: string;\n  data: Agent[];\n  first_id: string;\n  last_id: string;\n  has_more: boolean;\n};\n\nexport type AgentFile = {\n  file_id: string;\n  id?: string;\n  temp_file_id?: string;\n  bytes: number;\n  created_at: number;\n  filename: string;\n  object: string;\n  purpose: 'fine-tune' | 'fine-tune-results' | 'agents' | 'agents_output';\n};\n\n/**\n * Details of the Code Interpreter tool call the run step was involved in.\n * Includes the tool call ID, the code interpreter definition, and the type of tool call.\n */\nexport type CodeToolCall = {\n  id: string; // The ID of the tool call.\n  code_interpreter: {\n    input: string; // The input to the Code Interpreter tool call.\n    outputs: Array<Record<string, unknown>>; // The outputs from the Code Interpreter tool call.\n  };\n  type: 'code_interpreter'; // The type of tool call, always 'code_interpreter'.\n};\n\n/**\n * Details of a Function tool call the run step was involved in.\n * Includes the tool call ID, the function definition, and the type of tool call.\n */\nexport type FunctionToolCall = {\n  id: string; // The ID of the tool call object.\n  function: {\n    arguments: string; // The arguments passed to the function.\n    name: string; // The name of the function.\n    output: string | null; // The output of the function, null if not submitted.\n  };\n  type: 'function'; // The type of tool call, always 'function'.\n};\n\n/**\n * Details of a Retrieval tool call the run step was involved in.\n * Includes the tool call ID and the type of tool call.\n */\nexport type RetrievalToolCall = {\n  id: string; // The ID of the tool call object.\n  retrieval: unknown; // An empty object for now.\n  type: 'retrieval'; // The type of tool call, always 'retrieval'.\n};\n\n/**\n * Details of a Retrieval tool call the run step was involved in.\n * Includes the tool call ID and the type of tool call.\n */\nexport type FileSearchToolCall = {\n  id: string; // The ID of the tool call object.\n  file_search: unknown; // An empty object for now.\n  type: 'file_search'; // The type of tool call, always 'retrieval'.\n};\n\n/**\n * Details of the tool calls involved in a run step.\n * Can be associated with one of three types of tools: `code_interpreter`, `retrieval`, or `function`.\n */\nexport type ToolCallsStepDetails = {\n  tool_calls: Array<CodeToolCall | RetrievalToolCall | FileSearchToolCall | FunctionToolCall>; // An array of tool calls the run step was involved in.\n  type: 'tool_calls'; // Always 'tool_calls'.\n};\n\nexport type ImageFile = TFile & {\n  /**\n   * The [File](https://platform.openai.com/docs/api-reference/files) ID of the image\n   * in the message content.\n   */\n  file_id: string;\n  filename: string;\n  filepath: string;\n  height: number;\n  width: number;\n  /**\n   * Prompt used to generate the image if applicable.\n   */\n  prompt?: string;\n  /**\n   * Additional metadata used to generate or about the image/tool_call.\n   */\n  metadata?: Record<string, unknown>;\n};\n\n// FileCitation.ts\nexport type FileCitation = {\n  end_index: number;\n  file_citation: FileCitationDetails;\n  start_index: number;\n  text: string;\n  type: 'file_citation';\n};\n\nexport type FileCitationDetails = {\n  file_id: string;\n  quote: string;\n};\n\nexport type FilePath = {\n  end_index: number;\n  file_path: FilePathDetails;\n  start_index: number;\n  text: string;\n  type: 'file_path';\n};\n\nexport type FilePathDetails = {\n  file_id: string;\n};\n\nexport type Text = {\n  annotations?: Array<FileCitation | FilePath>;\n  value: string;\n};\n\nexport enum AnnotationTypes {\n  FILE_CITATION = 'file_citation',\n  FILE_PATH = 'file_path',\n}\n\nexport enum StepStatus {\n  IN_PROGRESS = 'in_progress',\n  CANCELLED = 'cancelled',\n  FAILED = 'failed',\n  COMPLETED = 'completed',\n  EXPIRED = 'expired',\n}\n\nexport enum MessageContentTypes {\n  TEXT = 'text',\n  IMAGE_FILE = 'image_file',\n}\n\n//enum for RunStatus\n// The status of the run: queued, in_progress, requires_action, cancelling, cancelled, failed, completed, or expired.\nexport enum RunStatus {\n  QUEUED = 'queued',\n  IN_PROGRESS = 'in_progress',\n  REQUIRES_ACTION = 'requires_action',\n  CANCELLING = 'cancelling',\n  CANCELLED = 'cancelled',\n  FAILED = 'failed',\n  COMPLETED = 'completed',\n  EXPIRED = 'expired',\n}\n\nexport type PartMetadata = {\n  progress?: number;\n  asset_pointer?: string;\n  status?: string;\n  action?: boolean;\n};\n\nexport type ContentPart = (\n  | CodeToolCall\n  | RetrievalToolCall\n  | FileSearchToolCall\n  | FunctionToolCall\n  | Agents.AgentToolCall\n  | ImageFile\n  | Text\n) &\n  PartMetadata;\n\nexport type TMessageContentParts =\n  | { type: ContentTypes.ERROR; text: Text & PartMetadata }\n  | { type: ContentTypes.TEXT; text: string | (Text & PartMetadata); tool_call_ids?: string[] }\n  | {\n      type: ContentTypes.TOOL_CALL;\n      tool_call: (\n        | CodeToolCall\n        | RetrievalToolCall\n        | FileSearchToolCall\n        | FunctionToolCall\n        | Agents.AgentToolCall\n      ) &\n        PartMetadata;\n    }\n  | { type: ContentTypes.IMAGE_FILE; image_file: ImageFile & PartMetadata }\n  | Agents.MessageContentImageUrl;\n\nexport type StreamContentData = TMessageContentParts & {\n  /** The index of the current content part */\n  index: number;\n  /** The current text content was already served but edited to replace elements therein */\n  edited?: boolean;\n};\n\nexport type TContentData = StreamContentData & {\n  messageId: string;\n  conversationId: string;\n  userMessageId: string;\n  thread_id: string;\n  stream?: boolean;\n};\n\nexport const actionDelimiter = '_action_';\nexport const actionDomainSeparator = '---';\nexport const hostImageIdSuffix = '_host_copy';\nexport const hostImageNamePrefix = 'host_copy_';\n\nexport enum AuthTypeEnum {\n  ServiceHttp = 'service_http',\n  OAuth = 'oauth',\n  None = 'none',\n}\n\nexport enum AuthorizationTypeEnum {\n  Bearer = 'bearer',\n  Basic = 'basic',\n  Custom = 'custom',\n}\n\nexport enum TokenExchangeMethodEnum {\n  DefaultPost = 'default_post',\n  BasicAuthHeader = 'basic_auth_header',\n}\n\nexport type ActionAuth = {\n  authorization_type?: AuthorizationTypeEnum;\n  custom_auth_header?: string;\n  type?: AuthTypeEnum;\n  authorization_content_type?: string;\n  authorization_url?: string;\n  client_url?: string;\n  scope?: string;\n  token_exchange_method?: TokenExchangeMethodEnum;\n};\n\nexport type ActionMetadata = {\n  api_key?: string;\n  auth?: ActionAuth;\n  domain?: string;\n  privacy_policy_url?: string;\n  raw_spec?: string;\n  oauth_client_id?: string;\n  oauth_client_secret?: string;\n};\n\n/* Assistant types */\n\nexport type Action = {\n  action_id: string;\n  type?: string;\n  settings?: Record<string, unknown>;\n  metadata: ActionMetadata;\n  version: number | string;\n} & ({ assistant_id: string; agent_id?: never } | { assistant_id?: never; agent_id: string });\n\nexport type AssistantAvatar = {\n  filepath: string;\n  source: string;\n};\n\nexport type AssistantDocument = {\n  user: string;\n  assistant_id: string;\n  conversation_starters?: string[];\n  avatar?: AssistantAvatar;\n  access_level?: number;\n  file_ids?: string[];\n  actions?: string[];\n  createdAt?: Date;\n  updatedAt?: Date;\n};\n\n/* Agent types */\n\nexport type AgentAvatar = {\n  filepath: string;\n  source: string;\n};\n\nexport enum FilePurpose {\n  Vision = 'vision',\n  FineTune = 'fine-tune',\n  FineTuneResults = 'fine-tune-results',\n  Assistants = 'assistants',\n  AssistantsOutput = 'assistants_output',\n}\n\nexport const defaultOrderQuery: {\n  order: 'desc';\n  limit: 100;\n} = {\n  order: 'desc',\n  limit: 100,\n};\n\nexport enum AssistantStreamEvents {\n  ThreadCreated = 'thread.created',\n  ThreadRunCreated = 'thread.run.created',\n  ThreadRunQueued = 'thread.run.queued',\n  ThreadRunInProgress = 'thread.run.in_progress',\n  ThreadRunRequiresAction = 'thread.run.requires_action',\n  ThreadRunCompleted = 'thread.run.completed',\n  ThreadRunFailed = 'thread.run.failed',\n  ThreadRunCancelling = 'thread.run.cancelling',\n  ThreadRunCancelled = 'thread.run.cancelled',\n  ThreadRunExpired = 'thread.run.expired',\n  ThreadRunStepCreated = 'thread.run.step.created',\n  ThreadRunStepInProgress = 'thread.run.step.in_progress',\n  ThreadRunStepCompleted = 'thread.run.step.completed',\n  ThreadRunStepFailed = 'thread.run.step.failed',\n  ThreadRunStepCancelled = 'thread.run.step.cancelled',\n  ThreadRunStepExpired = 'thread.run.step.expired',\n  ThreadRunStepDelta = 'thread.run.step.delta',\n  ThreadMessageCreated = 'thread.message.created',\n  ThreadMessageInProgress = 'thread.message.in_progress',\n  ThreadMessageCompleted = 'thread.message.completed',\n  ThreadMessageIncomplete = 'thread.message.incomplete',\n  ThreadMessageDelta = 'thread.message.delta',\n  ErrorEvent = 'error',\n}\n","import { z } from 'zod';\nimport { Tools } from './types/assistants';\nimport type { TMessageContentParts, FunctionTool, FunctionToolCall } from './types/assistants';\nimport type { TFile } from './types/files';\n\nexport const isUUID = z.string().uuid();\n\nexport enum AuthType {\n  OVERRIDE_AUTH = 'override_auth',\n  USER_PROVIDED = 'user_provided',\n  SYSTEM_DEFINED = 'system_defined',\n}\n\nexport const authTypeSchema = z.nativeEnum(AuthType);\n\nexport enum EModelEndpoint {\n  azureOpenAI = 'azureOpenAI',\n  openAI = 'openAI',\n  bingAI = 'bingAI',\n  chatGPTBrowser = 'chatGPTBrowser',\n  google = 'google',\n  gptPlugins = 'gptPlugins',\n  anthropic = 'anthropic',\n  assistants = 'assistants',\n  azureAssistants = 'azureAssistants',\n  agents = 'agents',\n  custom = 'custom',\n  bedrock = 'bedrock',\n}\n\nexport const paramEndpoints = new Set<EModelEndpoint | string>([\n  EModelEndpoint.agents,\n  EModelEndpoint.openAI,\n  EModelEndpoint.bedrock,\n  EModelEndpoint.azureOpenAI,\n  EModelEndpoint.anthropic,\n  EModelEndpoint.custom,\n]);\n\nexport enum BedrockProviders {\n  AI21 = 'ai21',\n  Amazon = 'amazon',\n  Anthropic = 'anthropic',\n  Cohere = 'cohere',\n  Meta = 'meta',\n  MistralAI = 'mistral',\n  StabilityAI = 'stability',\n}\n\nexport const getModelKey = (endpoint: EModelEndpoint | string, model: string) => {\n  if (endpoint === EModelEndpoint.bedrock) {\n    return model.split('.')[0] as BedrockProviders;\n  }\n  return model;\n};\n\nexport const getSettingsKeys = (endpoint: EModelEndpoint | string, model: string) => {\n  const endpointKey = endpoint;\n  const modelKey = getModelKey(endpointKey, model);\n  const combinedKey = `${endpointKey}-${modelKey}`;\n  return [combinedKey, endpointKey];\n};\n\nexport type AssistantsEndpoint = EModelEndpoint.assistants | EModelEndpoint.azureAssistants;\n\nexport const isAssistantsEndpoint = (_endpoint?: AssistantsEndpoint | null | string): boolean => {\n  const endpoint = _endpoint ?? '';\n  if (!endpoint) {\n    return false;\n  }\n  return endpoint.toLowerCase().endsWith(EModelEndpoint.assistants);\n};\n\nexport type AgentProvider = Exclude<keyof typeof EModelEndpoint, EModelEndpoint.agents> | string;\n\nexport const isAgentsEndpoint = (_endpoint?: EModelEndpoint.agents | null | string): boolean => {\n  const endpoint = _endpoint ?? '';\n  if (!endpoint) {\n    return false;\n  }\n  return endpoint === EModelEndpoint.agents;\n};\n\nexport const isParamEndpoint = (\n  endpoint: EModelEndpoint | string,\n  endpointType?: EModelEndpoint | string,\n): boolean => {\n  if (paramEndpoints.has(endpoint)) {\n    return true;\n  }\n\n  if (endpointType != null) {\n    return paramEndpoints.has(endpointType);\n  }\n\n  return false;\n};\n\nexport enum ImageDetail {\n  low = 'low',\n  auto = 'auto',\n  high = 'high',\n}\n\nexport const imageDetailNumeric = {\n  [ImageDetail.low]: 0,\n  [ImageDetail.auto]: 1,\n  [ImageDetail.high]: 2,\n};\n\nexport const imageDetailValue = {\n  0: ImageDetail.low,\n  1: ImageDetail.auto,\n  2: ImageDetail.high,\n};\n\nexport const eImageDetailSchema = z.nativeEnum(ImageDetail);\n\nexport const defaultAssistantFormValues = {\n  assistant: '',\n  id: '',\n  name: '',\n  description: '',\n  instructions: '',\n  conversation_starters: [],\n  model: '',\n  functions: [],\n  code_interpreter: false,\n  image_vision: false,\n  retrieval: false,\n};\n\nexport const defaultAgentFormValues = {\n  agent: {},\n  id: '',\n  name: '',\n  description: '',\n  instructions: '',\n  model: '',\n  model_parameters: {},\n  tools: [],\n  provider: {},\n  projectIds: [],\n  isCollaborative: false,\n  [Tools.execute_code]: false,\n  [Tools.file_search]: false,\n};\n\nexport const ImageVisionTool: FunctionTool = {\n  type: Tools.function,\n  [Tools.function]: {\n    name: 'image_vision',\n    description: 'Get detailed text descriptions for all current image attachments.',\n    parameters: {\n      type: 'object',\n      properties: {},\n      required: [],\n    },\n  },\n};\n\nexport const isImageVisionTool = (tool: FunctionTool | FunctionToolCall) =>\n  tool.type === 'function' && tool.function?.name === ImageVisionTool.function?.name;\n\nexport const openAISettings = {\n  model: {\n    default: 'gpt-4o',\n  },\n  temperature: {\n    min: 0,\n    max: 2,\n    step: 0.01,\n    default: 1,\n  },\n  top_p: {\n    min: 0,\n    max: 1,\n    step: 0.01,\n    default: 1,\n  },\n  presence_penalty: {\n    min: 0,\n    max: 2,\n    step: 0.01,\n    default: 0,\n  },\n  frequency_penalty: {\n    min: 0,\n    max: 2,\n    step: 0.01,\n    default: 0,\n  },\n  resendFiles: {\n    default: true,\n  },\n  maxContextTokens: {\n    default: undefined,\n  },\n  max_tokens: {\n    default: undefined,\n  },\n  imageDetail: {\n    default: ImageDetail.auto,\n    min: 0,\n    max: 2,\n    step: 1,\n  },\n};\n\nexport const googleSettings = {\n  model: {\n    default: 'gemini-1.5-flash-latest',\n  },\n  maxOutputTokens: {\n    min: 1,\n    max: 8192,\n    step: 1,\n    default: 8192,\n  },\n  temperature: {\n    min: 0,\n    max: 2,\n    step: 0.01,\n    default: 1,\n  },\n  topP: {\n    min: 0,\n    max: 1,\n    step: 0.01,\n    default: 0.95,\n  },\n  topK: {\n    min: 1,\n    max: 40,\n    step: 1,\n    default: 40,\n  },\n};\n\nconst ANTHROPIC_MAX_OUTPUT = 8192;\nconst LEGACY_ANTHROPIC_MAX_OUTPUT = 4096;\nexport const anthropicSettings = {\n  model: {\n    default: 'claude-3-5-sonnet-20241022',\n  },\n  temperature: {\n    min: 0,\n    max: 1,\n    step: 0.01,\n    default: 1,\n  },\n  promptCache: {\n    default: true,\n  },\n  maxOutputTokens: {\n    min: 1,\n    max: ANTHROPIC_MAX_OUTPUT,\n    step: 1,\n    default: ANTHROPIC_MAX_OUTPUT,\n    reset: (modelName: string) => {\n      if (modelName.includes('claude-3-5-sonnet')) {\n        return ANTHROPIC_MAX_OUTPUT;\n      }\n\n      return 4096;\n    },\n    set: (value: number, modelName: string) => {\n      if (!modelName.includes('claude-3-5-sonnet') && value > LEGACY_ANTHROPIC_MAX_OUTPUT) {\n        return LEGACY_ANTHROPIC_MAX_OUTPUT;\n      }\n\n      return value;\n    },\n  },\n  topP: {\n    min: 0,\n    max: 1,\n    step: 0.01,\n    default: 0.7,\n  },\n  topK: {\n    min: 1,\n    max: 40,\n    step: 1,\n    default: 5,\n  },\n  resendFiles: {\n    default: true,\n  },\n  maxContextTokens: {\n    default: undefined,\n  },\n  legacy: {\n    maxOutputTokens: {\n      min: 1,\n      max: LEGACY_ANTHROPIC_MAX_OUTPUT,\n      step: 1,\n      default: LEGACY_ANTHROPIC_MAX_OUTPUT,\n    },\n  },\n};\n\nexport const agentsSettings = {\n  model: {\n    default: 'gpt-3.5-turbo-test',\n  },\n  temperature: {\n    min: 0,\n    max: 1,\n    step: 0.01,\n    default: 1,\n  },\n  top_p: {\n    min: 0,\n    max: 1,\n    step: 0.01,\n    default: 1,\n  },\n  presence_penalty: {\n    min: 0,\n    max: 2,\n    step: 0.01,\n    default: 0,\n  },\n  frequency_penalty: {\n    min: 0,\n    max: 2,\n    step: 0.01,\n    default: 0,\n  },\n  resendFiles: {\n    default: true,\n  },\n  maxContextTokens: {\n    default: undefined,\n  },\n  max_tokens: {\n    default: undefined,\n  },\n  imageDetail: {\n    default: ImageDetail.auto,\n  },\n};\n\nexport const endpointSettings = {\n  [EModelEndpoint.openAI]: openAISettings,\n  [EModelEndpoint.google]: googleSettings,\n  [EModelEndpoint.anthropic]: anthropicSettings,\n  [EModelEndpoint.agents]: agentsSettings,\n  [EModelEndpoint.bedrock]: agentsSettings,\n};\n\nconst google = endpointSettings[EModelEndpoint.google];\n\nexport const eModelEndpointSchema = z.nativeEnum(EModelEndpoint);\n\nexport const extendedModelEndpointSchema = z.union([eModelEndpointSchema, z.string()]);\n\nexport const tPluginAuthConfigSchema = z.object({\n  authField: z.string(),\n  label: z.string(),\n  description: z.string(),\n});\n\nexport type TPluginAuthConfig = z.infer<typeof tPluginAuthConfigSchema>;\n\nexport const tPluginSchema = z.object({\n  name: z.string(),\n  pluginKey: z.string(),\n  description: z.string(),\n  icon: z.string(),\n  authConfig: z.array(tPluginAuthConfigSchema).optional(),\n  authenticated: z.boolean().optional(),\n  isButton: z.boolean().optional(),\n});\n\nexport type TPlugin = z.infer<typeof tPluginSchema>;\n\nexport type TInput = {\n  inputStr: string;\n};\n\nexport type TResPlugin = {\n  plugin: string;\n  input: string;\n  thought: string;\n  loading?: boolean;\n  outputs?: string;\n  latest?: string;\n  inputs?: TInput[];\n};\n\nexport const tExampleSchema = z.object({\n  input: z.object({\n    content: z.string(),\n  }),\n  output: z.object({\n    content: z.string(),\n  }),\n});\n\nexport type TExample = z.infer<typeof tExampleSchema>;\n\nexport enum EAgent {\n  functions = 'functions',\n  classic = 'classic',\n}\n\nexport const agentOptionSettings = {\n  model: {\n    default: 'gpt-4o-mini',\n  },\n  temperature: {\n    min: 0,\n    max: 1,\n    step: 0.01,\n    default: 0,\n  },\n  agent: {\n    default: EAgent.functions,\n    options: [EAgent.functions, EAgent.classic],\n  },\n  skipCompletion: {\n    default: true,\n  },\n};\n\nexport const eAgentOptionsSchema = z.nativeEnum(EAgent);\n\nexport const tAgentOptionsSchema = z.object({\n  agent: z.string().default(EAgent.functions),\n  skipCompletion: z.boolean().default(agentOptionSettings.skipCompletion.default),\n  model: z.string(),\n  temperature: z.number().default(agentOptionSettings.temperature.default),\n});\n\nexport const tMessageSchema = z.object({\n  messageId: z.string(),\n  endpoint: z.string().optional(),\n  clientId: z.string().nullable().optional(),\n  conversationId: z.string().nullable(),\n  parentMessageId: z.string().nullable(),\n  responseMessageId: z.string().nullable().optional(),\n  overrideParentMessageId: z.string().nullable().optional(),\n  bg: z.string().nullable().optional(),\n  model: z.string().nullable().optional(),\n  title: z.string().nullable().or(z.literal('New Chat')).default('New Chat'),\n  sender: z.string().optional(),\n  text: z.string(),\n  generation: z.string().nullable().optional(),\n  isEdited: z.boolean().optional(),\n  isCreatedByUser: z.boolean(),\n  error: z.boolean().optional(),\n  createdAt: z\n    .string()\n    .optional()\n    .default(() => new Date().toISOString()),\n  updatedAt: z\n    .string()\n    .optional()\n    .default(() => new Date().toISOString()),\n  current: z.boolean().optional(),\n  unfinished: z.boolean().optional(),\n  searchResult: z.boolean().optional(),\n  finish_reason: z.string().optional(),\n  /* assistant */\n  thread_id: z.string().optional(),\n  /* frontend components */\n  iconURL: z.string().optional(),\n});\n\nexport type TAttachmentMetadata = { messageId: string; toolCallId: string };\nexport type TAttachment =\n  | (TFile & TAttachmentMetadata)\n  | (Pick<TFile, 'filename' | 'filepath' | 'conversationId'> & {\n      expiresAt: number;\n    } & TAttachmentMetadata);\n\nexport type TMessage = z.input<typeof tMessageSchema> & {\n  children?: TMessage[];\n  plugin?: TResPlugin | null;\n  plugins?: TResPlugin[];\n  content?: TMessageContentParts[];\n  files?: Partial<TFile>[];\n  depth?: number;\n  siblingIndex?: number;\n  attachments?: TAttachment[];\n};\n\nexport const coerceNumber = z.union([z.number(), z.string()]).transform((val) => {\n  if (typeof val === 'string') {\n    return val.trim() === '' ? undefined : parseFloat(val);\n  }\n  return val;\n});\n\ntype DocumentTypeValue =\n  | null\n  | boolean\n  | number\n  | string\n  | DocumentTypeValue[]\n  | { [key: string]: DocumentTypeValue };\n\nconst DocumentType: z.ZodType<DocumentTypeValue> = z.lazy(() =>\n  z.union([\n    z.null(),\n    z.boolean(),\n    z.number(),\n    z.string(),\n    z.array(z.lazy(() => DocumentType)),\n    z.record(z.lazy(() => DocumentType)),\n  ]),\n);\n\nexport const tConversationSchema = z.object({\n  conversationId: z.string().nullable(),\n  endpoint: eModelEndpointSchema.nullable(),\n  endpointType: eModelEndpointSchema.optional(),\n  isArchived: z.boolean().optional(),\n  title: z.string().nullable().or(z.literal('New Chat')).default('New Chat'),\n  user: z.string().optional(),\n  messages: z.array(z.string()).optional(),\n  tools: z.union([z.array(tPluginSchema), z.array(z.string())]).optional(),\n  modelLabel: z.string().nullable().optional(),\n  userLabel: z.string().optional(),\n  model: z.string().nullable().optional(),\n  promptPrefix: z.string().nullable().optional(),\n  temperature: z.number().optional(),\n  topP: z.number().optional(),\n  topK: z.number().optional(),\n  top_p: z.number().optional(),\n  frequency_penalty: z.number().optional(),\n  presence_penalty: z.number().optional(),\n  parentMessageId: z.string().optional(),\n  maxOutputTokens: coerceNumber.optional(),\n  maxContextTokens: coerceNumber.optional(),\n  max_tokens: coerceNumber.optional(),\n  /* Anthropic */\n  promptCache: z.boolean().optional(),\n  system: z.string().optional(),\n  /* artifacts */\n  artifacts: z.string().optional(),\n  /* google */\n  context: z.string().nullable().optional(),\n  examples: z.array(tExampleSchema).optional(),\n  /* DB */\n  tags: z.array(z.string()).optional(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n  /* Files */\n  file_ids: z.array(z.string()).optional(),\n  /* vision */\n  resendFiles: z.boolean().optional(),\n  imageDetail: eImageDetailSchema.optional(),\n  /* assistant */\n  assistant_id: z.string().optional(),\n  /* agents */\n  agent_id: z.string().optional(),\n  /* AWS Bedrock */\n  region: z.string().optional(),\n  maxTokens: coerceNumber.optional(),\n  additionalModelRequestFields: DocumentType.optional(),\n  /* assistant + agents */\n  instructions: z.string().optional(),\n  additional_instructions: z.string().optional(),\n  /** Used to overwrite active conversation settings when saving a Preset */\n  presetOverride: z.record(z.unknown()).optional(),\n  stop: z.array(z.string()).optional(),\n  /* frontend components */\n  iconURL: z.string().optional(),\n  greeting: z.string().optional(),\n  spec: z.string().optional(),\n  /*\n  Deprecated fields\n  */\n  /** @deprecated */\n  suggestions: z.array(z.string()).optional(),\n  /** @deprecated */\n  systemMessage: z.string().nullable().optional(),\n  /** @deprecated */\n  jailbreak: z.boolean().optional(),\n  /** @deprecated */\n  jailbreakConversationId: z.string().nullable().optional(),\n  /** @deprecated */\n  conversationSignature: z.string().nullable().optional(),\n  /** @deprecated */\n  clientId: z.string().nullable().optional(),\n  /** @deprecated */\n  invocationId: z.number().nullable().optional(),\n  /** @deprecated */\n  toneStyle: z.string().nullable().optional(),\n  /** @deprecated */\n  resendImages: z.boolean().optional(),\n  /** @deprecated */\n  agentOptions: tAgentOptionsSchema.nullable().optional(),\n  /** @deprecated Prefer `modelLabel` over `chatGptLabel` */\n  chatGptLabel: z.string().nullable().optional(),\n});\n\nexport const tPresetSchema = tConversationSchema\n  .omit({\n    conversationId: true,\n    createdAt: true,\n    updatedAt: true,\n    title: true,\n  })\n  .merge(\n    z.object({\n      conversationId: z.string().nullable().optional(),\n      presetId: z.string().nullable().optional(),\n      title: z.string().nullable().optional(),\n      defaultPreset: z.boolean().optional(),\n      order: z.number().optional(),\n      endpoint: extendedModelEndpointSchema.nullable(),\n    }),\n  );\n\nexport const tConvoUpdateSchema = tConversationSchema.merge(\n  z.object({\n    endpoint: extendedModelEndpointSchema.nullable(),\n  }),\n);\n\nexport const tPresetUpdateSchema = tConversationSchema.merge(\n  z.object({\n    endpoint: extendedModelEndpointSchema.nullable(),\n  }),\n);\n\nexport type TPreset = z.infer<typeof tPresetSchema>;\n\nexport type TSetOption = (\n  param: number | string,\n) => (newValue: number | string | boolean | string[] | Partial<TPreset>) => void;\n\nexport type TConversation = z.infer<typeof tConversationSchema> & {\n  presetOverride?: Partial<TPreset>;\n};\n\nexport const tSharedLinkSchema = z.object({\n  conversationId: z.string(),\n  shareId: z.string(),\n  messages: z.array(z.string()),\n  isAnonymous: z.boolean(),\n  isPublic: z.boolean(),\n  isVisible: z.boolean(),\n  title: z.string(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n});\nexport type TSharedLink = z.infer<typeof tSharedLinkSchema>;\n\nexport const tConversationTagSchema = z.object({\n  _id: z.string(),\n  user: z.string(),\n  tag: z.string(),\n  description: z.string().optional(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n  count: z.number(),\n  position: z.number(),\n});\nexport type TConversationTag = z.infer<typeof tConversationTagSchema>;\n\nexport const googleSchema = tConversationSchema\n  .pick({\n    model: true,\n    modelLabel: true,\n    promptPrefix: true,\n    examples: true,\n    temperature: true,\n    maxOutputTokens: true,\n    artifacts: true,\n    topP: true,\n    topK: true,\n    iconURL: true,\n    greeting: true,\n    spec: true,\n    maxContextTokens: true,\n  })\n  .transform((obj) => {\n    return {\n      ...obj,\n      model: obj.model ?? google.model.default,\n      modelLabel: obj.modelLabel ?? null,\n      promptPrefix: obj.promptPrefix ?? null,\n      examples: obj.examples ?? [{ input: { content: '' }, output: { content: '' } }],\n      temperature: obj.temperature ?? google.temperature.default,\n      maxOutputTokens: obj.maxOutputTokens ?? google.maxOutputTokens.default,\n      topP: obj.topP ?? google.topP.default,\n      topK: obj.topK ?? google.topK.default,\n      iconURL: obj.iconURL ?? undefined,\n      greeting: obj.greeting ?? undefined,\n      spec: obj.spec ?? undefined,\n      maxContextTokens: obj.maxContextTokens ?? undefined,\n    };\n  })\n  .catch(() => ({\n    model: google.model.default,\n    modelLabel: null,\n    promptPrefix: null,\n    examples: [{ input: { content: '' }, output: { content: '' } }],\n    temperature: google.temperature.default,\n    maxOutputTokens: google.maxOutputTokens.default,\n    topP: google.topP.default,\n    topK: google.topK.default,\n    iconURL: undefined,\n    greeting: undefined,\n    spec: undefined,\n    maxContextTokens: undefined,\n  }));\n\nexport const bingAISchema = tConversationSchema\n  .pick({\n    jailbreak: true,\n    systemMessage: true,\n    context: true,\n    toneStyle: true,\n    jailbreakConversationId: true,\n    conversationSignature: true,\n    clientId: true,\n    invocationId: true,\n  })\n  .transform((obj) => ({\n    ...obj,\n    model: '',\n    jailbreak: obj.jailbreak ?? false,\n    systemMessage: obj.systemMessage ?? null,\n    context: obj.context ?? null,\n    toneStyle: obj.toneStyle ?? 'creative',\n    jailbreakConversationId: obj.jailbreakConversationId ?? null,\n    conversationSignature: obj.conversationSignature ?? null,\n    clientId: obj.clientId ?? null,\n    invocationId: obj.invocationId ?? 1,\n  }))\n  .catch(() => ({\n    model: '',\n    jailbreak: false,\n    systemMessage: null,\n    context: null,\n    toneStyle: 'creative',\n    jailbreakConversationId: null,\n    conversationSignature: null,\n    clientId: null,\n    invocationId: 1,\n  }));\n\nexport const chatGPTBrowserSchema = tConversationSchema\n  .pick({\n    model: true,\n  })\n  .transform((obj) => ({\n    ...obj,\n    model: obj.model ?? 'text-davinci-002-render-sha',\n  }))\n  .catch(() => ({\n    model: 'text-davinci-002-render-sha',\n  }));\n\nexport const gptPluginsSchema = tConversationSchema\n  .pick({\n    model: true,\n    modelLabel: true,\n    chatGptLabel: true,\n    promptPrefix: true,\n    temperature: true,\n    artifacts: true,\n    top_p: true,\n    presence_penalty: true,\n    frequency_penalty: true,\n    tools: true,\n    agentOptions: true,\n    iconURL: true,\n    greeting: true,\n    spec: true,\n    maxContextTokens: true,\n  })\n  .transform((obj) => {\n    const result = {\n      ...obj,\n      model: obj.model ?? 'gpt-3.5-turbo',\n      chatGptLabel: obj.chatGptLabel ?? obj.modelLabel ?? null,\n      promptPrefix: obj.promptPrefix ?? null,\n      temperature: obj.temperature ?? 0.8,\n      top_p: obj.top_p ?? 1,\n      presence_penalty: obj.presence_penalty ?? 0,\n      frequency_penalty: obj.frequency_penalty ?? 0,\n      tools: obj.tools ?? [],\n      agentOptions: obj.agentOptions ?? {\n        agent: EAgent.functions,\n        skipCompletion: true,\n        model: 'gpt-3.5-turbo',\n        temperature: 0,\n      },\n      iconURL: obj.iconURL ?? undefined,\n      greeting: obj.greeting ?? undefined,\n      spec: obj.spec ?? undefined,\n      maxContextTokens: obj.maxContextTokens ?? undefined,\n    };\n\n    if (obj.modelLabel != null && obj.modelLabel !== '') {\n      result.modelLabel = null;\n    }\n\n    return result;\n  })\n  .catch(() => ({\n    model: 'gpt-3.5-turbo',\n    chatGptLabel: null,\n    promptPrefix: null,\n    temperature: 0.8,\n    top_p: 1,\n    presence_penalty: 0,\n    frequency_penalty: 0,\n    tools: [],\n    agentOptions: {\n      agent: EAgent.functions,\n      skipCompletion: true,\n      model: 'gpt-3.5-turbo',\n      temperature: 0,\n    },\n    iconURL: undefined,\n    greeting: undefined,\n    spec: undefined,\n    maxContextTokens: undefined,\n  }));\n\nexport function removeNullishValues<T extends Record<string, unknown>>(obj: T): Partial<T> {\n  const newObj: Partial<T> = { ...obj };\n\n  (Object.keys(newObj) as Array<keyof T>).forEach((key) => {\n    const value = newObj[key];\n    if (value === undefined || value === null) {\n      delete newObj[key];\n    }\n  });\n\n  return newObj;\n}\n\nexport const assistantSchema = tConversationSchema\n  .pick({\n    model: true,\n    assistant_id: true,\n    instructions: true,\n    artifacts: true,\n    promptPrefix: true,\n    iconURL: true,\n    greeting: true,\n    spec: true,\n  })\n  .transform((obj) => ({\n    ...obj,\n    model: obj.model ?? openAISettings.model.default,\n    assistant_id: obj.assistant_id ?? undefined,\n    instructions: obj.instructions ?? undefined,\n    promptPrefix: obj.promptPrefix ?? null,\n    iconURL: obj.iconURL ?? undefined,\n    greeting: obj.greeting ?? undefined,\n    spec: obj.spec ?? undefined,\n  }))\n  .catch(() => ({\n    model: openAISettings.model.default,\n    assistant_id: undefined,\n    instructions: undefined,\n    promptPrefix: null,\n    iconURL: undefined,\n    greeting: undefined,\n    spec: undefined,\n  }));\n\nexport const compactAssistantSchema = tConversationSchema\n  .pick({\n    model: true,\n    assistant_id: true,\n    instructions: true,\n    promptPrefix: true,\n    artifacts: true,\n    iconURL: true,\n    greeting: true,\n    spec: true,\n  })\n  // will change after adding temperature\n  .transform(removeNullishValues)\n  .catch(() => ({}));\n\nexport const agentsSchema = tConversationSchema\n  .pick({\n    model: true,\n    modelLabel: true,\n    temperature: true,\n    top_p: true,\n    presence_penalty: true,\n    frequency_penalty: true,\n    resendFiles: true,\n    imageDetail: true,\n    agent_id: true,\n    instructions: true,\n    promptPrefix: true,\n    iconURL: true,\n    greeting: true,\n    maxContextTokens: true,\n  })\n  .transform((obj) => ({\n    ...obj,\n    model: obj.model ?? agentsSettings.model.default,\n    modelLabel: obj.modelLabel ?? null,\n    temperature: obj.temperature ?? 1,\n    top_p: obj.top_p ?? 1,\n    presence_penalty: obj.presence_penalty ?? 0,\n    frequency_penalty: obj.frequency_penalty ?? 0,\n    resendFiles:\n      typeof obj.resendFiles === 'boolean' ? obj.resendFiles : agentsSettings.resendFiles.default,\n    imageDetail: obj.imageDetail ?? ImageDetail.auto,\n    agent_id: obj.agent_id ?? undefined,\n    instructions: obj.instructions ?? undefined,\n    promptPrefix: obj.promptPrefix ?? null,\n    iconURL: obj.iconURL ?? undefined,\n    greeting: obj.greeting ?? undefined,\n    maxContextTokens: obj.maxContextTokens ?? undefined,\n  }))\n  .catch(() => ({\n    model: agentsSettings.model.default,\n    modelLabel: null,\n    temperature: 1,\n    top_p: 1,\n    presence_penalty: 0,\n    frequency_penalty: 0,\n    resendFiles: agentsSettings.resendFiles.default,\n    imageDetail: ImageDetail.auto,\n    agent_id: undefined,\n    instructions: undefined,\n    promptPrefix: null,\n    iconURL: undefined,\n    greeting: undefined,\n    maxContextTokens: undefined,\n  }));\n\nexport const openAISchema = tConversationSchema\n  .pick({\n    model: true,\n    modelLabel: true,\n    chatGptLabel: true,\n    promptPrefix: true,\n    temperature: true,\n    top_p: true,\n    presence_penalty: true,\n    frequency_penalty: true,\n    resendFiles: true,\n    artifacts: true,\n    imageDetail: true,\n    stop: true,\n    iconURL: true,\n    greeting: true,\n    spec: true,\n    maxContextTokens: true,\n    max_tokens: true,\n  })\n  .transform((obj: Partial<TConversation>) => removeNullishValues(obj))\n  .catch(() => ({}));\n\nexport const compactGoogleSchema = tConversationSchema\n  .pick({\n    model: true,\n    modelLabel: true,\n    promptPrefix: true,\n    examples: true,\n    temperature: true,\n    maxOutputTokens: true,\n    artifacts: true,\n    topP: true,\n    topK: true,\n    iconURL: true,\n    greeting: true,\n    spec: true,\n    maxContextTokens: true,\n  })\n  .transform((obj) => {\n    const newObj: Partial<TConversation> = { ...obj };\n    if (newObj.temperature === google.temperature.default) {\n      delete newObj.temperature;\n    }\n    if (newObj.maxOutputTokens === google.maxOutputTokens.default) {\n      delete newObj.maxOutputTokens;\n    }\n    if (newObj.topP === google.topP.default) {\n      delete newObj.topP;\n    }\n    if (newObj.topK === google.topK.default) {\n      delete newObj.topK;\n    }\n\n    return removeNullishValues(newObj);\n  })\n  .catch(() => ({}));\n\nexport const anthropicSchema = tConversationSchema\n  .pick({\n    model: true,\n    modelLabel: true,\n    promptPrefix: true,\n    temperature: true,\n    maxOutputTokens: true,\n    topP: true,\n    topK: true,\n    resendFiles: true,\n    promptCache: true,\n    artifacts: true,\n    iconURL: true,\n    greeting: true,\n    spec: true,\n    maxContextTokens: true,\n  })\n  .transform((obj) => removeNullishValues(obj))\n  .catch(() => ({}));\n\nexport const compactChatGPTSchema = tConversationSchema\n  .pick({\n    model: true,\n  })\n  .transform((obj) => {\n    const newObj: Partial<TConversation> = { ...obj };\n    return removeNullishValues(newObj);\n  })\n  .catch(() => ({}));\n\nexport const compactPluginsSchema = tConversationSchema\n  .pick({\n    model: true,\n    modelLabel: true,\n    chatGptLabel: true,\n    promptPrefix: true,\n    temperature: true,\n    top_p: true,\n    presence_penalty: true,\n    frequency_penalty: true,\n    tools: true,\n    agentOptions: true,\n    iconURL: true,\n    greeting: true,\n    spec: true,\n    maxContextTokens: true,\n  })\n  .transform((obj) => {\n    const newObj: Partial<TConversation> = { ...obj };\n    if (newObj.modelLabel === null) {\n      delete newObj.modelLabel;\n    }\n    if (newObj.chatGptLabel === null) {\n      delete newObj.chatGptLabel;\n    }\n    if (newObj.promptPrefix === null) {\n      delete newObj.promptPrefix;\n    }\n    if (newObj.temperature === 0.8) {\n      delete newObj.temperature;\n    }\n    if (newObj.top_p === 1) {\n      delete newObj.top_p;\n    }\n    if (newObj.presence_penalty === 0) {\n      delete newObj.presence_penalty;\n    }\n    if (newObj.frequency_penalty === 0) {\n      delete newObj.frequency_penalty;\n    }\n    if (newObj.tools?.length === 0) {\n      delete newObj.tools;\n    }\n\n    if (\n      newObj.agentOptions &&\n      newObj.agentOptions.agent === EAgent.functions &&\n      newObj.agentOptions.skipCompletion === true &&\n      newObj.agentOptions.model === 'gpt-3.5-turbo' &&\n      newObj.agentOptions.temperature === 0\n    ) {\n      delete newObj.agentOptions;\n    }\n\n    return removeNullishValues(newObj);\n  })\n  .catch(() => ({}));\n\nconst tBannerSchema = z.object({\n  bannerId: z.string(),\n  message: z.string(),\n  displayFrom: z.string(),\n  displayTo: z.string(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n  isPublic: z.boolean(),\n});\nexport type TBanner = z.infer<typeof tBannerSchema>;\n\nexport const compactAgentsSchema = tConversationSchema\n  .pick({\n    spec: true,\n    // model: true,\n    iconURL: true,\n    greeting: true,\n    agent_id: true,\n    resendFiles: true,\n    instructions: true,\n    additional_instructions: true,\n  })\n  .transform(removeNullishValues)\n  .catch(() => ({}));\n","/* eslint-disable max-len */\nimport { z } from 'zod';\nimport { EModelEndpoint } from './schemas';\nimport type { FileConfig, EndpointFileConfig } from './types/files';\n\nexport const supportsFiles = {\n  [EModelEndpoint.openAI]: true,\n  [EModelEndpoint.google]: true,\n  [EModelEndpoint.assistants]: true,\n  [EModelEndpoint.azureAssistants]: true,\n  [EModelEndpoint.agents]: true,\n  [EModelEndpoint.azureOpenAI]: true,\n  [EModelEndpoint.anthropic]: true,\n  [EModelEndpoint.custom]: true,\n  [EModelEndpoint.bedrock]: true,\n};\n\nexport const excelFileTypes = [\n  'application/vnd.ms-excel',\n  'application/msexcel',\n  'application/x-msexcel',\n  'application/x-ms-excel',\n  'application/x-excel',\n  'application/x-dos_ms_excel',\n  'application/xls',\n  'application/x-xls',\n  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n];\n\nexport const fullMimeTypesList = [\n  'text/x-c',\n  'text/x-c++',\n  'application/csv',\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  'text/html',\n  'text/x-java',\n  'application/json',\n  'text/markdown',\n  'application/pdf',\n  'text/x-php',\n  'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  'text/x-python',\n  'text/x-script.python',\n  'text/x-ruby',\n  'text/x-tex',\n  'text/plain',\n  'text/css',\n  'text/vtt',\n  'image/jpeg',\n  'text/javascript',\n  'image/gif',\n  'image/png',\n  'application/x-tar',\n  'application/typescript',\n  'application/xml',\n  'application/zip',\n  ...excelFileTypes,\n];\n\nexport const codeInterpreterMimeTypesList = [\n  'text/x-c',\n  'text/x-c++',\n  'application/csv',\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  'text/html',\n  'text/x-java',\n  'application/json',\n  'text/markdown',\n  'application/pdf',\n  'text/x-php',\n  'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  'text/x-python',\n  'text/x-script.python',\n  'text/x-ruby',\n  'text/x-tex',\n  'text/plain',\n  'text/css',\n  'image/jpeg',\n  'text/javascript',\n  'image/gif',\n  'image/png',\n  'application/x-tar',\n  'application/typescript',\n  'application/xml',\n  'application/zip',\n  ...excelFileTypes,\n];\n\nexport const retrievalMimeTypesList = [\n  'text/x-c',\n  'text/x-c++',\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  'text/html',\n  'text/x-java',\n  'application/json',\n  'text/markdown',\n  'application/pdf',\n  'text/x-php',\n  'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  'text/x-python',\n  'text/x-script.python',\n  'text/x-ruby',\n  'text/x-tex',\n  'text/plain',\n];\n\nexport const imageExtRegex = /\\.(jpg|jpeg|png|gif|webp)$/i;\n\nexport const excelMimeTypes =\n  /^application\\/(vnd\\.ms-excel|msexcel|x-msexcel|x-ms-excel|x-excel|x-dos_ms_excel|xls|x-xls|vnd\\.openxmlformats-officedocument\\.spreadsheetml\\.sheet)$/;\n\nexport const textMimeTypes =\n  /^(text\\/(x-c|x-csharp|x-c\\+\\+|x-java|html|markdown|x-php|x-python|x-script\\.python|x-ruby|x-tex|plain|css|vtt|javascript|csv))$/;\n\nexport const applicationMimeTypes =\n  /^(application\\/(epub\\+zip|csv|json|pdf|x-tar|typescript|vnd\\.openxmlformats-officedocument\\.(wordprocessingml\\.document|presentationml\\.presentation|spreadsheetml\\.sheet)|xml|zip))$/;\n\nexport const imageMimeTypes = /^image\\/(jpeg|gif|png|webp)$/;\n\nexport const supportedMimeTypes = [\n  textMimeTypes,\n  excelMimeTypes,\n  applicationMimeTypes,\n  imageMimeTypes,\n];\n\nexport const codeInterpreterMimeTypes = [\n  textMimeTypes,\n  excelMimeTypes,\n  applicationMimeTypes,\n  imageMimeTypes,\n];\n\nexport const codeTypeMapping: { [key: string]: string } = {\n  c: 'text/x-c',\n  cs: 'text/x-csharp',\n  cpp: 'text/x-c++',\n  md: 'text/markdown',\n  php: 'text/x-php',\n  py: 'text/x-python',\n  rb: 'text/x-ruby',\n  tex: 'text/x-tex',\n  js: 'text/javascript',\n  sh: 'application/x-sh',\n  ts: 'application/typescript',\n  tar: 'application/x-tar',\n  zip: 'application/zip',\n};\n\nexport const retrievalMimeTypes = [\n  /^(text\\/(x-c|x-c\\+\\+|html|x-java|markdown|x-php|x-python|x-script\\.python|x-ruby|x-tex|plain|vtt|xml))$/,\n  /^(application\\/(json|pdf|vnd\\.openxmlformats-officedocument\\.(wordprocessingml\\.document|presentationml\\.presentation)))$/,\n];\n\nexport const megabyte = 1024 * 1024;\n/** Helper function to get megabytes value */\nexport const mbToBytes = (mb: number): number => mb * megabyte;\n\nconst defaultSizeLimit = mbToBytes(512);\nconst assistantsFileConfig = {\n  fileLimit: 10,\n  fileSizeLimit: defaultSizeLimit,\n  totalSizeLimit: defaultSizeLimit,\n  supportedMimeTypes,\n  disabled: false,\n};\n\nexport const fileConfig = {\n  endpoints: {\n    [EModelEndpoint.assistants]: assistantsFileConfig,\n    [EModelEndpoint.azureAssistants]: assistantsFileConfig,\n    [EModelEndpoint.agents]: assistantsFileConfig,\n    default: {\n      fileLimit: 10,\n      fileSizeLimit: defaultSizeLimit,\n      totalSizeLimit: defaultSizeLimit,\n      supportedMimeTypes,\n      disabled: false,\n    },\n  },\n  serverFileSizeLimit: defaultSizeLimit,\n  avatarSizeLimit: mbToBytes(2),\n  checkType: function (fileType: string, supportedTypes: RegExp[] = supportedMimeTypes) {\n    return supportedTypes.some((regex) => regex.test(fileType));\n  },\n};\n\nconst supportedMimeTypesSchema = z\n  .array(z.any())\n  .optional()\n  .refine(\n    (mimeTypes) => {\n      if (!mimeTypes) {\n        return true;\n      }\n      return mimeTypes.every(\n        (mimeType) => mimeType instanceof RegExp || typeof mimeType === 'string',\n      );\n    },\n    {\n      message: 'Each mimeType must be a string or a RegExp object.',\n    },\n  );\n\nexport const endpointFileConfigSchema = z.object({\n  disabled: z.boolean().optional(),\n  fileLimit: z.number().min(0).optional(),\n  fileSizeLimit: z.number().min(0).optional(),\n  totalSizeLimit: z.number().min(0).optional(),\n  supportedMimeTypes: supportedMimeTypesSchema.optional(),\n});\n\nexport const fileConfigSchema = z.object({\n  endpoints: z.record(endpointFileConfigSchema).optional(),\n  serverFileSizeLimit: z.number().min(0).optional(),\n  avatarSizeLimit: z.number().min(0).optional(),\n});\n\n/** Helper function to safely convert string patterns to RegExp objects */\nexport const convertStringsToRegex = (patterns: string[]): RegExp[] =>\n  patterns.reduce((acc: RegExp[], pattern) => {\n    try {\n      const regex = new RegExp(pattern);\n      acc.push(regex);\n    } catch (error) {\n      console.error(`Invalid regex pattern \"${pattern}\" skipped.`);\n    }\n    return acc;\n  }, []);\n\nexport function mergeFileConfig(dynamic: z.infer<typeof fileConfigSchema> | undefined): FileConfig {\n  const mergedConfig = fileConfig as FileConfig;\n  if (!dynamic) {\n    return mergedConfig;\n  }\n\n  if (dynamic.serverFileSizeLimit !== undefined) {\n    mergedConfig.serverFileSizeLimit = mbToBytes(dynamic.serverFileSizeLimit);\n  }\n\n  if (dynamic.avatarSizeLimit !== undefined) {\n    mergedConfig.avatarSizeLimit = mbToBytes(dynamic.avatarSizeLimit);\n  }\n\n  if (!dynamic.endpoints) {\n    return mergedConfig;\n  }\n\n  for (const key in dynamic.endpoints) {\n    const dynamicEndpoint = (dynamic.endpoints as Record<string, EndpointFileConfig>)[key];\n\n    if (!mergedConfig.endpoints[key]) {\n      mergedConfig.endpoints[key] = {};\n    }\n\n    const mergedEndpoint = mergedConfig.endpoints[key];\n\n    if (dynamicEndpoint.disabled === true) {\n      mergedEndpoint.disabled = true;\n      mergedEndpoint.fileLimit = 0;\n      mergedEndpoint.fileSizeLimit = 0;\n      mergedEndpoint.totalSizeLimit = 0;\n      mergedEndpoint.supportedMimeTypes = [];\n      continue;\n    }\n\n    if (dynamicEndpoint.fileSizeLimit !== undefined) {\n      mergedEndpoint.fileSizeLimit = mbToBytes(dynamicEndpoint.fileSizeLimit);\n    }\n\n    if (dynamicEndpoint.totalSizeLimit !== undefined) {\n      mergedEndpoint.totalSizeLimit = mbToBytes(dynamicEndpoint.totalSizeLimit);\n    }\n\n    const configKeys = ['fileLimit'] as const;\n    configKeys.forEach((field) => {\n      if (dynamicEndpoint[field] !== undefined) {\n        mergedEndpoint[field] = dynamicEndpoint[field];\n      }\n    });\n\n    if (dynamicEndpoint.supportedMimeTypes) {\n      mergedEndpoint.supportedMimeTypes = convertStringsToRegex(\n        dynamicEndpoint.supportedMimeTypes as unknown as string[],\n      );\n    }\n  }\n\n  return mergedConfig;\n}\n","import { EToolResources } from './assistants';\n\nexport enum FileSources {\n  local = 'local',\n  firebase = 'firebase',\n  azure = 'azure',\n  openai = 'openai',\n  s3 = 's3',\n  vectordb = 'vectordb',\n  execute_code = 'execute_code',\n}\n\nexport const checkOpenAIStorage = (source: string) =>\n  source === FileSources.openai || source === FileSources.azure;\n\nexport enum FileContext {\n  avatar = 'avatar',\n  unknown = 'unknown',\n  agents = 'agents',\n  assistants = 'assistants',\n  execute_code = 'execute_code',\n  image_generation = 'image_generation',\n  assistants_output = 'assistants_output',\n  message_attachment = 'message_attachment',\n  filename = 'filename',\n  updatedAt = 'updatedAt',\n  source = 'source',\n  filterSource = 'filterSource',\n  context = 'context',\n  bytes = 'bytes',\n}\n\nexport type EndpointFileConfig = {\n  disabled?: boolean;\n  fileLimit?: number;\n  fileSizeLimit?: number;\n  totalSizeLimit?: number;\n  supportedMimeTypes?: RegExp[];\n};\n\nexport type FileConfig = {\n  endpoints: {\n    [key: string]: EndpointFileConfig;\n  };\n  serverFileSizeLimit?: number;\n  avatarSizeLimit?: number;\n  checkType?: (fileType: string, supportedTypes: RegExp[]) => boolean;\n};\n\nexport type TFile = {\n  _id?: string;\n  __v?: number;\n  user: string;\n  conversationId?: string;\n  message?: string;\n  file_id: string;\n  temp_file_id?: string;\n  bytes: number;\n  embedded: boolean;\n  filename: string;\n  filepath: string;\n  object: 'file';\n  type: string;\n  usage: number;\n  context?: FileContext;\n  source?: FileSources;\n  filterSource?: FileSources;\n  width?: number;\n  height?: number;\n  expiresAt?: string | Date;\n  preview?: string;\n  metadata?: { fileIdentifier?: string };\n  createdAt?: string | Date;\n  updatedAt?: string | Date;\n};\n\nexport type TFileUpload = TFile & {\n  temp_file_id: string;\n};\n\nexport type AvatarUploadResponse = {\n  url: string;\n};\n\nexport type SpeechToTextResponse = {\n  text: string;\n};\n\nexport type VoiceResponse = string[];\n\nexport type UploadMutationOptions = {\n  onSuccess?: (data: TFileUpload, variables: FormData, context?: unknown) => void;\n  onMutate?: (variables: FormData) => void | Promise<unknown>;\n  onError?: (error: unknown, variables: FormData, context?: unknown) => void;\n};\n\nexport type UploadAvatarOptions = {\n  onSuccess?: (data: AvatarUploadResponse, variables: FormData, context?: unknown) => void;\n  onMutate?: (variables: FormData) => void | Promise<unknown>;\n  onError?: (error: unknown, variables: FormData, context?: unknown) => void;\n};\n\nexport type SpeechToTextOptions = {\n  onSuccess?: (data: SpeechToTextResponse, variables: FormData, context?: unknown) => void;\n  onMutate?: (variables: FormData) => void | Promise<unknown>;\n  onError?: (error: unknown, variables: FormData, context?: unknown) => void;\n};\n\nexport type TextToSpeechOptions = {\n  onSuccess?: (data: ArrayBuffer, variables: FormData, context?: unknown) => void;\n  onMutate?: (variables: FormData) => void | Promise<unknown>;\n  onError?: (error: unknown, variables: FormData, context?: unknown) => void;\n};\n\nexport type VoiceOptions = {\n  onSuccess?: (data: VoiceResponse, variables: unknown, context?: unknown) => void;\n  onMutate?: () => void | Promise<unknown>;\n  onError?: (error: unknown, variables: unknown, context?: unknown) => void;\n};\n\nexport type DeleteFilesResponse = {\n  message: string;\n  result: Record<string, unknown>;\n};\n\nexport type BatchFile = {\n  file_id: string;\n  filepath: string;\n  embedded: boolean;\n  source: FileSources;\n};\n\nexport type DeleteFilesBody = {\n  files: BatchFile[];\n  agent_id?: string;\n  assistant_id?: string;\n  tool_resource?: EToolResources;\n};\n\nexport type DeleteMutationOptions = {\n  onSuccess?: (data: DeleteFilesResponse, variables: DeleteFilesBody, context?: unknown) => void;\n  onMutate?: (variables: DeleteFilesBody) => void | Promise<unknown>;\n  onError?: (error: unknown, variables: DeleteFilesBody, context?: unknown) => void;\n};\n","import { z } from 'zod';\nimport type { TPreset } from './schemas';\nimport {\n  EModelEndpoint,\n  tPresetSchema,\n  eModelEndpointSchema,\n  AuthType,\n  authTypeSchema,\n} from './schemas';\n\nexport type TModelSpec = {\n  name: string;\n  label: string;\n  preset: TPreset;\n  order?: number;\n  default?: boolean;\n  description?: string;\n  showIconInMenu?: boolean;\n  showIconInHeader?: boolean;\n  iconURL?: string | EModelEndpoint; // Allow using project-included icons\n  authType?: AuthType;\n};\n\nexport const tModelSpecSchema = z.object({\n  name: z.string(),\n  label: z.string(),\n  preset: tPresetSchema,\n  order: z.number().optional(),\n  default: z.boolean().optional(),\n  description: z.string().optional(),\n  showIconInMenu: z.boolean().optional(),\n  showIconInHeader: z.boolean().optional(),\n  iconURL: z.union([z.string(), eModelEndpointSchema]).optional(),\n  authType: authTypeSchema.optional(),\n});\n\nexport const specsConfigSchema = z.object({\n  enforce: z.boolean().default(false),\n  prioritize: z.boolean().default(true),\n  list: z.array(tModelSpecSchema).optional(),\n});\n\nexport type TSpecsConfig = z.infer<typeof specsConfigSchema>;\n","/* eslint-disable max-len */\nimport { z } from 'zod';\nimport type { ZodError } from 'zod';\nimport { EModelEndpoint, eModelEndpointSchema } from './schemas';\nimport { fileConfigSchema } from './file-config';\nimport { specsConfigSchema } from './models';\nimport { FileSources } from './types/files';\nimport { TModelsConfig } from './types';\n\nexport const defaultSocialLogins = ['google', 'facebook', 'openid', 'github', 'discord'];\n\nexport const defaultRetrievalModels = [\n  'gpt-4o',\n  'o1-preview-2024-09-12',\n  'o1-preview',\n  'o1-mini-2024-09-12',\n  'o1-mini',\n  'chatgpt-4o-latest',\n  'gpt-4o-2024-05-13',\n  'gpt-4o-2024-08-06',\n  'gpt-4o-mini',\n  'gpt-4o-mini-2024-07-18',\n  'gpt-4-turbo-preview',\n  'gpt-3.5-turbo-0125',\n  'gpt-4-0125-preview',\n  'gpt-4-1106-preview',\n  'gpt-3.5-turbo-1106',\n  'gpt-3.5-turbo-0125',\n  'gpt-4-turbo',\n  'gpt-4-0125',\n  'gpt-4-1106',\n];\n\nexport enum SettingsViews {\n  default = 'default',\n  advanced = 'advanced',\n}\n\nexport const fileSourceSchema = z.nativeEnum(FileSources);\n\n// Helper type to extract the shape of the Zod object schema\ntype SchemaShape<T> = T extends z.ZodObject<infer U> ? U : never;\n\n// Helper type to determine the default value or undefined based on whether the field has a default\ntype DefaultValue<T> = T extends z.ZodDefault<z.ZodTypeAny>\n  ? ReturnType<T['_def']['defaultValue']>\n  : undefined;\n\n// Extract default values or undefined from the schema shape\ntype ExtractDefaults<T> = {\n  [P in keyof T]: DefaultValue<T[P]>;\n};\n\nexport type SchemaDefaults<T> = ExtractDefaults<SchemaShape<T>>;\n\nexport type TConfigDefaults = SchemaDefaults<typeof configSchema>;\n\nexport function getSchemaDefaults<Schema extends z.AnyZodObject>(\n  schema: Schema,\n): ExtractDefaults<SchemaShape<Schema>> {\n  const shape = schema.shape;\n  const entries = Object.entries(shape).map(([key, value]) => {\n    if (value instanceof z.ZodDefault) {\n      // Extract default value if it exists\n      return [key, value._def.defaultValue()];\n    }\n    return [key, undefined];\n  });\n\n  // Create the object with the right types\n  return Object.fromEntries(entries) as ExtractDefaults<SchemaShape<Schema>>;\n}\n\nexport const modelConfigSchema = z\n  .object({\n    deploymentName: z.string().optional(),\n    version: z.string().optional(),\n    assistants: z.boolean().optional(),\n  })\n  .or(z.boolean());\n\nexport type TAzureModelConfig = z.infer<typeof modelConfigSchema>;\n\nexport const azureBaseSchema = z.object({\n  apiKey: z.string(),\n  serverless: z.boolean().optional(),\n  instanceName: z.string().optional(),\n  deploymentName: z.string().optional(),\n  assistants: z.boolean().optional(),\n  addParams: z.record(z.any()).optional(),\n  dropParams: z.array(z.string()).optional(),\n  forcePrompt: z.boolean().optional(),\n  version: z.string().optional(),\n  baseURL: z.string().optional(),\n  additionalHeaders: z.record(z.any()).optional(),\n});\n\nexport type TAzureBaseSchema = z.infer<typeof azureBaseSchema>;\n\nexport const azureGroupSchema = z\n  .object({\n    group: z.string(),\n    models: z.record(z.string(), modelConfigSchema),\n  })\n  .required()\n  .and(azureBaseSchema);\n\nexport const azureGroupConfigsSchema = z.array(azureGroupSchema).min(1);\nexport type TAzureGroup = z.infer<typeof azureGroupSchema>;\nexport type TAzureGroups = z.infer<typeof azureGroupConfigsSchema>;\nexport type TAzureModelMapSchema = {\n  // deploymentName?: string;\n  // version?: string;\n  group: string;\n};\n\nexport type TAzureModelGroupMap = Record<string, TAzureModelMapSchema | undefined>;\nexport type TAzureGroupMap = Record<\n  string,\n  (TAzureBaseSchema & { models: Record<string, TAzureModelConfig | undefined> }) | undefined\n>;\n\nexport type TValidatedAzureConfig = {\n  modelNames: string[];\n  modelGroupMap: TAzureModelGroupMap;\n  groupMap: TAzureGroupMap;\n};\n\nexport type TAzureConfigValidationResult = TValidatedAzureConfig & {\n  isValid: boolean;\n  errors: (ZodError | string)[];\n};\n\nexport enum Capabilities {\n  code_interpreter = 'code_interpreter',\n  image_vision = 'image_vision',\n  retrieval = 'retrieval',\n  actions = 'actions',\n  tools = 'tools',\n}\n\nexport enum AgentCapabilities {\n  hide_sequential_outputs = 'hide_sequential_outputs',\n  end_after_tools = 'end_after_tools',\n  execute_code = 'execute_code',\n  file_search = 'file_search',\n  actions = 'actions',\n  tools = 'tools',\n}\n\nexport const defaultAssistantsVersion = {\n  [EModelEndpoint.assistants]: 2,\n  [EModelEndpoint.azureAssistants]: 1,\n};\n\nexport const baseEndpointSchema = z.object({\n  streamRate: z.number().optional(),\n  baseURL: z.string().optional(),\n  titlePrompt: z.string().optional(),\n  titleModel: z.string().optional(),\n});\n\nexport type TBaseEndpoint = z.infer<typeof baseEndpointSchema>;\n\nexport const bedrockEndpointSchema = baseEndpointSchema.merge(\n  z.object({\n    availableRegions: z.array(z.string()).optional(),\n  }),\n);\n\nexport const assistantEndpointSchema = baseEndpointSchema.merge(\n  z.object({\n    /* assistants specific */\n    disableBuilder: z.boolean().optional(),\n    pollIntervalMs: z.number().optional(),\n    timeoutMs: z.number().optional(),\n    version: z.union([z.string(), z.number()]).default(2),\n    supportedIds: z.array(z.string()).min(1).optional(),\n    excludedIds: z.array(z.string()).min(1).optional(),\n    privateAssistants: z.boolean().optional(),\n    retrievalModels: z.array(z.string()).min(1).optional().default(defaultRetrievalModels),\n    capabilities: z\n      .array(z.nativeEnum(Capabilities))\n      .optional()\n      .default([\n        Capabilities.code_interpreter,\n        Capabilities.image_vision,\n        Capabilities.retrieval,\n        Capabilities.actions,\n        Capabilities.tools,\n      ]),\n    /* general */\n    apiKey: z.string().optional(),\n    models: z\n      .object({\n        default: z.array(z.string()).min(1),\n        fetch: z.boolean().optional(),\n        userIdQuery: z.boolean().optional(),\n      })\n      .optional(),\n    titleConvo: z.boolean().optional(),\n    titleMethod: z.union([z.literal('completion'), z.literal('functions')]).optional(),\n    headers: z.record(z.any()).optional(),\n  }),\n);\n\nexport type TAssistantEndpoint = z.infer<typeof assistantEndpointSchema>;\n\nexport const agentsEndpointSChema = baseEndpointSchema.merge(\n  z.object({\n    /* assistants specific */\n    disableBuilder: z.boolean().optional(),\n    pollIntervalMs: z.number().optional(),\n    timeoutMs: z.number().optional(),\n    version: z.union([z.string(), z.number()]).default(2),\n    supportedIds: z.array(z.string()).min(1).optional(),\n    excludedIds: z.array(z.string()).min(1).optional(),\n    privateAssistants: z.boolean().optional(),\n    retrievalModels: z.array(z.string()).min(1).optional().default(defaultRetrievalModels),\n    capabilities: z\n      .array(z.nativeEnum(Capabilities))\n      .optional()\n      .default([\n        Capabilities.code_interpreter,\n        Capabilities.image_vision,\n        Capabilities.retrieval,\n        Capabilities.actions,\n        Capabilities.tools,\n      ]),\n    /* general */\n    apiKey: z.string().optional(),\n    models: z\n      .object({\n        default: z.array(z.string()).min(1),\n        fetch: z.boolean().optional(),\n        userIdQuery: z.boolean().optional(),\n      })\n      .optional(),\n    titleConvo: z.boolean().optional(),\n    titleMethod: z.union([z.literal('completion'), z.literal('functions')]).optional(),\n    headers: z.record(z.any()).optional(),\n  }),\n);\n\nexport type TAgentsEndpoint = z.infer<typeof agentsEndpointSChema>;\n\nexport const endpointSchema = baseEndpointSchema.merge(\n  z.object({\n    name: z.string().refine((value) => !eModelEndpointSchema.safeParse(value).success, {\n      message: `Value cannot be one of the default endpoint (EModelEndpoint) values: ${Object.values(\n        EModelEndpoint,\n      ).join(', ')}`,\n    }),\n    apiKey: z.string(),\n    baseURL: z.string(),\n    models: z.object({\n      default: z.array(z.string()).min(1),\n      fetch: z.boolean().optional(),\n      userIdQuery: z.boolean().optional(),\n    }),\n    titleConvo: z.boolean().optional(),\n    titleMethod: z.union([z.literal('completion'), z.literal('functions')]).optional(),\n    summarize: z.boolean().optional(),\n    summaryModel: z.string().optional(),\n    forcePrompt: z.boolean().optional(),\n    modelDisplayLabel: z.string().optional(),\n    headers: z.record(z.any()).optional(),\n    addParams: z.record(z.any()).optional(),\n    dropParams: z.array(z.string()).optional(),\n    customOrder: z.number().optional(),\n    directEndpoint: z.boolean().optional(),\n    titleMessageRole: z.string().optional(),\n  }),\n);\n\nexport type TEndpoint = z.infer<typeof endpointSchema>;\n\nexport const azureEndpointSchema = z\n  .object({\n    groups: azureGroupConfigsSchema,\n    plugins: z.boolean().optional(),\n    assistants: z.boolean().optional(),\n  })\n  .and(\n    endpointSchema\n      .pick({\n        streamRate: true,\n        titleConvo: true,\n        titleMethod: true,\n        titleModel: true,\n        summarize: true,\n        summaryModel: true,\n        customOrder: true,\n      })\n      .partial(),\n  );\n\nexport type TAzureConfig = Omit<z.infer<typeof azureEndpointSchema>, 'groups'> &\n  TAzureConfigValidationResult;\n\nconst ttsOpenaiSchema = z.object({\n  url: z.string().optional(),\n  apiKey: z.string(),\n  model: z.string(),\n  voices: z.array(z.string()),\n});\n\nconst ttsAzureOpenAISchema = z.object({\n  instanceName: z.string(),\n  apiKey: z.string(),\n  deploymentName: z.string(),\n  apiVersion: z.string(),\n  model: z.string(),\n  voices: z.array(z.string()),\n});\n\nconst ttsElevenLabsSchema = z.object({\n  url: z.string().optional(),\n  websocketUrl: z.string().optional(),\n  apiKey: z.string(),\n  model: z.string(),\n  voices: z.array(z.string()),\n  voice_settings: z\n    .object({\n      similarity_boost: z.number().optional(),\n      stability: z.number().optional(),\n      style: z.number().optional(),\n      use_speaker_boost: z.boolean().optional(),\n    })\n    .optional(),\n  pronunciation_dictionary_locators: z.array(z.string()).optional(),\n});\n\nconst ttsLocalaiSchema = z.object({\n  url: z.string(),\n  apiKey: z.string().optional(),\n  voices: z.array(z.string()),\n  backend: z.string(),\n});\n\nconst ttsSchema = z.object({\n  openai: ttsOpenaiSchema.optional(),\n  azureOpenAI: ttsAzureOpenAISchema.optional(),\n  elevenlabs: ttsElevenLabsSchema.optional(),\n  localai: ttsLocalaiSchema.optional(),\n});\n\nconst sttOpenaiSchema = z.object({\n  url: z.string().optional(),\n  apiKey: z.string(),\n  model: z.string(),\n});\n\nconst sttAzureOpenAISchema = z.object({\n  instanceName: z.string(),\n  apiKey: z.string(),\n  deploymentName: z.string(),\n  apiVersion: z.string(),\n});\n\nconst sttSchema = z.object({\n  openai: sttOpenaiSchema.optional(),\n  azureOpenAI: sttAzureOpenAISchema.optional(),\n});\n\nconst speechTab = z\n  .object({\n    conversationMode: z.boolean().optional(),\n    advancedMode: z.boolean().optional(),\n    speechToText: z\n      .boolean()\n      .optional()\n      .or(\n        z.object({\n          engineSTT: z.string().optional(),\n          languageSTT: z.string().optional(),\n          autoTranscribeAudio: z.boolean().optional(),\n          decibelValue: z.number().optional(),\n          autoSendText: z.number().optional(),\n        }),\n      )\n      .optional(),\n    textToSpeech: z\n      .boolean()\n      .optional()\n      .or(\n        z.object({\n          engineTTS: z.string().optional(),\n          voice: z.string().optional(),\n          languageTTS: z.string().optional(),\n          automaticPlayback: z.boolean().optional(),\n          playbackRate: z.number().optional(),\n          cacheTTS: z.boolean().optional(),\n        }),\n      )\n      .optional(),\n  })\n  .optional();\n\nexport enum RateLimitPrefix {\n  FILE_UPLOAD = 'FILE_UPLOAD',\n  IMPORT = 'IMPORT',\n  TTS = 'TTS',\n  STT = 'STT',\n}\n\nexport const rateLimitSchema = z.object({\n  fileUploads: z\n    .object({\n      ipMax: z.number().optional(),\n      ipWindowInMinutes: z.number().optional(),\n      userMax: z.number().optional(),\n      userWindowInMinutes: z.number().optional(),\n    })\n    .optional(),\n  conversationsImport: z\n    .object({\n      ipMax: z.number().optional(),\n      ipWindowInMinutes: z.number().optional(),\n      userMax: z.number().optional(),\n      userWindowInMinutes: z.number().optional(),\n    })\n    .optional(),\n  tts: z\n    .object({\n      ipMax: z.number().optional(),\n      ipWindowInMinutes: z.number().optional(),\n      userMax: z.number().optional(),\n      userWindowInMinutes: z.number().optional(),\n    })\n    .optional(),\n  stt: z\n    .object({\n      ipMax: z.number().optional(),\n      ipWindowInMinutes: z.number().optional(),\n      userMax: z.number().optional(),\n      userWindowInMinutes: z.number().optional(),\n    })\n    .optional(),\n});\n\nexport enum EImageOutputType {\n  PNG = 'png',\n  WEBP = 'webp',\n  JPEG = 'jpeg',\n}\n\nexport const configSchema = z.object({\n  version: z.string(),\n  cache: z.boolean().default(true),\n  secureImageLinks: z.boolean().optional(),\n  imageOutputType: z.nativeEnum(EImageOutputType).default(EImageOutputType.PNG),\n  includedTools: z.array(z.string()).optional(),\n  filteredTools: z.array(z.string()).optional(),\n  interface: z\n    .object({\n      privacyPolicy: z\n        .object({\n          externalUrl: z.string().optional(),\n          openNewTab: z.boolean().optional(),\n        })\n        .optional(),\n      termsOfService: z\n        .object({\n          externalUrl: z.string().optional(),\n          openNewTab: z.boolean().optional(),\n          modalAcceptance: z.boolean().optional(),\n          modalTitle: z.string().optional(),\n          modalContent: z.string().or(z.array(z.string())).optional(),\n        })\n        .optional(),\n      endpointsMenu: z.boolean().optional(),\n      modelSelect: z.boolean().optional(),\n      parameters: z.boolean().optional(),\n      sidePanel: z.boolean().optional(),\n      multiConvo: z.boolean().optional(),\n      bookmarks: z.boolean().optional(),\n      presets: z.boolean().optional(),\n      prompts: z.boolean().optional(),\n      agents: z.boolean().optional(),\n    })\n    .default({\n      endpointsMenu: true,\n      modelSelect: true,\n      parameters: true,\n      sidePanel: true,\n      presets: true,\n      multiConvo: true,\n      bookmarks: true,\n      prompts: true,\n      agents: true,\n    }),\n  fileStrategy: fileSourceSchema.default(FileSources.local),\n  registration: z\n    .object({\n      socialLogins: z.array(z.string()).optional(),\n      allowedDomains: z.array(z.string()).optional(),\n    })\n    .default({ socialLogins: defaultSocialLogins }),\n  speech: z\n    .object({\n      tts: ttsSchema.optional(),\n      stt: sttSchema.optional(),\n      speechTab: speechTab.optional(),\n    })\n    .optional(),\n  rateLimits: rateLimitSchema.optional(),\n  fileConfig: fileConfigSchema.optional(),\n  modelSpecs: specsConfigSchema.optional(),\n  endpoints: z\n    .object({\n      all: baseEndpointSchema.optional(),\n      [EModelEndpoint.openAI]: baseEndpointSchema.optional(),\n      [EModelEndpoint.google]: baseEndpointSchema.optional(),\n      [EModelEndpoint.anthropic]: baseEndpointSchema.optional(),\n      [EModelEndpoint.gptPlugins]: baseEndpointSchema.optional(),\n      [EModelEndpoint.azureOpenAI]: azureEndpointSchema.optional(),\n      [EModelEndpoint.azureAssistants]: assistantEndpointSchema.optional(),\n      [EModelEndpoint.assistants]: assistantEndpointSchema.optional(),\n      [EModelEndpoint.agents]: agentsEndpointSChema.optional(),\n      [EModelEndpoint.custom]: z.array(endpointSchema.partial()).optional(),\n      [EModelEndpoint.bedrock]: baseEndpointSchema.optional(),\n    })\n    .strict()\n    .refine((data) => Object.keys(data).length > 0, {\n      message: 'At least one `endpoints` field must be provided.',\n    })\n    .optional(),\n});\n\nexport const getConfigDefaults = () => getSchemaDefaults(configSchema);\n\nexport type TCustomConfig = z.infer<typeof configSchema>;\n\nexport type TProviderSchema =\n  | z.infer<typeof ttsOpenaiSchema>\n  | z.infer<typeof ttsElevenLabsSchema>\n  | z.infer<typeof ttsLocalaiSchema>\n  | undefined;\n\nexport enum KnownEndpoints {\n  anyscale = 'anyscale',\n  apipie = 'apipie',\n  cohere = 'cohere',\n  fireworks = 'fireworks',\n  deepseek = 'deepseek',\n  groq = 'groq',\n  huggingface = 'huggingface',\n  mistral = 'mistral',\n  mlx = 'mlx',\n  ollama = 'ollama',\n  openrouter = 'openrouter',\n  perplexity = 'perplexity',\n  shuttleai = 'shuttleai',\n  'together.ai' = 'together.ai',\n  unify = 'unify',\n  xai = 'xai',\n}\n\nexport enum FetchTokenConfig {\n  openrouter = KnownEndpoints.openrouter,\n}\n\nexport const defaultEndpoints: EModelEndpoint[] = [\n  EModelEndpoint.openAI,\n  EModelEndpoint.assistants,\n  EModelEndpoint.azureAssistants,\n  EModelEndpoint.azureOpenAI,\n  EModelEndpoint.agents,\n  EModelEndpoint.bingAI,\n  EModelEndpoint.chatGPTBrowser,\n  EModelEndpoint.gptPlugins,\n  EModelEndpoint.google,\n  EModelEndpoint.anthropic,\n  EModelEndpoint.custom,\n  EModelEndpoint.bedrock,\n];\n\nexport const alternateName = {\n  [EModelEndpoint.openAI]: 'OpenAI',\n  [EModelEndpoint.assistants]: 'Assistants',\n  [EModelEndpoint.agents]: 'Agents',\n  [EModelEndpoint.azureAssistants]: 'Azure Assistants',\n  [EModelEndpoint.azureOpenAI]: 'Azure OpenAI',\n  [EModelEndpoint.bingAI]: 'Bing',\n  [EModelEndpoint.chatGPTBrowser]: 'ChatGPT',\n  [EModelEndpoint.gptPlugins]: 'Plugins',\n  [EModelEndpoint.google]: 'Google',\n  [EModelEndpoint.anthropic]: 'Anthropic',\n  [EModelEndpoint.custom]: 'Custom',\n  [EModelEndpoint.bedrock]: 'AWS Bedrock',\n  [KnownEndpoints.ollama]: 'Ollama',\n  [KnownEndpoints.xai]: 'xAI',\n};\n\nconst sharedOpenAIModels = [\n  'gpt-4o-mini',\n  'gpt-4o',\n  'gpt-3.5-turbo',\n  'gpt-3.5-turbo-0125',\n  'gpt-4-turbo',\n  'gpt-4-turbo-2024-04-09',\n  'gpt-4-0125-preview',\n  'gpt-4-turbo-preview',\n  'gpt-4-1106-preview',\n  'gpt-3.5-turbo-1106',\n  'gpt-3.5-turbo-16k-0613',\n  'gpt-3.5-turbo-16k',\n  'gpt-4',\n  'gpt-4-0314',\n  'gpt-4-32k-0314',\n  'gpt-4-0613',\n  'gpt-3.5-turbo-0613',\n];\n\nconst sharedAnthropicModels = [\n  'claude-3-5-haiku-20241022',\n  'claude-3-5-sonnet-20241022',\n  'claude-3-5-sonnet-20240620',\n  'claude-3-5-sonnet-latest',\n  'claude-3-opus-20240229',\n  'claude-3-sonnet-20240229',\n  'claude-3-haiku-20240307',\n  'claude-2.1',\n  'claude-2',\n  'claude-1.2',\n  'claude-1',\n  'claude-1-100k',\n  'claude-instant-1',\n  'claude-instant-1-100k',\n];\n\nexport const bedrockModels = [\n  'anthropic.claude-3-5-sonnet-20241022-v2:0',\n  'anthropic.claude-3-5-sonnet-20240620-v1:0',\n  'anthropic.claude-3-5-haiku-20241022-v1:0',\n  'anthropic.claude-3-haiku-20240307-v1:0',\n  'anthropic.claude-3-opus-20240229-v1:0',\n  'anthropic.claude-3-sonnet-20240229-v1:0',\n  'anthropic.claude-v2',\n  'anthropic.claude-v2:1',\n  'anthropic.claude-instant-v1',\n  // 'cohere.command-text-v14', // no conversation history\n  // 'cohere.command-light-text-v14', // no conversation history\n  'cohere.command-r-v1:0',\n  'cohere.command-r-plus-v1:0',\n  'meta.llama2-13b-chat-v1',\n  'meta.llama2-70b-chat-v1',\n  'meta.llama3-8b-instruct-v1:0',\n  'meta.llama3-70b-instruct-v1:0',\n  'meta.llama3-1-8b-instruct-v1:0',\n  'meta.llama3-1-70b-instruct-v1:0',\n  'meta.llama3-1-405b-instruct-v1:0',\n  'mistral.mistral-7b-instruct-v0:2',\n  'mistral.mixtral-8x7b-instruct-v0:1',\n  'mistral.mistral-large-2402-v1:0',\n  'mistral.mistral-large-2407-v1:0',\n  'mistral.mistral-small-2402-v1:0',\n  'ai21.jamba-instruct-v1:0',\n  // 'ai21.j2-mid-v1', // no streaming\n  // 'ai21.j2-ultra-v1', no conversation history\n  'amazon.titan-text-lite-v1',\n  'amazon.titan-text-express-v1',\n  'amazon.titan-text-premier-v1:0',\n];\n\nexport const defaultModels = {\n  [EModelEndpoint.azureAssistants]: sharedOpenAIModels,\n  [EModelEndpoint.assistants]: ['chatgpt-4o-latest', ...sharedOpenAIModels],\n  [EModelEndpoint.agents]: sharedOpenAIModels, // TODO: Add agent models (agentsModels)\n  [EModelEndpoint.google]: [\n    'gemini-pro',\n    'gemini-pro-vision',\n    'chat-bison',\n    'chat-bison-32k',\n    'codechat-bison',\n    'codechat-bison-32k',\n    'text-bison',\n    'text-bison-32k',\n    'text-unicorn',\n    'code-gecko',\n    'code-bison',\n    'code-bison-32k',\n  ],\n  [EModelEndpoint.anthropic]: sharedAnthropicModels,\n  [EModelEndpoint.openAI]: [\n    'chatgpt-4o-latest',\n    ...sharedOpenAIModels,\n    'gpt-4-vision-preview',\n    'gpt-3.5-turbo-instruct-0914',\n    'gpt-3.5-turbo-instruct',\n  ],\n  [EModelEndpoint.bedrock]: bedrockModels,\n};\n\nconst fitlerAssistantModels = (str: string) => {\n  return /gpt-4|gpt-3\\\\.5/i.test(str) && !/vision|instruct/i.test(str);\n};\n\nconst openAIModels = defaultModels[EModelEndpoint.openAI];\n\nexport const initialModelsConfig: TModelsConfig = {\n  initial: [],\n  [EModelEndpoint.openAI]: openAIModels,\n  [EModelEndpoint.assistants]: openAIModels.filter(fitlerAssistantModels),\n  [EModelEndpoint.agents]: openAIModels, // TODO: Add agent models (agentsModels)\n  [EModelEndpoint.gptPlugins]: openAIModels,\n  [EModelEndpoint.azureOpenAI]: openAIModels,\n  [EModelEndpoint.bingAI]: ['BingAI', 'Sydney'],\n  [EModelEndpoint.chatGPTBrowser]: ['text-davinci-002-render-sha'],\n  [EModelEndpoint.google]: defaultModels[EModelEndpoint.google],\n  [EModelEndpoint.anthropic]: defaultModels[EModelEndpoint.anthropic],\n  [EModelEndpoint.bedrock]: defaultModels[EModelEndpoint.bedrock],\n};\n\nexport const EndpointURLs: { [key in EModelEndpoint]: string } = {\n  [EModelEndpoint.openAI]: `/api/ask/${EModelEndpoint.openAI}`,\n  [EModelEndpoint.bingAI]: `/api/ask/${EModelEndpoint.bingAI}`,\n  [EModelEndpoint.google]: `/api/ask/${EModelEndpoint.google}`,\n  [EModelEndpoint.custom]: `/api/ask/${EModelEndpoint.custom}`,\n  [EModelEndpoint.anthropic]: `/api/ask/${EModelEndpoint.anthropic}`,\n  [EModelEndpoint.gptPlugins]: `/api/ask/${EModelEndpoint.gptPlugins}`,\n  [EModelEndpoint.azureOpenAI]: `/api/ask/${EModelEndpoint.azureOpenAI}`,\n  [EModelEndpoint.chatGPTBrowser]: `/api/ask/${EModelEndpoint.chatGPTBrowser}`,\n  [EModelEndpoint.azureAssistants]: '/api/assistants/v1/chat',\n  [EModelEndpoint.assistants]: '/api/assistants/v2/chat',\n  [EModelEndpoint.agents]: `/api/${EModelEndpoint.agents}/chat`,\n  [EModelEndpoint.bedrock]: `/api/${EModelEndpoint.bedrock}/chat`,\n};\n\nexport const modularEndpoints = new Set<EModelEndpoint | string>([\n  EModelEndpoint.gptPlugins,\n  EModelEndpoint.anthropic,\n  EModelEndpoint.google,\n  EModelEndpoint.openAI,\n  EModelEndpoint.azureOpenAI,\n  EModelEndpoint.custom,\n  EModelEndpoint.agents,\n  EModelEndpoint.bedrock,\n]);\n\nexport const supportsBalanceCheck = {\n  [EModelEndpoint.custom]: true,\n  [EModelEndpoint.openAI]: true,\n  [EModelEndpoint.anthropic]: true,\n  [EModelEndpoint.gptPlugins]: true,\n  [EModelEndpoint.assistants]: true,\n  [EModelEndpoint.agents]: true,\n  [EModelEndpoint.azureAssistants]: true,\n  [EModelEndpoint.azureOpenAI]: true,\n  [EModelEndpoint.bedrock]: true,\n};\n\nexport const visionModels = [\n  'gpt-4o',\n  'gpt-4o-mini',\n  'gpt-4-turbo',\n  'gpt-4-vision',\n  'llava',\n  'llava-13b',\n  'gemini-pro-vision',\n  'claude-3',\n  'gemini-1.5',\n  'gemini-exp',\n  'moondream',\n  'llama3.2-vision',\n  'llama-3.2-90b-vision',\n  'llama-3.2-11b-vision',\n  'llama-3-2-90b-vision',\n  'llama-3-2-11b-vision',\n];\nexport enum VisionModes {\n  generative = 'generative',\n  agents = 'agents',\n}\n\nexport function validateVisionModel({\n  model,\n  additionalModels = [],\n  availableModels,\n}: {\n  model: string;\n  additionalModels?: string[];\n  availableModels?: string[];\n}) {\n  if (!model) {\n    return false;\n  }\n\n  if (model === 'gpt-4-turbo-preview') {\n    return false;\n  }\n\n  if (availableModels && !availableModels.includes(model)) {\n    return false;\n  }\n\n  return visionModels.concat(additionalModels).some((visionModel) => model.includes(visionModel));\n}\n\nexport const imageGenTools = new Set(['dalle', 'dall-e', 'stable-diffusion']);\n\n/**\n * Enum for collections using infinite queries\n */\nexport enum InfiniteCollections {\n  /**\n   * Collection for Prompt Groups\n   */\n  PROMPT_GROUPS = 'promptGroups',\n  /**\n   * Collection for Shared Links\n   */\n  SHARED_LINKS = 'sharedLinks',\n}\n\n/**\n * Enum for time intervals\n */\nexport enum Time {\n  ONE_HOUR = 3600000,\n  THIRTY_MINUTES = 1800000,\n  TEN_MINUTES = 600000,\n  FIVE_MINUTES = 300000,\n  TWO_MINUTES = 120000,\n  ONE_MINUTE = 60000,\n  THIRTY_SECONDS = 30000,\n}\n\n/**\n * Enum for cache keys.\n */\nexport enum CacheKeys {\n  /**\n   * Key for the config store namespace.\n   */\n  CONFIG_STORE = 'configStore',\n  /**\n   * Key for the config store namespace.\n   */\n  ROLES = 'roles',\n  /**\n   * Key for the plugins cache.\n   */\n  PLUGINS = 'plugins',\n  /**\n   * Key for the title generation cache.\n   */\n  GEN_TITLE = 'genTitle',\n  /**\n  /**\n   * Key for the tools cache.\n   */\n  TOOLS = 'tools',\n  /**\n   * Key for the model config cache.\n   */\n  MODELS_CONFIG = 'modelsConfig',\n  /**\n   * Key for the model queries cache.\n   */\n  MODEL_QUERIES = 'modelQueries',\n  /**\n   * Key for the default startup config cache.\n   */\n  STARTUP_CONFIG = 'startupConfig',\n  /**\n   * Key for the default endpoint config cache.\n   */\n  ENDPOINT_CONFIG = 'endpointsConfig',\n  /**\n   * Key for accessing the model token config cache.\n   */\n  TOKEN_CONFIG = 'tokenConfig',\n  /**\n   * Key for the custom config cache.\n   */\n  CUSTOM_CONFIG = 'customConfig',\n  /**\n   * Key for accessing Abort Keys\n   */\n  ABORT_KEYS = 'abortKeys',\n  /**\n   * Key for the override config cache.\n   */\n  OVERRIDE_CONFIG = 'overrideConfig',\n  /**\n   * Key for the bans cache.\n   */\n  BANS = 'bans',\n  /**\n   * Key for the encoded domains cache.\n   * Used by Azure OpenAI Assistants.\n   */\n  ENCODED_DOMAINS = 'encoded_domains',\n  /**\n   * Key for the cached audio run Ids.\n   */\n  AUDIO_RUNS = 'audioRuns',\n  /**\n   * Key for in-progress messages.\n   */\n  MESSAGES = 'messages',\n}\n\n/**\n * Enum for violation types, used to identify, log, and cache violations.\n */\nexport enum ViolationTypes {\n  /**\n   * File Upload Violations (exceeding limit).\n   */\n  FILE_UPLOAD_LIMIT = 'file_upload_limit',\n  /**\n   * Illegal Model Request (not available).\n   */\n  ILLEGAL_MODEL_REQUEST = 'illegal_model_request',\n  /**\n   * Token Limit Violation.\n   */\n  TOKEN_BALANCE = 'token_balance',\n  /**\n   * An issued ban.\n   */\n  BAN = 'ban',\n  /**\n   * TTS Request Limit Violation.\n   */\n  TTS_LIMIT = 'tts_limit',\n  /**\n   * STT Request Limit Violation.\n   */\n  STT_LIMIT = 'stt_limit',\n  /**\n   * Reset Password Limit Violation.\n   */\n  RESET_PASSWORD_LIMIT = 'reset_password_limit',\n  /**\n   * Verify Email Limit Violation.\n   */\n  VERIFY_EMAIL_LIMIT = 'verify_email_limit',\n  /**\n   * Verify Conversation Access violation.\n   */\n  CONVO_ACCESS = 'convo_access',\n  /**\n   * Tool Call Limit Violation.\n   */\n  TOOL_CALL_LIMIT = 'tool_call_limit',\n}\n\n/**\n * Enum for error message types that are not \"violations\" as above, used to identify client-facing errors.\n */\nexport enum ErrorTypes {\n  /**\n   * No User-provided Key.\n   */\n  NO_USER_KEY = 'no_user_key',\n  /**\n   * Expired User-provided Key.\n   */\n  EXPIRED_USER_KEY = 'expired_user_key',\n  /**\n   * Invalid User-provided Key.\n   */\n  INVALID_USER_KEY = 'invalid_user_key',\n  /**\n   * No Base URL Provided.\n   */\n  NO_BASE_URL = 'no_base_url',\n  /**\n   * Moderation error\n   */\n  MODERATION = 'moderation',\n  /**\n   * Prompt exceeds max length\n   */\n  INPUT_LENGTH = 'INPUT_LENGTH',\n  /**\n   * Invalid request error, API rejected request\n   */\n  INVALID_REQUEST = 'invalid_request_error',\n  /**\n   * Invalid request error, API rejected request\n   */\n  NO_SYSTEM_MESSAGES = 'no_system_messages',\n}\n\n/**\n * Enum for authentication keys.\n */\nexport enum AuthKeys {\n  /**\n   * Key for the Service Account to use Vertex AI.\n   */\n  GOOGLE_SERVICE_KEY = 'GOOGLE_SERVICE_KEY',\n  /**\n   * API key to use Google Generative AI.\n   *\n   * Note: this is not for Environment Variables, but to access encrypted object values.\n   */\n  GOOGLE_API_KEY = 'GOOGLE_API_KEY',\n}\n\n/**\n * Enum for Image Detail Cost.\n *\n * **Low Res Fixed Cost:** `85`\n *\n * **High Res Calculation:**\n *\n * Number of `512px` Tiles * `170` + `85` (Additional Cost)\n */\nexport enum ImageDetailCost {\n  /**\n   * Low resolution is a fixed value.\n   */\n  LOW = 85,\n  /**\n   * High resolution Cost Per Tile\n   */\n  HIGH = 170,\n  /**\n   * Additional Cost added to High Resolution Total Cost\n   */\n  ADDITIONAL = 85,\n}\n\n/**\n * Tab values for Settings Dialog\n */\nexport enum SettingsTabValues {\n  /**\n   * Tab for General Settings\n   */\n  GENERAL = 'general',\n  /**\n   * Tab for Chat Settings\n   */\n  CHAT = 'chat',\n  /**\n   * Tab for Speech Settings\n   */\n  SPEECH = 'speech',\n  /**\n   * Tab for Beta Features\n   */\n  BETA = 'beta',\n  /**\n   * Tab for Data Controls\n   */\n  DATA = 'data',\n  /**\n   * Tab for Account Settings\n   */\n  ACCOUNT = 'account',\n  /**\n   * Chat input commands\n   */\n  COMMANDS = 'commands',\n}\n\nexport enum STTProviders {\n  /**\n   * Provider for OpenAI STT\n   */\n  OPENAI = 'openai',\n  /**\n   * Provider for Microsoft Azure STT\n   */\n  AZURE_OPENAI = 'azureOpenAI',\n}\n\nexport enum TTSProviders {\n  /**\n   * Provider for OpenAI TTS\n   */\n  OPENAI = 'openai',\n  /**\n   * Provider for Microsoft Azure OpenAI TTS\n   */\n  AZURE_OPENAI = 'azureOpenAI',\n  /**\n   * Provider for ElevenLabs TTS\n   */\n  ELEVENLABS = 'elevenlabs',\n  /**\n   * Provider for LocalAI TTS\n   */\n  LOCALAI = 'localai',\n}\n\n/** Enum for app-wide constants */\nexport enum Constants {\n  /** Key for the app's version. */\n  VERSION = 'v0.7.5',\n  /** Key for the Custom Config's version (librechat.yaml). */\n  CONFIG_VERSION = '1.1.8',\n  /** Standard value for the first message's `parentMessageId` value, to indicate no parent exists. */\n  NO_PARENT = '00000000-0000-0000-0000-000000000000',\n  /** Standard value for the initial conversationId before a request is sent */\n  NEW_CONVO = 'new',\n  /** Standard value for the conversationId used for search queries */\n  SEARCH = 'search',\n  /** Fixed, encoded domain length for Azure OpenAI Assistants Function name parsing. */\n  ENCODED_DOMAIN_LENGTH = 10,\n  /** Identifier for using current_model in multi-model requests. */\n  CURRENT_MODEL = 'current_model',\n  /** Common divider for text values */\n  COMMON_DIVIDER = '__',\n  /** Max length for commands */\n  COMMANDS_MAX_LENGTH = 56,\n  /** Default Stream Rate (ms) */\n  DEFAULT_STREAM_RATE = 1,\n  /** Saved Tag */\n  SAVED_TAG = 'Saved',\n  /** Max number of Conversation starters for Agents/Assistants */\n  MAX_CONVO_STARTERS = 4,\n  /** Global/instance Project Name */\n  GLOBAL_PROJECT_NAME = 'instance',\n}\n\nexport enum LocalStorageKeys {\n  /** Key for the admin defined App Title */\n  APP_TITLE = 'appTitle',\n  /** Key for the last conversation setup. */\n  LAST_CONVO_SETUP = 'lastConversationSetup',\n  /** Key for the last BingAI Settings */\n  LAST_BING = 'lastBingSettings',\n  /** Key for the last selected model. */\n  LAST_MODEL = 'lastSelectedModel',\n  /** Key for the last selected tools. */\n  LAST_TOOLS = 'lastSelectedTools',\n  /** Key for the last selected spec by name*/\n  LAST_SPEC = 'lastSelectedSpec',\n  /** Key for temporary files to delete */\n  FILES_TO_DELETE = 'filesToDelete',\n  /** Prefix key for the last selected assistant ID by index */\n  ASST_ID_PREFIX = 'assistant_id__',\n  /** Prefix key for the last selected agent ID by index */\n  AGENT_ID_PREFIX = 'agent_id__',\n  /** Key for the last selected fork setting */\n  FORK_SETTING = 'forkSetting',\n  /** Key for remembering the last selected option, instead of manually selecting */\n  REMEMBER_FORK_OPTION = 'rememberDefaultFork',\n  /** Key for remembering the split at target fork option modifier */\n  FORK_SPLIT_AT_TARGET = 'splitAtTarget',\n  /** Key for saving text drafts */\n  TEXT_DRAFT = 'textDraft_',\n  /** Key for saving file drafts */\n  FILES_DRAFT = 'filesDraft_',\n  /** Key for last Selected Prompt Category */\n  LAST_PROMPT_CATEGORY = 'lastPromptCategory',\n  /** Key for rendering User Messages as Markdown */\n  ENABLE_USER_MSG_MARKDOWN = 'enableUserMsgMarkdown',\n  /** Key for displaying analysis tool code input */\n  SHOW_ANALYSIS_CODE = 'showAnalysisCode',\n}\n\nexport enum ForkOptions {\n  /** Key for direct path option */\n  DIRECT_PATH = 'directPath',\n  /** Key for including branches */\n  INCLUDE_BRANCHES = 'includeBranches',\n  /** Key for target level fork (default) */\n  TARGET_LEVEL = '',\n}\n\n/**\n * Enum for Cohere related constants\n */\nexport enum CohereConstants {\n  /**\n   * Cohere API Endpoint, for special handling\n   */\n  API_URL = 'https://api.cohere.ai/v1',\n  /**\n   * Role for \"USER\" messages\n   */\n  ROLE_USER = 'USER',\n  /**\n   * Role for \"SYSTEM\" messages\n   */\n  ROLE_SYSTEM = 'SYSTEM',\n  /**\n   * Role for \"CHATBOT\" messages\n   */\n  ROLE_CHATBOT = 'CHATBOT',\n  /**\n   * Title message as required by Cohere\n   */\n  TITLE_MESSAGE = 'TITLE:',\n}\n\nexport enum SystemCategories {\n  ALL = 'sys__all__sys',\n  MY_PROMPTS = 'sys__my__prompts__sys',\n  NO_CATEGORY = 'sys__no__category__sys',\n  SHARED_PROMPTS = 'sys__shared__prompts__sys',\n}\n\nexport const providerEndpointMap = {\n  [EModelEndpoint.openAI]: EModelEndpoint.openAI,\n  [EModelEndpoint.bedrock]: EModelEndpoint.bedrock,\n  [EModelEndpoint.azureOpenAI]: EModelEndpoint.openAI,\n  [EModelEndpoint.anthropic]: EModelEndpoint.anthropic,\n};\n","import type { AssistantsEndpoint } from './schemas';\n\nexport const health = () => '/health';\nexport const user = () => '/api/user';\n\nexport const balance = () => '/api/balance';\n\nexport const userPlugins = () => '/api/user/plugins';\n\nexport const deleteUser = () => '/api/user/delete';\n\nexport const messages = (conversationId: string, messageId?: string) =>\n  `/api/messages/${conversationId}${messageId ? `/${messageId}` : ''}`;\n\nconst shareRoot = '/api/share';\nexport const shareMessages = (shareId: string) => `${shareRoot}/${shareId}`;\nexport const getSharedLinks = (pageNumber: string, isPublic: boolean) =>\n  `${shareRoot}?pageNumber=${pageNumber}&isPublic=${isPublic}`;\nexport const createSharedLink = shareRoot;\nexport const updateSharedLink = shareRoot;\n\nconst keysEndpoint = '/api/keys';\n\nexport const keys = () => keysEndpoint;\n\nexport const userKeyQuery = (name: string) => `${keysEndpoint}?name=${name}`;\n\nexport const revokeUserKey = (name: string) => `${keysEndpoint}/${name}`;\n\nexport const revokeAllUserKeys = () => `${keysEndpoint}?all=true`;\n\nexport const abortRequest = (endpoint: string) => `/api/ask/${endpoint}/abort`;\n\nexport const conversationsRoot = '/api/convos';\n\nexport const conversations = (pageNumber: string, isArchived?: boolean, tags?: string[]) =>\n  `${conversationsRoot}?pageNumber=${pageNumber}${\n    isArchived === true ? '&isArchived=true' : ''\n  }${tags?.map((tag) => `&tags=${tag}`).join('')}`;\n\nexport const conversationById = (id: string) => `${conversationsRoot}/${id}`;\n\nexport const genTitle = () => `${conversationsRoot}/gen_title`;\n\nexport const updateConversation = () => `${conversationsRoot}/update`;\n\nexport const deleteConversation = () => `${conversationsRoot}/clear`;\n\nexport const importConversation = () => `${conversationsRoot}/import`;\n\nexport const forkConversation = () => `${conversationsRoot}/fork`;\n\nexport const search = (q: string, pageNumber: string) =>\n  `/api/search?q=${q}&pageNumber=${pageNumber}`;\n\nexport const searchEnabled = () => '/api/search/enable';\n\nexport const presets = () => '/api/presets';\n\nexport const deletePreset = () => '/api/presets/delete';\n\nexport const aiEndpoints = () => '/api/endpoints';\n\nexport const endpointsConfigOverride = () => '/api/endpoints/config/override';\n\nexport const models = () => '/api/models';\n\nexport const tokenizer = () => '/api/tokenizer';\n\nexport const login = () => '/api/auth/login';\n\nexport const logout = () => '/api/auth/logout';\n\nexport const register = () => '/api/auth/register';\n\nexport const loginFacebook = () => '/api/auth/facebook';\n\nexport const loginGoogle = () => '/api/auth/google';\n\nexport const refreshToken = (retry?: boolean) =>\n  `/api/auth/refresh${retry === true ? '?retry=true' : ''}`;\n\nexport const requestPasswordReset = () => '/api/auth/requestPasswordReset';\n\nexport const resetPassword = () => '/api/auth/resetPassword';\n\nexport const verifyEmail = () => '/api/user/verify';\n\nexport const resendVerificationEmail = () => '/api/user/verify/resend';\n\nexport const plugins = () => '/api/plugins';\n\nexport const config = () => '/api/config';\n\nexport const prompts = () => '/api/prompts';\n\nexport const assistants = ({\n  path = '',\n  options,\n  version,\n  endpoint,\n  isAvatar,\n}: {\n  path?: string;\n  options?: object;\n  endpoint?: AssistantsEndpoint;\n  version: number | string;\n  isAvatar?: boolean;\n}) => {\n  let url = isAvatar === true ? `${images()}/assistants` : `/api/assistants/v${version}`;\n\n  if (path && path !== '') {\n    url += `/${path}`;\n  }\n\n  if (endpoint) {\n    options = {\n      ...(options ?? {}),\n      endpoint,\n    };\n  }\n\n  if (options && Object.keys(options).length > 0) {\n    const queryParams = new URLSearchParams(options as Record<string, string>).toString();\n    url += `?${queryParams}`;\n  }\n\n  return url;\n};\n\nexport const agents = ({ path = '', options }: { path?: string; options?: object }) => {\n  let url = '/api/agents';\n\n  if (path && path !== '') {\n    url += `/${path}`;\n  }\n\n  if (options && Object.keys(options).length > 0) {\n    const queryParams = new URLSearchParams(options as Record<string, string>).toString();\n    url += `?${queryParams}`;\n  }\n\n  return url;\n};\n\nexport const files = () => '/api/files';\n\nexport const images = () => `${files()}/images`;\n\nexport const avatar = () => `${images()}/avatar`;\n\nexport const speech = () => `${files()}/speech`;\n\nexport const speechToText = () => `${speech()}/stt`;\n\nexport const textToSpeech = () => `${speech()}/tts`;\n\nexport const textToSpeechManual = () => `${textToSpeech()}/manual`;\n\nexport const textToSpeechVoices = () => `${textToSpeech()}/voices`;\n\nexport const getCustomConfigSpeech = () => `${speech()}/config/get`;\n\nexport const getPromptGroup = (_id: string) => `${prompts()}/groups/${_id}`;\n\nexport const getPromptGroupsWithFilters = (filter: object) => {\n  let url = `${prompts()}/groups`;\n  if (Object.keys(filter).length > 0) {\n    const queryParams = new URLSearchParams(filter as Record<string, string>).toString();\n    url += `?${queryParams}`;\n  }\n  return url;\n};\n\nexport const getPromptsWithFilters = (filter: object) => {\n  let url = prompts();\n  if (Object.keys(filter).length > 0) {\n    const queryParams = new URLSearchParams(filter as Record<string, string>).toString();\n    url += `?${queryParams}`;\n  }\n  return url;\n};\n\nexport const getPrompt = (_id: string) => `${prompts()}/${_id}`;\n\nexport const getRandomPrompts = (limit: number, skip: number) =>\n  `${prompts()}/random?limit=${limit}&skip=${skip}`;\n\nexport const postPrompt = prompts;\n\nexport const updatePromptGroup = getPromptGroup;\n\nexport const updatePromptLabels = (_id: string) => `${getPrompt(_id)}/labels`;\n\nexport const updatePromptTag = (_id: string) => `${getPrompt(_id)}/tags/production`;\n\nexport const deletePromptGroup = getPromptGroup;\n\nexport const deletePrompt = ({ _id, groupId }: { _id: string; groupId: string }) => {\n  return `${prompts()}/${_id}?groupId=${groupId}`;\n};\n\nexport const getCategories = () => '/api/categories';\n\nexport const getAllPromptGroups = () => `${prompts()}/all`;\n\n/* Roles */\nexport const roles = () => '/api/roles';\nexport const getRole = (roleName: string) => `${roles()}/${roleName.toLowerCase()}`;\nexport const updatePromptPermissions = (roleName: string) => `${getRole(roleName)}/prompts`;\nexport const updateAgentPermissions = (roleName: string) => `${getRole(roleName)}/agents`;\n\n/* Conversation Tags */\nexport const conversationTags = (tag?: string) =>\n  `/api/tags${tag != null && tag ? `/${encodeURIComponent(tag)}` : ''}`;\n\nexport const conversationTagsList = (pageNumber: string, sort?: string, order?: string) =>\n  `${conversationTags()}/list?pageNumber=${pageNumber}${sort ? `&sort=${sort}` : ''}${\n    order ? `&order=${order}` : ''\n  }`;\n\nexport const addTagToConversation = (conversationId: string) =>\n  `${conversationTags()}/convo/${conversationId}`;\n\nexport const userTerms = () => '/api/user/terms';\nexport const acceptUserTerms = () => '/api/user/terms/accept';\nexport const banner = () => '/api/banner';\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport axios, { AxiosError, AxiosRequestConfig } from 'axios';\nimport * as endpoints from './api-endpoints';\nimport { setTokenHeader } from './headers-helpers';\nimport type * as t from './types';\n\nasync function _get<T>(url: string, options?: AxiosRequestConfig): Promise<T> {\n  const response = await axios.get(url, { ...options });\n  return response.data;\n}\n\nasync function _getResponse<T>(url: string, options?: AxiosRequestConfig): Promise<T> {\n  return await axios.get(url, { ...options });\n}\n\nasync function _post(url: string, data?: any) {\n  const response = await axios.post(url, JSON.stringify(data), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n  return response.data;\n}\n\nasync function _postMultiPart(url: string, formData: FormData, options?: AxiosRequestConfig) {\n  const response = await axios.post(url, formData, {\n    ...options,\n    headers: { 'Content-Type': 'multipart/form-data' },\n  });\n  return response.data;\n}\n\nasync function _postTTS(url: string, formData: FormData, options?: AxiosRequestConfig) {\n  const response = await axios.post(url, formData, {\n    ...options,\n    headers: { 'Content-Type': 'multipart/form-data' },\n    responseType: 'arraybuffer',\n  });\n  return response.data;\n}\n\nasync function _put(url: string, data?: any) {\n  const response = await axios.put(url, JSON.stringify(data), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n  return response.data;\n}\n\nasync function _delete<T>(url: string): Promise<T> {\n  const response = await axios.delete(url);\n  return response.data;\n}\n\nasync function _deleteWithOptions<T>(url: string, options?: AxiosRequestConfig): Promise<T> {\n  const response = await axios.delete(url, { ...options });\n  return response.data;\n}\n\nasync function _patch(url: string, data?: any) {\n  const response = await axios.patch(url, JSON.stringify(data), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n  return response.data;\n}\n\nlet isRefreshing = false;\nlet failedQueue: { resolve: (value?: any) => void; reject: (reason?: any) => void }[] = [];\n\nconst refreshToken = (retry?: boolean): Promise<t.TRefreshTokenResponse | undefined> =>\n  _post(endpoints.refreshToken(retry));\n\nconst dispatchTokenUpdatedEvent = (token: string) => {\n  setTokenHeader(token);\n  window.dispatchEvent(new CustomEvent('tokenUpdated', { detail: token }));\n};\n\nconst processQueue = (error: AxiosError | null, token: string | null = null) => {\n  failedQueue.forEach((prom) => {\n    if (error) {\n      prom.reject(error);\n    } else {\n      prom.resolve(token);\n    }\n  });\n  failedQueue = [];\n};\n\naxios.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n    if (!error.response) {\n      return Promise.reject(error);\n    }\n\n    if (error.response.status === 401 && !originalRequest._retry) {\n      console.warn('401 error, refreshing token');\n      originalRequest._retry = true;\n\n      if (isRefreshing) {\n        try {\n          const token = await new Promise((resolve, reject) => {\n            failedQueue.push({ resolve, reject });\n          });\n          originalRequest.headers['Authorization'] = 'Bearer ' + token;\n          return await axios(originalRequest);\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      }\n\n      isRefreshing = true;\n\n      try {\n        const response = await refreshToken(\n          // Handle edge case where we get a blank screen if the initial 401 error is from a refresh token request\n          originalRequest.url?.includes('api/auth/refresh') === true ? true : false,\n        );\n\n        const token = response?.token ?? '';\n\n        if (token) {\n          originalRequest.headers['Authorization'] = 'Bearer ' + token;\n          dispatchTokenUpdatedEvent(token);\n          processQueue(null, token);\n          return await axios(originalRequest);\n        } else if (window.location.href.includes('share/')) {\n          console.log(\n            `Refresh token failed from shared link, attempting request to ${originalRequest.url}`,\n          );\n        } else {\n          window.location.href = '/login';\n        }\n      } catch (err) {\n        processQueue(err as AxiosError, null);\n        return Promise.reject(err);\n      } finally {\n        isRefreshing = false;\n      }\n    }\n\n    return Promise.reject(error);\n  },\n);\n\nexport default {\n  get: _get,\n  getResponse: _getResponse,\n  post: _post,\n  postMultiPart: _postMultiPart,\n  postTTS: _postTTS,\n  put: _put,\n  delete: _delete,\n  deleteWithOptions: _deleteWithOptions,\n  patch: _patch,\n  refreshToken,\n  dispatchTokenUpdatedEvent,\n};\n","import axios from 'axios';\n\nexport function setAcceptLanguageHeader(value: string): void {\n  axios.defaults.headers.common['Accept-Language'] = value;\n}\n\nexport function setTokenHeader(token: string) {\n  axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\n}\n","import type { AxiosResponse } from 'axios';\nimport type * as t from './types';\nimport * as endpoints from './api-endpoints';\nimport * as a from './types/assistants';\nimport * as m from './types/mutations';\nimport * as q from './types/queries';\nimport * as f from './types/files';\nimport * as config from './config';\nimport request from './request';\nimport * as s from './schemas';\nimport * as r from './roles';\n\nexport function abortRequestWithMessage(\n  endpoint: string,\n  abortKey: string,\n  message: string,\n): Promise<void> {\n  return request.post(endpoints.abortRequest(endpoint), { arg: { abortKey, message } });\n}\n\nexport function revokeUserKey(name: string): Promise<unknown> {\n  return request.delete(endpoints.revokeUserKey(name));\n}\n\nexport function revokeAllUserKeys(): Promise<unknown> {\n  return request.delete(endpoints.revokeAllUserKeys());\n}\n\nexport function deleteUser(): Promise<s.TPreset> {\n  return request.delete(endpoints.deleteUser());\n}\n\nexport function getMessagesByConvoId(conversationId: string): Promise<s.TMessage[]> {\n  if (conversationId === 'new') {\n    return Promise.resolve([]);\n  }\n  return request.get(endpoints.messages(conversationId));\n}\n\nexport function getSharedMessages(shareId: string): Promise<t.TSharedMessagesResponse> {\n  return request.get(endpoints.shareMessages(shareId));\n}\n\nexport const listSharedLinks = (\n  params?: q.SharedLinkListParams,\n): Promise<q.SharedLinksResponse> => {\n  const pageNumber = (params?.pageNumber ?? '1') || '1'; // Default to page 1 if not provided\n  const isPublic = params?.isPublic ?? true; // Default to true if not provided\n  return request.get(endpoints.getSharedLinks(pageNumber, isPublic));\n};\n\nexport function getSharedLink(shareId: string): Promise<t.TSharedLinkResponse> {\n  return request.get(endpoints.shareMessages(shareId));\n}\n\nexport function createSharedLink(payload: t.TSharedLinkRequest): Promise<t.TSharedLinkResponse> {\n  return request.post(endpoints.createSharedLink, payload);\n}\n\nexport function updateSharedLink(payload: t.TSharedLinkRequest): Promise<t.TSharedLinkResponse> {\n  return request.patch(endpoints.updateSharedLink, payload);\n}\n\nexport function deleteSharedLink(shareId: string): Promise<t.TDeleteSharedLinkResponse> {\n  return request.delete(endpoints.shareMessages(shareId));\n}\n\nexport function updateMessage(payload: t.TUpdateMessageRequest): Promise<unknown> {\n  const { conversationId, messageId, text } = payload;\n  if (!conversationId) {\n    throw new Error('conversationId is required');\n  }\n\n  return request.put(endpoints.messages(conversationId, messageId), { text });\n}\n\nexport function updateMessageContent(payload: t.TUpdateMessageContent): Promise<unknown> {\n  const { conversationId, messageId, index, text } = payload;\n  if (!conversationId) {\n    throw new Error('conversationId is required');\n  }\n\n  return request.put(endpoints.messages(conversationId, messageId), { text, index });\n}\n\nexport function updateUserKey(payload: t.TUpdateUserKeyRequest) {\n  const { value } = payload;\n  if (!value) {\n    throw new Error('value is required');\n  }\n\n  return request.put(endpoints.keys(), payload);\n}\n\nexport function getPresets(): Promise<s.TPreset[]> {\n  return request.get(endpoints.presets());\n}\n\nexport function createPreset(payload: s.TPreset): Promise<s.TPreset> {\n  return request.post(endpoints.presets(), payload);\n}\n\nexport function updatePreset(payload: s.TPreset): Promise<s.TPreset> {\n  return request.post(endpoints.presets(), payload);\n}\n\nexport function deletePreset(arg: s.TPreset | undefined): Promise<m.PresetDeleteResponse> {\n  return request.post(endpoints.deletePreset(), arg);\n}\n\nexport function getSearchEnabled(): Promise<boolean> {\n  return request.get(endpoints.searchEnabled());\n}\n\nexport function getUser(): Promise<t.TUser> {\n  return request.get(endpoints.user());\n}\n\nexport function getUserBalance(): Promise<string> {\n  return request.get(endpoints.balance());\n}\n\nexport const updateTokenCount = (text: string) => {\n  return request.post(endpoints.tokenizer(), { arg: text });\n};\n\nexport const login = (payload: t.TLoginUser) => {\n  return request.post(endpoints.login(), payload);\n};\n\nexport const logout = () => {\n  return request.post(endpoints.logout());\n};\n\nexport const register = (payload: t.TRegisterUser) => {\n  return request.post(endpoints.register(), payload);\n};\n\nexport const userKeyQuery = (name: string): Promise<t.TCheckUserKeyResponse> =>\n  request.get(endpoints.userKeyQuery(name));\n\nexport const getLoginGoogle = () => {\n  return request.get(endpoints.loginGoogle());\n};\n\nexport const requestPasswordReset = (\n  payload: t.TRequestPasswordReset,\n): Promise<t.TRequestPasswordResetResponse> => {\n  return request.post(endpoints.requestPasswordReset(), payload);\n};\n\nexport const resetPassword = (payload: t.TResetPassword) => {\n  return request.post(endpoints.resetPassword(), payload);\n};\n\nexport const verifyEmail = (payload: t.TVerifyEmail): Promise<t.VerifyEmailResponse> => {\n  return request.post(endpoints.verifyEmail(), payload);\n};\n\nexport const resendVerificationEmail = (\n  payload: t.TResendVerificationEmail,\n): Promise<t.VerifyEmailResponse> => {\n  return request.post(endpoints.resendVerificationEmail(), payload);\n};\n\nexport const getAvailablePlugins = (): Promise<s.TPlugin[]> => {\n  return request.get(endpoints.plugins());\n};\n\nexport const updateUserPlugins = (payload: t.TUpdateUserPlugins) => {\n  return request.post(endpoints.userPlugins(), payload);\n};\n\n/* Config */\n\nexport const getStartupConfig = (): Promise<t.TStartupConfig> => {\n  return request.get(endpoints.config());\n};\n\nexport const getAIEndpoints = (): Promise<t.TEndpointsConfig> => {\n  return request.get(endpoints.aiEndpoints());\n};\n\nexport const getModels = async (): Promise<t.TModelsConfig> => {\n  return request.get(endpoints.models());\n};\n\nexport const getEndpointsConfigOverride = (): Promise<unknown | boolean> => {\n  return request.get(endpoints.endpointsConfigOverride());\n};\n\n/* Assistants */\n\nexport const createAssistant = ({\n  version,\n  ...data\n}: a.AssistantCreateParams): Promise<a.Assistant> => {\n  return request.post(endpoints.assistants({ version }), data);\n};\n\nexport const getAssistantById = ({\n  endpoint,\n  assistant_id,\n  version,\n}: {\n  endpoint: s.AssistantsEndpoint;\n  assistant_id: string;\n  version: number | string | number;\n}): Promise<a.Assistant> => {\n  return request.get(\n    endpoints.assistants({\n      path: assistant_id,\n      endpoint,\n      version,\n    }),\n  );\n};\n\nexport const updateAssistant = ({\n  assistant_id,\n  data,\n  version,\n}: {\n  assistant_id: string;\n  data: a.AssistantUpdateParams;\n  version: number | string;\n}): Promise<a.Assistant> => {\n  return request.patch(\n    endpoints.assistants({\n      path: assistant_id,\n      version,\n    }),\n    data,\n  );\n};\n\nexport const deleteAssistant = ({\n  assistant_id,\n  model,\n  endpoint,\n  version,\n}: m.DeleteAssistantBody & { version: number | string }): Promise<void> => {\n  return request.delete(\n    endpoints.assistants({\n      path: assistant_id,\n      options: { model, endpoint },\n      version,\n    }),\n  );\n};\n\nexport const listAssistants = (\n  params: a.AssistantListParams,\n  version: number | string,\n): Promise<a.AssistantListResponse> => {\n  return request.get(\n    endpoints.assistants({\n      version,\n      options: params,\n    }),\n  );\n};\n\nexport function getAssistantDocs({\n  endpoint,\n  version,\n}: {\n  endpoint: s.AssistantsEndpoint | string;\n  version: number | string;\n}): Promise<a.AssistantDocument[]> {\n  if (!s.isAssistantsEndpoint(endpoint)) {\n    return Promise.resolve([]);\n  }\n  return request.get(\n    endpoints.assistants({\n      path: 'documents',\n      version,\n      options: { endpoint },\n      endpoint: endpoint as s.AssistantsEndpoint,\n    }),\n  );\n}\n\n/* Tools */\n\nexport const getAvailableTools = (\n  _endpoint: s.AssistantsEndpoint | s.EModelEndpoint.agents,\n  version?: number | string,\n): Promise<s.TPlugin[]> => {\n  let path = '';\n  if (s.isAssistantsEndpoint(_endpoint)) {\n    const endpoint = _endpoint as s.AssistantsEndpoint;\n    path = endpoints.assistants({\n      path: 'tools',\n      endpoint: endpoint,\n      version: version ?? config.defaultAssistantsVersion[endpoint],\n    });\n  } else {\n    path = endpoints.agents({\n      path: 'tools',\n    });\n  }\n\n  return request.get(path);\n};\n\nexport const getVerifyAgentToolAuth = (\n  params: q.VerifyToolAuthParams,\n): Promise<q.VerifyToolAuthResponse> => {\n  return request.get(\n    endpoints.agents({\n      path: `tools/${params.toolId}/auth`,\n    }),\n  );\n};\n\nexport const callTool = <T extends m.ToolId>({\n  toolId,\n  toolParams,\n}: {\n  toolId: T;\n  toolParams: m.ToolParams<T>;\n}): Promise<m.ToolCallResponse> => {\n  return request.post(\n    endpoints.agents({\n      path: `tools/${toolId}/call`,\n    }),\n    toolParams,\n  );\n};\n\nexport const getToolCalls = (params: q.GetToolCallParams): Promise<q.ToolCallResults> => {\n  return request.get(\n    endpoints.agents({\n      path: 'tools/calls',\n      options: params,\n    }),\n  );\n};\n\n/* Files */\n\nexport const getFiles = (): Promise<f.TFile[]> => {\n  return request.get(endpoints.files());\n};\n\nexport const getFileConfig = (): Promise<f.FileConfig> => {\n  return request.get(`${endpoints.files()}/config`);\n};\n\nexport const uploadImage = (\n  data: FormData,\n  signal?: AbortSignal | null,\n): Promise<f.TFileUpload> => {\n  const requestConfig = signal ? { signal } : undefined;\n  return request.postMultiPart(endpoints.images(), data, requestConfig);\n};\n\nexport const uploadFile = (data: FormData, signal?: AbortSignal | null): Promise<f.TFileUpload> => {\n  const requestConfig = signal ? { signal } : undefined;\n  return request.postMultiPart(endpoints.files(), data, requestConfig);\n};\n\n/* actions */\n\nexport const updateAction = (data: m.UpdateActionVariables): Promise<m.UpdateActionResponse> => {\n  const { assistant_id, version, ...body } = data;\n  return request.post(\n    endpoints.assistants({\n      path: `actions/${assistant_id}`,\n      version,\n    }),\n    body,\n  );\n};\n\nexport function getActions(): Promise<a.Action[]> {\n  return request.get(\n    endpoints.agents({\n      path: 'actions',\n    }),\n  );\n}\n\nexport const deleteAction = async ({\n  assistant_id,\n  action_id,\n  model,\n  version,\n  endpoint,\n}: m.DeleteActionVariables & { version: number | string }): Promise<void> =>\n  request.delete(\n    endpoints.assistants({\n      path: `actions/${assistant_id}/${action_id}/${model}`,\n      version,\n      endpoint,\n    }),\n  );\n\n/**\n * Agents\n */\n\nexport const createAgent = ({ ...data }: a.AgentCreateParams): Promise<a.Agent> => {\n  return request.post(endpoints.agents({}), data);\n};\n\nexport const getAgentById = ({ agent_id }: { agent_id: string }): Promise<a.Agent> => {\n  return request.get(\n    endpoints.agents({\n      path: agent_id,\n    }),\n  );\n};\n\nexport const updateAgent = ({\n  agent_id,\n  data,\n}: {\n  agent_id: string;\n  data: a.AgentUpdateParams;\n}): Promise<a.Agent> => {\n  return request.patch(\n    endpoints.agents({\n      path: agent_id,\n    }),\n    data,\n  );\n};\n\nexport const deleteAgent = ({ agent_id }: m.DeleteAgentBody): Promise<void> => {\n  return request.delete(\n    endpoints.agents({\n      path: agent_id,\n    }),\n  );\n};\n\nexport const listAgents = (params: a.AgentListParams): Promise<a.AgentListResponse> => {\n  return request.get(\n    endpoints.agents({\n      options: params,\n    }),\n  );\n};\n\n/* Tools */\n\nexport const getAvailableAgentTools = (): Promise<s.TPlugin[]> => {\n  return request.get(\n    endpoints.agents({\n      path: 'tools',\n    }),\n  );\n};\n\n/* Actions */\n\nexport const updateAgentAction = (\n  data: m.UpdateAgentActionVariables,\n): Promise<m.UpdateAgentActionResponse> => {\n  const { agent_id, ...body } = data;\n  return request.post(\n    endpoints.agents({\n      path: `actions/${agent_id}`,\n    }),\n    body,\n  );\n};\n\nexport const deleteAgentAction = async ({\n  agent_id,\n  action_id,\n}: m.DeleteAgentActionVariables): Promise<void> =>\n  request.delete(\n    endpoints.agents({\n      path: `actions/${agent_id}/${action_id}`,\n    }),\n  );\n\n/**\n * Imports a conversations file.\n *\n * @param data - The FormData containing the file to import.\n * @returns A Promise that resolves to the import start response.\n */\nexport const importConversationsFile = (data: FormData): Promise<t.TImportResponse> => {\n  return request.postMultiPart(endpoints.importConversation(), data);\n};\n\nexport const uploadAvatar = (data: FormData): Promise<f.AvatarUploadResponse> => {\n  return request.postMultiPart(endpoints.avatar(), data);\n};\n\nexport const uploadAssistantAvatar = (data: m.AssistantAvatarVariables): Promise<a.Assistant> => {\n  return request.postMultiPart(\n    endpoints.assistants({\n      isAvatar: true,\n      path: `${data.assistant_id}/avatar`,\n      options: { model: data.model, endpoint: data.endpoint },\n      version: data.version,\n    }),\n    data.formData,\n  );\n};\n\nexport const uploadAgentAvatar = (data: m.AgentAvatarVariables): Promise<a.Agent> => {\n  return request.postMultiPart(\n    `${endpoints.images()}/agents/${data.agent_id}/avatar`,\n    data.formData,\n  );\n};\n\nexport const getFileDownload = async (userId: string, file_id: string): Promise<AxiosResponse> => {\n  return request.getResponse(`${endpoints.files()}/download/${userId}/${file_id}`, {\n    responseType: 'blob',\n    headers: {\n      Accept: 'application/octet-stream',\n    },\n  });\n};\n\nexport const getCodeOutputDownload = async (url: string): Promise<AxiosResponse> => {\n  return request.getResponse(url, {\n    responseType: 'blob',\n    headers: {\n      Accept: 'application/octet-stream',\n    },\n  });\n};\n\nexport const deleteFiles = async (payload: {\n  files: f.BatchFile[];\n  agent_id?: string;\n  assistant_id?: string;\n  tool_resource?: a.EToolResources;\n}): Promise<f.DeleteFilesResponse> =>\n  request.deleteWithOptions(endpoints.files(), {\n    data: payload,\n  });\n\n/* Speech */\n\nexport const speechToText = (data: FormData): Promise<f.SpeechToTextResponse> => {\n  return request.postMultiPart(endpoints.speechToText(), data);\n};\n\nexport const textToSpeech = (data: FormData): Promise<ArrayBuffer> => {\n  return request.postTTS(endpoints.textToSpeechManual(), data);\n};\n\nexport const getVoices = (): Promise<f.VoiceResponse> => {\n  return request.get(endpoints.textToSpeechVoices());\n};\n\nexport const getCustomConfigSpeech = (): Promise<t.TCustomConfigSpeechResponse> => {\n  return request.get(endpoints.getCustomConfigSpeech());\n};\n\n/* conversations */\n\nexport function forkConversation(payload: t.TForkConvoRequest): Promise<t.TForkConvoResponse> {\n  return request.post(endpoints.forkConversation(), payload);\n}\n\nexport function deleteConversation(payload: t.TDeleteConversationRequest) {\n  //todo: this should be a DELETE request\n  return request.post(endpoints.deleteConversation(), { arg: payload });\n}\n\nexport function clearAllConversations(): Promise<unknown> {\n  return request.post(endpoints.deleteConversation(), { arg: {} });\n}\n\nexport const listConversations = (\n  params?: q.ConversationListParams,\n): Promise<q.ConversationListResponse> => {\n  // Assuming params has a pageNumber property\n  const pageNumber = (params?.pageNumber ?? '1') || '1'; // Default to page 1 if not provided\n  const isArchived = params?.isArchived ?? false; // Default to false if not provided\n  const tags = params?.tags || []; // Default to an empty array if not provided\n  return request.get(endpoints.conversations(pageNumber, isArchived, tags));\n};\n\nexport const listConversationsByQuery = (\n  params?: q.ConversationListParams & { searchQuery?: string },\n): Promise<q.ConversationListResponse> => {\n  const pageNumber = (params?.pageNumber ?? '1') || '1'; // Default to page 1 if not provided\n  const searchQuery = params?.searchQuery ?? ''; // If no search query is provided, default to an empty string\n  // Update the endpoint to handle a search query\n  if (searchQuery !== '') {\n    return request.get(endpoints.search(searchQuery, pageNumber));\n  } else {\n    return request.get(endpoints.conversations(pageNumber));\n  }\n};\n\nexport const searchConversations = async (\n  q: string,\n  pageNumber: string,\n): Promise<t.TSearchResults> => {\n  return request.get(endpoints.search(q, pageNumber));\n};\n\nexport function getConversations(pageNumber: string): Promise<t.TGetConversationsResponse> {\n  return request.get(endpoints.conversations(pageNumber));\n}\n\nexport function getConversationById(id: string): Promise<s.TConversation> {\n  return request.get(endpoints.conversationById(id));\n}\n\nexport function updateConversation(\n  payload: t.TUpdateConversationRequest,\n): Promise<t.TUpdateConversationResponse> {\n  return request.post(endpoints.updateConversation(), { arg: payload });\n}\n\nexport function archiveConversation(\n  payload: t.TArchiveConversationRequest,\n): Promise<t.TArchiveConversationResponse> {\n  return request.post(endpoints.updateConversation(), { arg: payload });\n}\n\nexport function genTitle(payload: m.TGenTitleRequest): Promise<m.TGenTitleResponse> {\n  return request.post(endpoints.genTitle(), payload);\n}\n\nexport function getPrompt(id: string): Promise<{ prompt: t.TPrompt }> {\n  return request.get(endpoints.getPrompt(id));\n}\n\nexport function getPrompts(filter: t.TPromptsWithFilterRequest): Promise<t.TPrompt[]> {\n  return request.get(endpoints.getPromptsWithFilters(filter));\n}\n\nexport function getAllPromptGroups(): Promise<q.AllPromptGroupsResponse> {\n  return request.get(endpoints.getAllPromptGroups());\n}\n\nexport function getPromptGroups(\n  filter: t.TPromptGroupsWithFilterRequest,\n): Promise<t.PromptGroupListResponse> {\n  return request.get(endpoints.getPromptGroupsWithFilters(filter));\n}\n\nexport function getPromptGroup(id: string): Promise<t.TPromptGroup> {\n  return request.get(endpoints.getPromptGroup(id));\n}\n\nexport function createPrompt(payload: t.TCreatePrompt): Promise<t.TCreatePromptResponse> {\n  return request.post(endpoints.postPrompt(), payload);\n}\n\nexport function updatePromptGroup(\n  variables: t.TUpdatePromptGroupVariables,\n): Promise<t.TUpdatePromptGroupResponse> {\n  return request.patch(endpoints.updatePromptGroup(variables.id), variables.payload);\n}\n\nexport function deletePrompt(payload: t.TDeletePromptVariables): Promise<t.TDeletePromptResponse> {\n  return request.delete(endpoints.deletePrompt(payload));\n}\n\nexport function makePromptProduction(id: string): Promise<t.TMakePromptProductionResponse> {\n  return request.patch(endpoints.updatePromptTag(id));\n}\n\nexport function updatePromptLabels(\n  variables: t.TUpdatePromptLabelsRequest,\n): Promise<t.TUpdatePromptLabelsResponse> {\n  return request.patch(endpoints.updatePromptLabels(variables.id), variables.payload);\n}\n\nexport function deletePromptGroup(id: string): Promise<t.TDeletePromptGroupResponse> {\n  return request.delete(endpoints.deletePromptGroup(id));\n}\n\nexport function getCategories(): Promise<t.TGetCategoriesResponse> {\n  return request.get(endpoints.getCategories());\n}\n\nexport function getRandomPrompts(\n  variables: t.TGetRandomPromptsRequest,\n): Promise<t.TGetRandomPromptsResponse> {\n  return request.get(endpoints.getRandomPrompts(variables.limit, variables.skip));\n}\n\n/* Roles */\nexport function getRole(roleName: string): Promise<r.TRole> {\n  return request.get(endpoints.getRole(roleName));\n}\n\nexport function updatePromptPermissions(\n  variables: m.UpdatePromptPermVars,\n): Promise<m.UpdatePermResponse> {\n  return request.put(endpoints.updatePromptPermissions(variables.roleName), variables.updates);\n}\n\nexport function updateAgentPermissions(\n  variables: m.UpdateAgentPermVars,\n): Promise<m.UpdatePermResponse> {\n  return request.put(endpoints.updateAgentPermissions(variables.roleName), variables.updates);\n}\n\n/* Tags */\nexport function getConversationTags(): Promise<t.TConversationTagsResponse> {\n  return request.get(endpoints.conversationTags());\n}\n\nexport function createConversationTag(\n  payload: t.TConversationTagRequest,\n): Promise<t.TConversationTagResponse> {\n  return request.post(endpoints.conversationTags(), payload);\n}\n\nexport function updateConversationTag(\n  tag: string,\n  payload: t.TConversationTagRequest,\n): Promise<t.TConversationTagResponse> {\n  return request.put(endpoints.conversationTags(tag), payload);\n}\nexport function deleteConversationTag(tag: string): Promise<t.TConversationTagResponse> {\n  return request.delete(endpoints.conversationTags(tag));\n}\n\nexport function addTagToConversation(\n  conversationId: string,\n  payload: t.TTagConversationRequest,\n): Promise<t.TTagConversationResponse> {\n  return request.put(endpoints.addTagToConversation(conversationId), payload);\n}\nexport function rebuildConversationTags(): Promise<t.TConversationTagsResponse> {\n  return request.post(endpoints.conversationTags('rebuild'));\n}\n\nexport function healthCheck(): Promise<string> {\n  return request.get(endpoints.health());\n}\n\nexport function getUserTerms(): Promise<t.TUserTermsResponse> {\n  return request.get(endpoints.userTerms());\n}\n\nexport function acceptTerms(): Promise<t.TAcceptTermsResponse> {\n  return request.post(endpoints.acceptUserTerms());\n}\n\nexport function getBanner(): Promise<t.TBannerResponse> {\n  return request.get(endpoints.banner());\n}\n","export enum QueryKeys {\n  messages = 'messages',\n  sharedMessages = 'sharedMessages',\n  sharedLinks = 'sharedLinks',\n  allConversations = 'allConversations',\n  archivedConversations = 'archivedConversations',\n  searchConversations = 'searchConversations',\n  conversation = 'conversation',\n  searchEnabled = 'searchEnabled',\n  user = 'user',\n  name = 'name', // user key name\n  models = 'models',\n  balance = 'balance',\n  endpoints = 'endpoints',\n  presets = 'presets',\n  searchResults = 'searchResults',\n  tokenCount = 'tokenCount',\n  availablePlugins = 'availablePlugins',\n  startupConfig = 'startupConfig',\n  assistants = 'assistants',\n  assistant = 'assistant',\n  agents = 'agents',\n  agent = 'agent',\n  endpointsConfigOverride = 'endpointsConfigOverride',\n  files = 'files',\n  fileConfig = 'fileConfig',\n  tools = 'tools',\n  toolAuth = 'toolAuth',\n  toolCalls = 'toolCalls',\n  agentTools = 'agentTools',\n  actions = 'actions',\n  assistantDocs = 'assistantDocs',\n  agentDocs = 'agentDocs',\n  fileDownload = 'fileDownload',\n  voices = 'voices',\n  customConfigSpeech = 'customConfigSpeech',\n  prompts = 'prompts',\n  prompt = 'prompt',\n  promptGroups = 'promptGroups',\n  allPromptGroups = 'allPromptGroups',\n  promptGroup = 'promptGroup',\n  categories = 'categories',\n  randomPrompts = 'randomPrompts',\n  roles = 'roles',\n  conversationTags = 'conversationTags',\n  health = 'health',\n  userTerms = 'userTerms',\n  banner = 'banner',\n}\n\nexport enum MutationKeys {\n  fileUpload = 'fileUpload',\n  fileDelete = 'fileDelete',\n  updatePreset = 'updatePreset',\n  deletePreset = 'deletePreset',\n  logoutUser = 'logoutUser',\n  avatarUpload = 'avatarUpload',\n  speechToText = 'speechToText',\n  textToSpeech = 'textToSpeech',\n  assistantAvatarUpload = 'assistantAvatarUpload',\n  agentAvatarUpload = 'agentAvatarUpload',\n  updateAction = 'updateAction',\n  updateAgentAction = 'updateAgentAction',\n  deleteAction = 'deleteAction',\n  deleteAgentAction = 'deleteAgentAction',\n  deleteUser = 'deleteUser',\n  updateRole = 'updateRole',\n}\n","import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport type {\n  UseQueryOptions,\n  UseMutationResult,\n  QueryObserverResult,\n} from '@tanstack/react-query';\nimport { initialModelsConfig, LocalStorageKeys } from '../config';\nimport { defaultOrderQuery } from '../types/assistants';\nimport * as dataService from '../data-service';\nimport * as m from '../types/mutations';\nimport { QueryKeys } from '../keys';\nimport request from '../request';\nimport * as s from '../schemas';\nimport * as t from '../types';\n\nexport const useAbortRequestWithMessage = (): UseMutationResult<\n  void,\n  Error,\n  { endpoint: string; abortKey: string; message: string }\n> => {\n  const queryClient = useQueryClient();\n  return useMutation(\n    ({ endpoint, abortKey, message }) =>\n      dataService.abortRequestWithMessage(endpoint, abortKey, message),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries([QueryKeys.balance]);\n      },\n    },\n  );\n};\n\nexport const useGetUserQuery = (\n  config?: UseQueryOptions<t.TUser>,\n): QueryObserverResult<t.TUser> => {\n  return useQuery<t.TUser>([QueryKeys.user], () => dataService.getUser(), {\n    refetchOnWindowFocus: false,\n    refetchOnReconnect: false,\n    refetchOnMount: false,\n    retry: false,\n    ...config,\n  });\n};\n\nexport const useGetMessagesByConvoId = <TData = s.TMessage[]>(\n  id: string,\n  config?: UseQueryOptions<s.TMessage[], unknown, TData>,\n): QueryObserverResult<TData> => {\n  return useQuery<s.TMessage[], unknown, TData>(\n    [QueryKeys.messages, id],\n    () => dataService.getMessagesByConvoId(id),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      ...config,\n    },\n  );\n};\n\nexport const useGetSharedMessages = (\n  shareId: string,\n  config?: UseQueryOptions<t.TSharedMessagesResponse>,\n): QueryObserverResult<t.TSharedMessagesResponse> => {\n  return useQuery<t.TSharedMessagesResponse>(\n    [QueryKeys.sharedMessages, shareId],\n    () => dataService.getSharedMessages(shareId),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      ...config,\n    },\n  );\n};\n\nexport const useGetUserBalance = (\n  config?: UseQueryOptions<string>,\n): QueryObserverResult<string> => {\n  return useQuery<string>([QueryKeys.balance], () => dataService.getUserBalance(), {\n    refetchOnWindowFocus: true,\n    refetchOnReconnect: true,\n    refetchOnMount: true,\n    ...config,\n  });\n};\n\nexport const useGetConversationByIdQuery = (\n  id: string,\n  config?: UseQueryOptions<s.TConversation>,\n): QueryObserverResult<s.TConversation> => {\n  return useQuery<s.TConversation>(\n    [QueryKeys.conversation, id],\n    () => dataService.getConversationById(id),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      ...config,\n    },\n  );\n};\n\n//This isn't ideal because its just a query and we're using mutation, but it was the only way\n//to make it work with how the Chat component is structured\nexport const useGetConversationByIdMutation = (id: string): UseMutationResult<s.TConversation> => {\n  const queryClient = useQueryClient();\n  return useMutation(() => dataService.getConversationById(id), {\n    // onSuccess: (res: s.TConversation) => {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.conversation, id]);\n    },\n  });\n};\n\nexport const useUpdateMessageMutation = (\n  id: string,\n): UseMutationResult<unknown, unknown, t.TUpdateMessageRequest, unknown> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: t.TUpdateMessageRequest) => dataService.updateMessage(payload), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.messages, id]);\n    },\n  });\n};\n\nexport const useUpdateMessageContentMutation = (\n  conversationId: string,\n): UseMutationResult<unknown, unknown, t.TUpdateMessageContent, unknown> => {\n  const queryClient = useQueryClient();\n  return useMutation(\n    (payload: t.TUpdateMessageContent) => dataService.updateMessageContent(payload),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries([QueryKeys.messages, conversationId]);\n      },\n    },\n  );\n};\n\nexport const useUpdateUserKeysMutation = (): UseMutationResult<\n  t.TUser,\n  unknown,\n  t.TUpdateUserKeyRequest,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: t.TUpdateUserKeyRequest) => dataService.updateUserKey(payload), {\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries([QueryKeys.name, variables.name]);\n    },\n  });\n};\n\nexport const useClearConversationsMutation = (): UseMutationResult<unknown> => {\n  const queryClient = useQueryClient();\n  return useMutation(() => dataService.clearAllConversations(), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.allConversations]);\n    },\n  });\n};\n\nexport const useRevokeUserKeyMutation = (name: string): UseMutationResult<unknown> => {\n  const queryClient = useQueryClient();\n  return useMutation(() => dataService.revokeUserKey(name), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.name, name]);\n      if (s.isAssistantsEndpoint(name)) {\n        queryClient.invalidateQueries([QueryKeys.assistants, name, defaultOrderQuery]);\n        queryClient.invalidateQueries([QueryKeys.assistantDocs]);\n        queryClient.invalidateQueries([QueryKeys.assistants]);\n        queryClient.invalidateQueries([QueryKeys.assistant]);\n        queryClient.invalidateQueries([QueryKeys.actions]);\n        queryClient.invalidateQueries([QueryKeys.tools]);\n      }\n    },\n  });\n};\n\nexport const useRevokeAllUserKeysMutation = (): UseMutationResult<unknown> => {\n  const queryClient = useQueryClient();\n  return useMutation(() => dataService.revokeAllUserKeys(), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.name]);\n      queryClient.invalidateQueries([\n        QueryKeys.assistants,\n        s.EModelEndpoint.assistants,\n        defaultOrderQuery,\n      ]);\n      queryClient.invalidateQueries([\n        QueryKeys.assistants,\n        s.EModelEndpoint.azureAssistants,\n        defaultOrderQuery,\n      ]);\n      queryClient.invalidateQueries([QueryKeys.assistantDocs]);\n      queryClient.invalidateQueries([QueryKeys.assistants]);\n      queryClient.invalidateQueries([QueryKeys.assistant]);\n      queryClient.invalidateQueries([QueryKeys.actions]);\n      queryClient.invalidateQueries([QueryKeys.tools]);\n    },\n  });\n};\n\nexport const useGetSearchEnabledQuery = (\n  config?: UseQueryOptions<boolean>,\n): QueryObserverResult<boolean> => {\n  return useQuery<boolean>([QueryKeys.searchEnabled], () => dataService.getSearchEnabled(), {\n    refetchOnWindowFocus: false,\n    refetchOnReconnect: false,\n    refetchOnMount: false,\n    ...config,\n  });\n};\n\nexport const useGetEndpointsQuery = <TData = t.TEndpointsConfig>(\n  config?: UseQueryOptions<t.TEndpointsConfig, unknown, TData>,\n): QueryObserverResult<TData> => {\n  return useQuery<t.TEndpointsConfig, unknown, TData>(\n    [QueryKeys.endpoints],\n    () => dataService.getAIEndpoints(),\n    {\n      staleTime: Infinity,\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      ...config,\n    },\n  );\n};\n\nexport const useGetModelsQuery = (\n  config?: UseQueryOptions<t.TModelsConfig>,\n): QueryObserverResult<t.TModelsConfig> => {\n  return useQuery<t.TModelsConfig>([QueryKeys.models], () => dataService.getModels(), {\n    initialData: initialModelsConfig,\n    refetchOnWindowFocus: false,\n    refetchOnReconnect: false,\n    refetchOnMount: false,\n    staleTime: Infinity,\n    ...config,\n  });\n};\n\nexport const useCreatePresetMutation = (): UseMutationResult<\n  s.TPreset,\n  unknown,\n  s.TPreset,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: s.TPreset) => dataService.createPreset(payload), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.presets]);\n    },\n  });\n};\n\nexport const useDeletePresetMutation = (): UseMutationResult<\n  m.PresetDeleteResponse,\n  unknown,\n  s.TPreset | undefined,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: s.TPreset | undefined) => dataService.deletePreset(payload), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.presets]);\n    },\n  });\n};\n\nexport const useSearchQuery = (\n  searchQuery: string,\n  pageNumber: string,\n  config?: UseQueryOptions<t.TSearchResults>,\n): QueryObserverResult<t.TSearchResults> => {\n  return useQuery<t.TSearchResults>(\n    [QueryKeys.searchResults, pageNumber, searchQuery],\n    () => dataService.searchConversations(searchQuery, pageNumber),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      ...config,\n    },\n  );\n};\n\nexport const useUpdateTokenCountMutation = (): UseMutationResult<\n  t.TUpdateTokenCountResponse,\n  unknown,\n  { text: string },\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation(({ text }: { text: string }) => dataService.updateTokenCount(text), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.tokenCount]);\n    },\n  });\n};\n\nexport const useLoginUserMutation = (): UseMutationResult<\n  t.TLoginResponse,\n  unknown,\n  t.TLoginUser,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: t.TLoginUser) => dataService.login(payload), {\n    onMutate: () => {\n      queryClient.removeQueries();\n      localStorage.removeItem(LocalStorageKeys.LAST_CONVO_SETUP);\n      localStorage.removeItem(`${LocalStorageKeys.LAST_CONVO_SETUP}_0`);\n      localStorage.removeItem(`${LocalStorageKeys.LAST_CONVO_SETUP}_1`);\n      localStorage.removeItem(LocalStorageKeys.LAST_MODEL);\n      localStorage.removeItem(LocalStorageKeys.LAST_TOOLS);\n      localStorage.removeItem(LocalStorageKeys.FILES_TO_DELETE);\n      // localStorage.removeItem('lastAssistant');\n    },\n  });\n};\n\nexport const useRegisterUserMutation = (\n  options?: m.RegistrationOptions,\n): UseMutationResult<t.TError, unknown, t.TRegisterUser, unknown> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: t.TRegisterUser) => dataService.register(payload), {\n    ...options,\n    onSuccess: (...args) => {\n      queryClient.invalidateQueries([QueryKeys.user]);\n      if (options?.onSuccess) {\n        options.onSuccess(...args);\n      }\n    },\n  });\n};\n\nexport const useRefreshTokenMutation = (): UseMutationResult<\n  t.TRefreshTokenResponse | undefined,\n  unknown,\n  unknown,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation(() => request.refreshToken(), {\n    onMutate: () => {\n      queryClient.removeQueries();\n    },\n  });\n};\n\nexport const useUserKeyQuery = (\n  name: string,\n  config?: UseQueryOptions<t.TCheckUserKeyResponse>,\n): QueryObserverResult<t.TCheckUserKeyResponse> => {\n  return useQuery<t.TCheckUserKeyResponse>(\n    [QueryKeys.name, name],\n    () => {\n      if (!name) {\n        return Promise.resolve({ expiresAt: '' });\n      }\n      return dataService.userKeyQuery(name);\n    },\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      retry: false,\n      ...config,\n    },\n  );\n};\n\nexport const useRequestPasswordResetMutation = (): UseMutationResult<\n  t.TRequestPasswordResetResponse,\n  unknown,\n  t.TRequestPasswordReset,\n  unknown\n> => {\n  return useMutation((payload: t.TRequestPasswordReset) =>\n    dataService.requestPasswordReset(payload),\n  );\n};\n\nexport const useResetPasswordMutation = (): UseMutationResult<\n  unknown,\n  unknown,\n  t.TResetPassword,\n  unknown\n> => {\n  return useMutation((payload: t.TResetPassword) => dataService.resetPassword(payload));\n};\n\nexport const useAvailablePluginsQuery = <TData = s.TPlugin[]>(\n  config?: UseQueryOptions<s.TPlugin[], unknown, TData>,\n): QueryObserverResult<TData> => {\n  return useQuery<s.TPlugin[], unknown, TData>(\n    [QueryKeys.availablePlugins],\n    () => dataService.getAvailablePlugins(),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      ...config,\n    },\n  );\n};\n\nexport const useUpdateUserPluginsMutation = (\n  _options?: m.UpdatePluginAuthOptions,\n): UseMutationResult<t.TUser, unknown, t.TUpdateUserPlugins, unknown> => {\n  const queryClient = useQueryClient();\n  const { onSuccess, ...options } = _options ?? {};\n  return useMutation((payload: t.TUpdateUserPlugins) => dataService.updateUserPlugins(payload), {\n    ...options,\n    onSuccess: (...args) => {\n      queryClient.invalidateQueries([QueryKeys.user]);\n      onSuccess?.(...args);\n    },\n  });\n};\n\nexport const useGetStartupConfig = (\n  config?: UseQueryOptions<t.TStartupConfig>,\n): QueryObserverResult<t.TStartupConfig> => {\n  return useQuery<t.TStartupConfig>(\n    [QueryKeys.startupConfig],\n    () => dataService.getStartupConfig(),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      ...config,\n    },\n  );\n};\n\nexport const useGetCustomConfigSpeechQuery = (\n  config?: UseQueryOptions<t.TCustomConfigSpeechResponse>,\n): QueryObserverResult<t.TCustomConfigSpeechResponse> => {\n  return useQuery<t.TCustomConfigSpeechResponse>(\n    [QueryKeys.customConfigSpeech],\n    () => dataService.getCustomConfigSpeech(),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      ...config,\n    },\n  );\n};\n\nexport const useGetBannerQuery = (\n  config?: UseQueryOptions<t.TBannerResponse>,\n): QueryObserverResult<t.TBannerResponse> => {\n  return useQuery<t.TBannerResponse>([QueryKeys.banner], () => dataService.getBanner(), {\n    refetchOnWindowFocus: false,\n    refetchOnReconnect: false,\n    refetchOnMount: false,\n    ...config,\n  });\n};\n"],"names":["Tools","EToolResources","AnnotationTypes","StepStatus","MessageContentTypes","RunStatus","AuthTypeEnum","AuthorizationTypeEnum","TokenExchangeMethodEnum","FilePurpose","AssistantStreamEvents","AuthType","defaultOrderQuery","order","limit","z","string","uuid","EModelEndpoint","BedrockProviders","authTypeSchema","nativeEnum","Set","agents","openAI","bedrock","azureOpenAI","anthropic","custom","ImageDetail","_a","low","auto","high","eImageDetailSchema","_b","agent","id","name","description","instructions","model","model_parameters","tools","provider","projectIds","isCollaborative","execute_code","file_search","type","function","parameters","properties","required","EAgent","openAISettings","default","temperature","min","max","step","top_p","presence_penalty","frequency_penalty","resendFiles","maxContextTokens","undefined","max_tokens","imageDetail","ANTHROPIC_MAX_OUTPUT","LEGACY_ANTHROPIC_MAX_OUTPUT","anthropicSettings","promptCache","maxOutputTokens","reset","modelName","includes","set","value","topP","topK","legacy","agentsSettings","google","_d","eModelEndpointSchema","extendedModelEndpointSchema","union","tPluginAuthConfigSchema","object","authField","label","tPluginSchema","pluginKey","icon","authConfig","array","optional","authenticated","boolean","isButton","tExampleSchema","input","content","output","agentOptionSettings","functions","classic","tAgentOptionsSchema","skipCompletion","number","messageId","endpoint","clientId","nullable","conversationId","parentMessageId","responseMessageId","overrideParentMessageId","bg","title","or","literal","sender","text","generation","isEdited","isCreatedByUser","error","createdAt","Date","toISOString","updatedAt","current","unfinished","searchResult","finish_reason","thread_id","iconURL","coerceNumber","transform","val","trim","parseFloat","DocumentType","lazy","null","record","tConversationSchema","endpointType","isArchived","user","messages","modelLabel","userLabel","promptPrefix","system","artifacts","context","examples","tags","file_ids","assistant_id","agent_id","region","maxTokens","additionalModelRequestFields","additional_instructions","presetOverride","unknown","stop","greeting","spec","suggestions","systemMessage","jailbreak","jailbreakConversationId","conversationSignature","invocationId","toneStyle","resendImages","agentOptions","chatGptLabel","tPresetSchema","omit","merge","presetId","defaultPreset","removeNullishValues","obj","newObj","__assign","Object","keys","forEach","key","shareId","isAnonymous","isPublic","isVisible","_id","tag","count","position","pick","_c","_e","_f","_g","_h","_j","_k","_l","_m","catch","result","_o","_p","length","bannerId","message","displayFrom","displayTo","assistants","azureAssistants","excelFileTypes","__spreadArray","supportedMimeTypes","mbToBytes","mb","defaultSizeLimit","assistantsFileConfig","fileLimit","fileSizeLimit","totalSizeLimit","disabled","FileSources","FileContext","supportedMimeTypesSchema","any","refine","mimeTypes","every","mimeType","RegExp","endpointFileConfigSchema","fileConfigSchema","endpoints","serverFileSizeLimit","avatarSizeLimit","tModelSpecSchema","preset","showIconInMenu","showIconInHeader","authType","specsConfigSchema","enforce","prioritize","list","SettingsViews","defaultRetrievalModels","Capabilities","AgentCapabilities","fileSourceSchema","modelConfigSchema","deploymentName","version","azureBaseSchema","apiKey","serverless","instanceName","addParams","dropParams","forcePrompt","baseURL","additionalHeaders","azureGroupSchema","group","models","and","azureGroupConfigsSchema","baseEndpointSchema","streamRate","titlePrompt","titleModel","availableRegions","RateLimitPrefix","assistantEndpointSchema","disableBuilder","pollIntervalMs","timeoutMs","supportedIds","excludedIds","privateAssistants","retrievalModels","capabilities","code_interpreter","image_vision","retrieval","actions","fetch","userIdQuery","titleConvo","titleMethod","headers","agentsEndpointSChema","endpointSchema","safeParse","success","concat","values","join","summarize","summaryModel","modelDisplayLabel","customOrder","directEndpoint","titleMessageRole","azureEndpointSchema","groups","plugins","partial","ttsOpenaiSchema","url","voices","ttsAzureOpenAISchema","apiVersion","ttsElevenLabsSchema","websocketUrl","voice_settings","similarity_boost","stability","style","use_speaker_boost","pronunciation_dictionary_locators","ttsLocalaiSchema","backend","ttsSchema","openai","elevenlabs","localai","sttOpenaiSchema","sttAzureOpenAISchema","sttSchema","speechTab","conversationMode","advancedMode","speechToText","engineSTT","languageSTT","autoTranscribeAudio","decibelValue","autoSendText","textToSpeech","engineTTS","voice","languageTTS","automaticPlayback","playbackRate","cacheTTS","EImageOutputType","KnownEndpoints","FetchTokenConfig","rateLimitSchema","fileUploads","ipMax","ipWindowInMinutes","userMax","userWindowInMinutes","conversationsImport","tts","stt","cache","secureImageLinks","imageOutputType","PNG","includedTools","filteredTools","interface","privacyPolicy","externalUrl","openNewTab","termsOfService","modalAcceptance","modalTitle","modalContent","endpointsMenu","modelSelect","sidePanel","multiConvo","bookmarks","presets","prompts","fileStrategy","local","registration","socialLogins","allowedDomains","speech","rateLimits","fileConfig","modelSpecs","all","gptPlugins","strict","data","bingAI","chatGPTBrowser","ollama","xai","VisionModes","InfiniteCollections","Time","CacheKeys","ViolationTypes","ErrorTypes","AuthKeys","ImageDetailCost","SettingsTabValues","STTProviders","TTSProviders","Constants","LocalStorageKeys","ForkOptions","CohereConstants","SystemCategories","sharedOpenAIModels","defaultModels","openAIModels","initialModelsConfig","initial","filter","str","test","keysEndpoint","conversationsRoot","search","q","pageNumber","_post","axios","post","JSON","stringify","sent","isRefreshing","failedQueue","refreshToken","retry","endpoints.refreshToken","dispatchTokenUpdatedEvent","token","defaults","common","setTokenHeader","window","dispatchEvent","CustomEvent","detail","processQueue","prom","reject","resolve","interceptors","response","use","__awaiter","originalRequest","config","Promise","status","_retry","console","warn","push","err_1","location","href","log","err_2","request","get","options","getResponse","postMultiPart","formData","postTTS","responseType","put","delete","deleteWithOptions","patch","revokeUserKey","endpoints.revokeUserKey","revokeAllUserKeys","updateUserKey","payload","Error","userKeyQuery","endpoints.userKeyQuery","getStartupConfig","clearAllConversations","arg","QueryKeys","MutationKeys","getConversationById","endpoints.conversationById","useAbortRequestWithMessage","queryClient","useQueryClient","useMutation","abortKey","endpoints.abortRequest","dataService.abortRequestWithMessage","onSuccess","invalidateQueries","balance","useGetUserQuery","useQuery","refetchOnWindowFocus","refetchOnReconnect","refetchOnMount","useGetMessagesByConvoId","endpoints.messages","useGetSharedMessages","sharedMessages","endpoints.shareMessages","dataService.getSharedMessages","useGetUserBalance","useGetConversationByIdQuery","conversation","dataService.getConversationById","useGetConversationByIdMutation","useUpdateMessageMutation","dataService.updateMessage","useUpdateMessageContentMutation","index","dataService.updateMessageContent","useUpdateUserKeysMutation","dataService.updateUserKey","variables","useClearConversationsMutation","dataService.clearAllConversations","allConversations","useRevokeUserKeyMutation","dataService.revokeUserKey","_endpoint","toLowerCase","endsWith","assistantDocs","assistant","useRevokeAllUserKeysMutation","dataService.revokeAllUserKeys","s.EModelEndpoint","useGetSearchEnabledQuery","searchEnabled","useGetEndpointsQuery","staleTime","Infinity","useGetModelsQuery","initialData","useCreatePresetMutation","dataService.createPreset","useDeletePresetMutation","useSearchQuery","searchQuery","searchResults","endpoints.search","dataService.searchConversations","useUpdateTokenCountMutation","dataService.updateTokenCount","tokenCount","useLoginUserMutation","dataService.login","onMutate","removeQueries","localStorage","removeItem","LAST_CONVO_SETUP","LAST_MODEL","LAST_TOOLS","FILES_TO_DELETE","useRegisterUserMutation","dataService.register","args","_i","arguments","apply","useRefreshTokenMutation","useUserKeyQuery","dataService.userKeyQuery","expiresAt","useRequestPasswordResetMutation","dataService.requestPasswordReset","useResetPasswordMutation","dataService.resetPassword","useAvailablePluginsQuery","availablePlugins","useUpdateUserPluginsMutation","_options","__rest","dataService.updateUserPlugins","useGetStartupConfig","startupConfig","dataService.getStartupConfig","useGetCustomConfigSpeechQuery","customConfigSpeech","useGetBannerQuery","banner"],"mappings":"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"}