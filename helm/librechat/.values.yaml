# Default values for librechat.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1


global:
  librechat:
    # Used for Setting the Right Key, can be something like AZURE_API_KEY, if Azure OpenAI is used
    existingSecretApiKey: AZURE_CFG_API_KEY

# Required as vectorDB for RAG
postgresql:
  enabled: true
  
  auth:
    database: librechat-vectordb
    username: librechat
    password: changeme
    # define a secret with values for "postgres-password", "password" (user Password)  and "replication-password" or add values directly
    existingSecret: "librechat-vectordb"



librechat:

# provide context-aware responses based on user-uploaded files
  rag:
    enabled: true
    # Currently only lite is supported. This allows leveraging RAGs from Remote Endpoint like azure or 
    mode: lite




# LibreChat allows Configuration in 2 Ways: Environment Variables and a Config file. For easier Deployment the needed values are predifined here but should be adjusted to your needs.
  configEnv:
    PLUGIN_MODELS: gpt-4,gpt-4-turbo-preview,gpt-4-0125-preview,gpt-4-1106-preview,gpt-4-0613,gpt-3.5-turbo,gpt-3.5-turbo-0125,gpt-3.5-turbo-1106,gpt-3.5-turbo-0613
    DEBUG_PLUGINS: "true"
    # IMPORTANT -- GENERATE your own: openssl rand -hex 32 and openssl rand -hex 16 for CREDS_IV. Best Practise: Put into Secret. See existingSecretName
    CREDS_KEY: 9e95d9894da7e68dd69c0046caf5343c8b1e80c89609b5a1e40e6568b5b23ce6
    CREDS_IV: ac028c86ba23f4cd48165e0ca9f2c683
    JWT_SECRET: 16f8c0ef4a5d391b26034086c628469d3f9f497f08163ab9b40137092f2909ef
    JWT_REFRESH_SECRET: eaa5191f2914e30b9387fd84e254e4ba6fc51b4654968a9b0803b456a54b8418
    # Set Config Params here
    # ENV_NAME: env-value

    # existing Secret for all envs/ only Passwords. Can be locally generated with: kubectl create secret generic librechat-secret-envs --from-env-file=.env.example --dry-run=client -o yaml > secret-envs.yaml
    ## For better maintainabillity, you can put all vars directly in the config Section and only overwrite Secrets with this if nessesary.
    # Required Values:
    # - MEILI_MASTER_KEY
  existingSecretName: "librechat-credentials-env"
  
  # # For adding a custom config yaml-file you can set the contents in this var
  configYamlContent: |
    version: "1.0.3"
    cache: true
    fileConfig:
      serverFileSizeLimit: 300
      endpoints:
        default:
          totalSizeLimit: 300
    rateLimits:
      fileUploads:
        ipMax: 100
        ipWindowInMinutes: 60  # Rate limit window for file uploads per IP
        userMax: 50
        userWindowInMinutes: 60  # Rate limit window for file uploads per user
    endpoints:
      azureOpenAI:
        plugins: true
        assistants: true
        titleConvo: true
        titleModel: "gpt-3.5-turbo-1106"
        groups:
        - group: "azure-openai" # arbitrary name
          plugins: true
          assistants: true
          apiKey: "${AZURE_CFG_API_KEY}"
          instanceName: "robads-ai-schweden"  # name of the resource group or instance
          version: "2024-02-15-preview"
          models:
            gpt-3.5-turbo-1106:
              deploymentName: gpt-35-turbo
            gpt-4-vision-preview:
              deploymentName: gpt-4-vision-preview
      custom:
      - name: "OpenRouter All"
        apiKey: "${OPENROUTER_API_KEY}"
        baseURL: "https://openrouter.ai/api/v1"
        models:
          default: ["gpt-3.5-turbo"]
          fetch: true
        titleConvo: true
        iconURL: https://avatars.githubusercontent.com/u/139423088?s=200&v=4
        titleModel: "gpt-3.5-turbo"
        summarize: false
        forcePrompt: false
        modelDisplayLabel: "OpenRouter - Alle"
        dropParams:
          - "frequency_penalty"
          - "stop"
      - name: "OpenRouter BestOf"
        apiKey: "${OPENROUTER_API_KEY}"
        baseURL: "https://openrouter.ai/api/v1"
        models:
          default: ["google/gemini-pro", "mistralai/mistral-7b-instruct:free", "phind/phind-codellama-34b", "cognitivecomputations/dolphin-mixtral-8x7b", "mistralai/mistral-large", "mistralai/mixtral-8x7b-instruct", "togethercomputer/stripedhyena-nous-7b"]
          fetch: false
        titleConvo: true
        iconURL: https://avatars.githubusercontent.com/u/139423088?s=200&v=4
        titleModel: "gpt-3.5-turbo"
        summarize: false
        forcePrompt: false
        modelDisplayLabel: "OpenRouter - BestOf"
        dropParams:
          - "frequency_penalty"
          - "stop"
# # name of existing Yaml configmap, key must be librechat.yaml
  existingConfigYaml: ""

  # Volume used to store image Files uploaded to the Web UI
  imageVolume:
    size: 10G

image:
  repository: danny-avila/librechat
  registry: ghcr.io
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""


imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 3080


resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# livenessProbe:
#   httpGet:
#     path: /
#     port: http
# readinessProbe:
#   httpGet:
#     path: /
#     port: http

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# MongoDB Parameters
mongodb:
  enabled: true
  auth:
    enabled: false
  databases:
   - LibreChat
#  persistence: 
#    size: 8Gi

ingress:
  enabled: true
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: "librechat.prod.bat-bs.com"
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local


meilisearch:
  enabled: true
  image: 
    tag: "v1.7.3"
  persistence:
    storageClass: rook-ceph-block-replica
  auth:
    # Use an existing Kubernetes secret for the MEILI_MASTER_KEY
    existingMasterKeySecret: "librechat-credentials-env"
librechat-rag-api:
  enabled: true
  rag:
    configEnv:
      EMBEDDINGS_PROVIDER: azure
      EMBEDDINGS_MODEL: text-embedding-3-large
      AZURE_OPENAI_ENDPOINT: https://robads-ai-schweden.openai.azure.com
    existingSecretName: "rag-openai-secret"
  postgresql:
    enabled: true
    image:
      pullSecrets:
      - pgvector
    auth:
      existingSecret: "librechat-vectordb"