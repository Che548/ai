name: Generate Unreleased Changelog PR

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  generate-unreleased-changelog-pr:
    permissions:
      contents: write  # Required for pushing new branches and commits.
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the repository on main with full history.
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
#          ref: main
          fetch-depth: 0

      # 2. Set Git Author Identity.
      - name: Set Git Author Identity
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      # 3. Get the latest version tag.
      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) || echo "none")
          echo "Latest tag: $LATEST_TAG"
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      # 4. Generate the Unreleased changelog.
      - name: Generate Unreleased Changelog
        id: generate_unreleased
        uses: mikepenz/release-changelog-builder-action@v5.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          configuration: ".github/configuration-unreleased.json"
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          outputFile: CHANGELOG-unreleased.md
          fromTag: ${{ steps.get_latest_tag.outputs.tag }}
          toTag: main

      # 5. Update CHANGELOG.md with the new Unreleased section.
      - name: Update CHANGELOG.md
        run: |
          # Create CHANGELOG.md if it doesn't exist.
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          echo "Updating CHANGELOG.mdâ€¦"
          
          # Extract content before the "## [Unreleased]" or version section.
          if grep -q "^## \[Unreleased\]" CHANGELOG.md; then
            awk '/^## \[Unreleased\]/{exit} {print}' CHANGELOG.md > CHANGELOG_TMP.md
          else
            awk '/^## \[v/{exit} {print}' CHANGELOG.md > CHANGELOG_TMP.md
          fi
          
          # Append the generated Unreleased changelog.
          echo "" >> CHANGELOG_TMP.md
          cat CHANGELOG-unreleased.md >> CHANGELOG_TMP.md
          echo "" >> CHANGELOG_TMP.md
          
          # Append the remainder of the original changelog (starting from the first version header).
          awk 'f{print} /^## \[v/{f=1; print}' CHANGELOG.md >> CHANGELOG_TMP.md
          
          # Replace the old file with the updated file.
          mv CHANGELOG_TMP.md CHANGELOG.md
          
          # Remove the temporary file.
          rm -f CHANGELOG-unreleased.md
          
          echo "Final CHANGELOG.md:"
          cat CHANGELOG.md

      # 6. Create (or reset) a new branch from main, commit, and force-push the updated CHANGELOG.md.
      - name: Create New Branch and Push Changes
        run: |
          # Ensure we're on main, then reset (or create) the branch.
          git checkout main
          git checkout -B changelog/unreleased-update
          git add CHANGELOG.md
          # Allow an empty commit if there are no changes.
          git commit --allow-empty -m "Update CHANGELOG.md with new unreleased changes"
          git push --force origin changelog/unreleased-update

      # 7. Create or update the Pull Request.
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: main
          branch: "changelog/unreleased-update"
          title: "action: update Unreleased changelog"
          body: |
            **Description**:
            - This PR updates the Unreleased section in CHANGELOG.md.
            - It compares the current main branch with the latest version tag (determined as ${{ steps.get_latest_tag.outputs.tag }}),
              regenerates the Unreleased changelog, removes the old Unreleased block (if any), and inserts the new content.