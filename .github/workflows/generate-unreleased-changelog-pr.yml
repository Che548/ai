name: Generate Unreleased Changelog PR

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  generate-unreleased-changelog-pr:
    permissions:
      contents: write  # Required for pushing new branches and commits.
      pull-requests: write
    runs-on: ubuntu-latest
    steps:

      # 1. Checkout the repository with full history.
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Get the latest version tag (to compare against).
      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "Latest tag: $LATEST_TAG"
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      # 3. Generate the Unreleased changelog.
      - name: Generate Unreleased Changelog
        id: generate_unreleased
        uses: mikepenz/release-changelog-builder-action@v5.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          configuration: ".github/configuration-unreleased.json"
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          outputFile: CHANGELOG-unreleased.md
          fromTag: ${{ steps.get_latest_tag.outputs.tag }}
          toTag: main

      # 4. Update CHANGELOG.md with the new Unreleased section.
      - name: Update CHANGELOG.md with new Unreleased section
        run: |
          # Ensure CHANGELOG.md exists; if not, create a basic header.
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          echo "Updating CHANGELOG.mdâ€¦"
          
          # Check if a "## [Unreleased]" section already exists.          
          if grep -q "^## \[Unreleased\]" CHANGELOG.md; then
            awk '/^## \[Unreleased\]/{exit} {print}' CHANGELOG.md > header.md
            awk 'flag{print} /^---/{flag=1; print}' CHANGELOG.md > tail.md
          else
            awk '/^## \[v/{exit} {print}' CHANGELOG.md > header.md
            awk 'f{print} /^## \[v/{f=1; print}' CHANGELOG.md > tail.md
          fi
          
          cat header.md CHANGELOG-unreleased.md tail.md > CHANGELOG.md.new
          mv CHANGELOG.md.new CHANGELOG.md
          
          echo "Final CHANGELOG.md:"
          cat CHANGELOG.md

      # 5. Ensure the changelog branch exists and push if needed
      - name: Ensure Changelog Branch Exists and Clean Working Directory
        run: |
          git fetch origin
          if git show-ref --verify --quiet refs/remotes/origin/changelog/unreleased-update; then
            echo "Branch exists on remote. Checking out..."
            git checkout changelog/unreleased-update
            git reset --hard origin/main
          else
            echo "Branch does not exist. Creating new branch."
            git checkout -b changelog/unreleased-update
          fi

          # Ensure working directory is clean before rebasing
          if [[ -n $(git status --porcelain) ]]; then
            echo "Unstaged changes detected. Stashing..."
            git stash push --include-untracked
          fi

          git pull --rebase origin main || true

      # 6. Auto-resolve conflicts in CHANGELOG.md if necessary
      - name: Auto-resolve conflicts in CHANGELOG.md
        run: |
          if git diff --name-only --diff-filter=U | grep -q "CHANGELOG.md"; then
            echo "Merge conflict detected in CHANGELOG.md. Resolving..."
            git checkout --ours CHANGELOG.md || true
            git add CHANGELOG.md
            git commit --no-edit || true
          else
            echo "No merge conflicts detected."
          fi

      # 7. Create a pull request with the updated CHANGELOG.md.
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sign-commits: true
          commit-message: "action: update Unreleased changelog"
          base: main
          branch: "changelog/unreleased-update"
          title: "action: update Unreleased changelog"
          body: |
            **Description**:
            - This PR updates the Unreleased section in CHANGELOG.md.
            - It compares the current main branch with the latest version tag (determined as ${{ steps.get_latest_tag.outputs.tag }}),
              regenerates the Unreleased changelog, removes the old Unreleased block (if any), and inserts the new content.
